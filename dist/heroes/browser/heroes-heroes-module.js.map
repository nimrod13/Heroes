{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/table.js","./node_modules/@dynatrace/barista-components/__ivy_ngcc__/fesm2015/dynatrace-barista-components-empty-state.js","./node_modules/@dynatrace/barista-components/__ivy_ngcc__/fesm2015/dynatrace-barista-components-formatters.js","./node_modules/@dynatrace/barista-components/__ivy_ngcc__/fesm2015/dynatrace-barista-components-pagination.js","./node_modules/@dynatrace/barista-components/__ivy_ngcc__/fesm2015/dynatrace-barista-components-table.js","./src/app/dynamic-table/dynamic-table.component.ts","./src/app/dynamic-table/dynamic-table.component.html","./src/app/heroes/heroes.component.ts","./src/app/heroes/heroes.component.html","./src/app/heroes/heroes.module.ts","./src/app/scrolling/scrolling.component.ts","./src/app/scrolling/scrolling.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACW;AACN;AAChB;AACI;AACI;;AAEhD;AACA;AACA,+CAA+C;AAC/C,IAAI,4DAAqB;AACzB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,CAAC;AACD,oBAAoB,2DAAoB;AACxC,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,gEAAyB;AAC7B,CAAC;AACD,+CAA+C;AAC/C,IAAI,4DAAqB;AACzB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,oBAAoB,2DAAoB;AACxC,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,gEAAyB;AAC7B,CAAC;AACqD;AACL;AACN;AACyQ;AAClP;AACvB;;AAE3C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,WAAW,EAqBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,sBAAsB,qBAAqB;AAC3C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,mFAAqB;AAChD;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,kDAAkD,8BAA8B,+DAAwB,CAAC,yDAAkB,GAAG;AAC9H,kBAAkB,+DAAwB,EAAE,wDAAwD;AACpG;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB,gBAAgB,2BAA2B;AAC3C,KAAK,gBAAgB,UAAU,OAAO,yDAAkB,EAAE,EAAE,EAAE,QAAQ,EAAE;AACxE,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,8DAA8D,oCAAoC,+DAAwB,CAAC,yDAAkB,GAAG;AAChJ,wBAAwB,+DAAwB,EAAE,oEAAoE;AACtH;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB,gBAAgB,iCAAiC;AACjD,KAAK,gBAAgB,UAAU,OAAO,yDAAkB,EAAE,EAAE,EAAE,QAAQ,EAAE;AACxE,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,8DAA8D,oCAAoC,+DAAwB,CAAC,yDAAkB,GAAG;AAChJ,wBAAwB,+DAAwB,EAAE,oEAAoE;AACtH;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB,gBAAgB,iCAAiC;AACjD,KAAK,gBAAgB,UAAU,OAAO,yDAAkB,EAAE,EAAE,EAAE,QAAQ,EAAE;AACxE,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,0BAA0B,mFAAqB;AAC/C;AACA;AACA;AACA,sDAAsD,qDAAqD;AAC3G,oBAAoB,+DAAwB,EAAE,qIAAqI;AACnL,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,2EAA2E,aAAa,gEAAyB,GAAG,mEAAmE,IAAI,wEAAiC,GAAG;AACjP;AACA,YAAY,OAAO,mDAAK,2BAA2B;AACnD,iBAAiB,OAAO,mDAAK,wBAAwB;AACrD,YAAY,OAAO,0DAAY,uBAAuB;AACtD,kBAAkB,OAAO,0DAAY,6BAA6B;AAClE,kBAAkB,OAAO,0DAAY,6BAA6B;AAClE;AACA,kCAAkC,mEAA4B;AAC9D,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,6BAA6B,mEAAmE;AAChG,aAAa;AACb,KAAK,UAAU;AACf,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EA+BV;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA,mBAAmB,EAAE;AACrB,8CAA8C,+BAA+B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,+DAAwB,gBAAgB,+DAAwB,CAAC,wDAAiB,GAAG;AAC9K,qBAAqB,+DAAwB,EAAE,6JAA6J,wEAAiC,GAAG;AAChP;AACA;AACA,KAAK,qBAAqB;AAC1B,KAAK,OAAO,wDAAU;AACtB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,qBAAqB,GAAG,OAAO,wDAAiB,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,+DAAwB,gBAAgB,+DAAwB,CAAC,wDAAiB,GAAG;AAC9K,qBAAqB,+DAAwB,EAAE,yJAAyJ,wEAAiC,GAAG;AAC5O;AACA;AACA,KAAK,qBAAqB;AAC1B,KAAK,OAAO,wDAAU;AACtB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,qBAAqB,GAAG,OAAO,wDAAiB,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,4CAA4C,2BAA2B,+DAAwB,gBAAgB,+DAAwB,CAAC,wDAAiB,GAAG;AAC5J,eAAe,+DAAwB,EAAE,8HAA8H,wEAAiC,GAAG;AAC3M;AACA;AACA,KAAK,qBAAqB;AAC1B,KAAK,OAAO,wDAAU;AACtB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,qBAAqB,GAAG,OAAO,wDAAiB,EAAE,EAAE,EAAE,QAAQ,EAAE;;AAE/F;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,CAAC,8DAAuB,GAAG;AAC7E,kBAAkB,+DAAwB,EAAE,8BAA8B,kEAA2B,GAAG;;AAExG,WAAW,EAsBV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,CAAC,yDAAkB,GAAG,+DAAwB,CAAC,6DAAsB,GAAG;AAC/L,uBAAuB,+DAAwB,EAAE,2EAA2E,uFAAuF,aAAa,wEAAiC,EAAE,kEAA2B,GAAG;AACjS;AACA;AACA,KAAK,OAAO,yDAAW,EAAE;AACzB,KAAK,OAAO,6DAAe;AAC3B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,yDAAkB,EAAE,GAAG,OAAO,6DAAsB,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC1G,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,CAAC,yDAAkB,GAAG,+DAAwB,CAAC,6DAAsB,GAAG;AAC/L,uBAAuB,+DAAwB,EAAE,2EAA2E,uFAAuF,aAAa,wE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eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD,2BAA2B,EAAE;AAC7B,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,2BAA2B,cAAc;AACzC,2BAA2B,EAAE;AAC7B,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,+BAA+B,yBAAyB;AACxD,+BAA+B,EAAE;AACjC,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,kCAAkC,EAAE;AACpC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,gCAAgC,SAAS;AACzC,2DAA2D,kBAAkB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,0BAA0B;AACjD,uBAAuB,EAAE;AACzB,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAkBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mDAAmD,GAAG;AACtD;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gEAAgE,KAAK;AACrE;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,8BAA8B,qBAAqB;AACnD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,+DAAwB,CAAC,8DAAuB,GAAG,+DAAwB,CAAC,wDAAiB,GAAG;AACzL,qBAAqB,+DAAwB,EAAE,0DAA0D;AACzG;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,wDAAU;AACtB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB,gBAAgB,0BAA0B;AAC1C,KAAK,gBAAgB,UAAU,OAAO,8DAAuB,EAAE,GAAG,OAAO,wDAAiB,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC1G,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,CAAC,8DAAuB,GAAG,+DAAwB,CAAC,wDAAiB,GAAG;AAC/L,uBAAuB,+DAAwB,EAAE,kEAAkE;AACnH;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,wDAAU;AACtB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB,gBAAgB,gCAAgC;AAChD,KAAK,gBAAgB,UAAU,OAAO,8DAAuB,EAAE,GAAG,OAAO,wDAAiB,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC1G,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,CAAC,8DAAuB,GAAG,+DAAwB,CAAC,wDAAiB,GAAG;AAC/L,uBAAuB,+DAAwB,EAAE,kEAAkE;AACnH;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,wDAAU;AACtB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB,gBAAgB,gCAAgC;AAChD,KAAK,gBAAgB,UAAU,OAAO,8DAAuB,EAAE,GAAG,OAAO,wDAAiB,EAAE,EAAE,EAAE,QAAQ,EAAE;AAC1G,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,6DAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAOV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAe,EAAE,kCAAkC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,YAAY,+DAAS,4DAA4D,EAAE;AACnF,wBAAwB,EAAE;AAC1B,qEAAqE,mBAAmB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,sCAAsC,mFAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,yDAAyD,EAAE;AAC3D;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA,2BAA2B,EAAE;AAC7B,yCAAyC,EAAE,mCAAmC,EAAE;AAChF,+CAA+C,EAAE;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE,mCAAmC,EAAE;AAC/E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,0CAA0C,EAAE;AAC5C;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,gFAAgF,EAAE;AAClF;AACA,2BAA2B,EAAE;AAC7B,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,6EAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,6EAAY;AACxB;AACA;AACA,iBAAiB,yDAAY;AAC7B;AACA;AACA;AACA,yBAAyB,+CAAE;AAC3B;AACA;AACA;AACA;AACA,yDAAyD,gEAAS;AAClE,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,oCAAoC;AAC3D,uBAAuB,EAAE;AACzB,yCAAyC,EAAE,iBAAiB,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,+DAA+D,qBAAqB;AACpF,uBAAuB,EAAE;AACzB,wCAAwC,EAAE;AAC1C,uBAAuB,EAAE;AACzB,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,aAAa,8CAA8C;AAC3D,aAAa,wCAAwC;AACrD,aAAa,8CAA8C;AAC3D;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,+CAAE;AAC1C,kBAAkB,gEAAS;AAC3B;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,8CAA8C,4BAA4B,+DAAwB,CAAC,6DAAsB,GAAG,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,UAAU,+DAAwB,CAAC,gEAAqB,MAAM,+DAAwB,CAAC,wDAAQ,GAAG,+DAAwB,CAAC,8DAAe,GAAG;AAClY,gBAAgB,+DAAwB,EAAE,8IAA8I;AACxL,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,+CAA+C;AACtD,QAAQ,+DAAwB;AAChC,QAAQ,+DAAwB;AAChC,QAAQ,+DAAwB;AAChC,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,wCAAwC,+FAA+F,oMAAoM;AAClV,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,QAAQ,gEAAyB;AACjC,QAAQ,gEAAyB;AACjC,QAAQ,gEAAyB;AACjC,KAAK,EAAE;AACP;AACA,4CAA4C;AAC5C;AACA;AACA,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,6BAA6B,OAAO,uDAAS,mBAAmB,GAAG;AACxE,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,8DAAQ;AACpB;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,kBAAkB,OAAO,uDAAS,yBAAyB,eAAe,IAAI;AAC9E,wBAAwB,OAAO,uDAAS,2BAA2B,eAAe,IAAI;AACtF,wBAAwB,OAAO,uDAAS,2BAA2B,eAAe,IAAI;AACtF,0BAA0B,OAAO,6DAAe,wBAAwB,oBAAoB,IAAI;AAChG,uBAAuB,OAAO,6DAAe,qBAAqB,oBAAoB,IAAI;AAC1F,6BAA6B,OAAO,6DAAe;AACnD;AACA,iBAAiB,IAAI;AACrB,6BAA6B,OAAO,6DAAe;AACnD;AACA,iBAAiB,IAAI;AACrB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,+DAAiB;AAChD;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,6DAAsB,EAAE,GAAG,OAAO,+DAAwB,EAAE,GAAG,OAAO,wDAAiB,EAAE,GAAG;AAClI,sBAAsB,uDAAS;AAC/B;AACA,aAAa,GAAG,GAAG,OAAO,gEAAqB;AAC/C,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,8DAAe,EAAE,EAAE,EAAE,GAAG;AAClD,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAS;AAC3B,mCAAmC,eAAe;AAClD,SAAS;AACT,kBAAkB,uDAAS;AAC3B,qCAAqC,eAAe;AACpD,SAAS;AACT,kBAAkB,uDAAS;AAC3B,qCAAqC,eAAe;AACpD,SAAS;AACT,kBAAkB,6DAAe;AACjC,kCAAkC,oBAAoB;AACtD,SAAS;AACT,kBAAkB,6DAAe;AACjC,+BAA+B,oBAAoB;AACnD,SAAS;AACT,kBAAkB,6DAAe;AACjC;AACA;AACA,iBAAiB;AACjB,SAAS;AACT,kBAAkB,6DAAe;AACjC;AACA;AACA,iBAAiB;AACjB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAqOV;AACD;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,WAAW,EAYV;AACD;AACA;AACA,UAAU;AACV;AACA,gCAAgC,4DAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,+DAAwB,eAAe,+DAAwB,0BAA0B;AAClL,qBAAqB,+DAAwB,EAAE,0GAA0G;AACzJ,QAAQ,+DAAwB;AAChC,QAAQ,+DAAwB;AAChC,QAAQ,+DAAwB;AAChC,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,2FAA2F,yQAAyQ;AACtX,QAAQ,qEAA8B;AACtC,QAAQ,wDAAiB;AACzB,QAAQ,wDAAiB;AACzB,QAAQ,mEAA4B;AACpC,KAAK,EAAE;AACP;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,KAAK,+BAA+B,OAAO,sDAAQ,EAAE,GAAG;AACxD,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,gCAAgC;AACtG;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,eAAe,OAAO,mDAAK,EAAE;AAC7B,iBAAiB,OAAO,uDAAS,wBAAwB,eAAe,IAAI;AAC5E,YAAY,OAAO,uDAAS,sBAAsB,eAAe,IAAI;AACrE,kBAAkB,OAAO,uDAAS,4BAA4B,eAAe,IAAI;AACjF;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,+BAA+B,+DAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAS;AAC3B,kCAAkC,eAAe;AACjD,SAAS;AACT,kBAAkB,uDAAS;AAC3B,gCAAgC,eAAe;AAC/C,SAAS;AACT,kBAAkB,uDAAS;AAC3B,sCAAsC,eAAe;AACrD,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAuDV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAuB,EAAE,uBAAuB;AACtE,sBAAsB,8DAAuB,EAAE,8CAA8C,oCAAoC,EAAE,EAAE;AACrI,cAAc,oDAAoD,gEAAyB,kBAAkB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,EAAE;AAC5B,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;;AAEmb;;AAEnb,iC;;;;;;;;;;;;AC5qGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsK;AACpG;AACe;AAChC;AAClB;AACuB;AACkC;;AAExF;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACwC;AACqB;AACA;AACb;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,wBAAwB,+DAAwB,EAAE,waAAwa;AAC1d,QAAQ,6DAAsB;AAC9B,QAAQ,4DAAqB;AAC7B,QAAQ,uDAAgB;AACxB,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,eAAe,yEAAa,8BAA8B,cAAc,mDAAmD,iBAAiB,kBAAkB,mBAAmB,gBAAgB,gBAAgB,kDAAkD,gBAAgB,kDAAkD,aAAa,YAAY,mBAAmB,uBAAuB,gFAAgF,WAAW,YAAY,YAAY,wBAAwB,wFAAwF,UAAU,6BAA6B,cAAc,mBAAmB,+CAA+C,cAAc,gBAAgB,eAAe,gBAAgB,2BAA2B,cAAc,WAAW,kBAAkB,+DAA+D,eAAe,iCAAiC,gBAAgB,uDAAuD,gBAAgB,oNAAoN,aAAa,gNAAgN,kBAAkB,cAAc,gBAAgB,wGAAwG,aAAa,gNAAgN,eAAe,cAAc,YAAY,4QAA4Q,eAAe,IAAI;AAChqE,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gCAAgC,cAAc,gCAAgC,iBAAiB,kBAAkB,mBAAmB,gBAAgB,gBAAgB,+BAA+B,gBAAgB,+BAA+B,aAAa,YAAY,mBAAmB,uBAAuB,wCAAwC,WAAW,YAAY,YAAY,wBAAwB,sDAAsD,UAAU,qCAAqC,cAAc,mBAAmB,+CAA+C,cAAc,gBAAgB,eAAe,gBAAgB,mCAAmC,cAAc,WAAW,kBAAkB,8EAA8E,eAAe,yCAAyC,gBAAgB,+DAA+D,gBAAgB,kFAAkF,aAAa,gFAAgF,kBAAkB,cAAc,gBAAgB,iDAAiD,aAAa,gFAAgF,eAAe,cAAc,YAAY,yFAAyF,eAAe;AAC37C,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,2CAA2C;AACnH,6BAA6B,+DAAwB,EAAE,mPAAmP;AAC1S,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,2CAA2C;AACnH,6BAA6B,+DAAwB,EAAE,yPAAyP;AAChT,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,+CAA+C;AAC/H,iCAAiC,+DAAwB,EAAE,mIAAmI;AAC9L,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,iCAAiC,gEAAS;AAC1C,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0BAA0B,gEAAS,QAAQ,gEAAS;AACpD;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,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vG;AACA;AACA;AACA;AACA,4BAA4B,EAAE,EAAE,EAAE,EAAE;AACpC,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA,0BAA0B,+EAAY;AACtC,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEmL;;AAEnL,oE;;;;;;;;;;;;ACzfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;AACK;AACsB;AACf;;AAEzE;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACxC,uBAAuB;AACvB,WAAW,EAKV;AACD;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAWV;AACD,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,sBAAsB,KAAK,GAAG,gCAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK,GAAG,oCAAoC;AACrE,yBAAyB,KAAK,IAAI,oCAAoC;AACtE;AACA;AACA;AACA;AACA,WAAW,EAWV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,8BAA8B,aAAa,EAAE,MAAM,EAAE,IAAI;AACzD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,kCAAkC,EAAE;AACpC,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,EAAE;AACrC,mBAAmB,EAAE;AACrB;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA,eAAe,mFAAQ;AACvB,yBAAyB,kFAAoB;AAC7C;AACA;AACA;AACA,0CAA0C,4BAA4B;AACtE,eAAe,0DAAmB,EAAE,2CAA2C;AAC/E,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,kCAAkC;AAClC,WAAW,EAOV;AACD,WAAW,EAAE;AACb;AACA,KAAK,2DAA2D;AAChE,KAAK,2DAA2D;AAChE,KAAK,4CAA4C;AACjD;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG,iGAAiG;AAC/G,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oEAAY,wBAAwB,OAAO;AACtD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,cAAc,eAAe,EAAE,QAAQ;AACvC;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAKV;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,kBAAkB,kFAAoB;AACtC;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,KAAK,yEAAyE;AAC9E,KAAK,yEAAyE;AAC9E,KAAK,yEAAyE;AAC9E,KAAK,yEAAyE;AAC9E,KAAK,4DAA4D;AACjE;AACA,WAAW,EAAE;AACb;AACA,KAAK,yEAAyE;AAC9E,KAAK,yEAAyE;AAC9E,KAAK,yEAAyE;AAC9E,KAAK,yEAAyE;AAC9E,KAAK,4DAA4D;AACjE;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,wDAAwD;AACxD,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA;AACA,sCAAsC,oBAAoB;AAC1D;AACA,YAAY,mFAAQ;AACpB,8BAA8B,kFAAoB,UAAU,oBAAoB;AAChF;AACA;AACA;AACA;AACA,0CAA0C,4BAA4B;AACtE,eAAe,0DAAmB,EAAE,2CAA2C;AAC/E,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,KAAK,wEAAwE;AAC7E,KAAK,wEAAwE;AAC7E,KAAK,wEAAwE;AAC7E,KAAK,wEAAwE;AAC7E,KAAK,2DAA2D;AAChE;AACA,WAAW,EAAE;AACb;AACA,KAAK,wEAAwE;AAC7E,KAAK,wEAAwE;AAC7E,KAAK,wEAAwE;AAC7E,KAAK,wEAAwE;AAC7E,KAAK,2DAA2D;AAChE;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,wDAAwD;AACxD,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA,YAAY,mFAAQ;AACpB,+BAA+B,kFAAoB,UAAU,oBAAoB;AACjF;AACA;AACA;AACA;AACA,4CAA4C,6BAA6B;AACzE,gBAAgB,0DAAmB,EAAE,6CAA6C;AAClF,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,mFAAQ;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,oDAAoD,iCAAiC;AACrF,oBAAoB,0DAAmB,EAAE,qDAAqD;AAC9F,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,mFAAQ;AACpB,+BAA+B,kFAAoB;AACnD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,oDAAoD,iCAAiC;AACrF,oBAAoB,0DAAmB,EAAE,qDAAqD;AAC9F,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd;AACA,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,kBAAkB,kFAAoB;AACtC,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA;AACA;AACA;AACA,YAAY,mFAAQ;AACpB,+BAA+B,kFAAoB;AACnD;AACA;AACA;AACA;AACA,4CAA4C,6BAA6B;AACzE,gBAAgB,0DAAmB,EAAE,6CAA6C;AAClF,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,sBAAsB,KAAK,IAAI,GAAG;AAClC;AACA;AACA,UAAU;AACV;AACA,eAAe,kFAAe;AAC9B;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,sDAAsD;AAChE,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B,+DAAwB,CAAC,uDAAS,GAAG;AACxH,oBAAoB,0DAAmB,EAAE,qDAAqD;AAC9F;AACA;AACA,KAAK,6BAA6B,OAAO,oDAAM,SAAS,uDAAS,IAAI;AACrE;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B,uBAAuB,uDAAS;AAChC,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;AAC9B,WAAW,EAMV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAU;AAC5B,kBAAkB,kEAAU;AAC5B,cAAc,YAAY,KAAK,YAAY;AAC3C;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,kBAAkB,kFAAoB;AACtC,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA,YAAY,mFAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,gDAAgD,+BAA+B;AAC/E,kBAAkB,0DAAmB,EAAE,iDAAiD;AACxF,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,WAAW;AACX,eAAe,EAAE;AACjB;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA;AACA;AACA;AACA,YAAY,mFAAQ;AACpB,8BAA8B,kFAAoB;AAClD;AACA;AACA;AACA;AACA,0CAA0C,4BAA4B;AACtE,eAAe,0DAAmB,EAAE,2CAA2C;AAC/E,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC,qCAAqC,EAAE;AACvC;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,sCAAsC,EAAE;AACxC,eAAe,EAAE;AACjB;AACA;AACA;AACA,iDAAiD;AACjD;AACA,mBAAmB,EAAE;AACrB,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,aAAa,EAAE,MAAM,GAAG,IAAI;AACtD,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,YAAY,kFAAO;AACnB;AACA;AACA,eAAe,mFAAQ;AACvB,6BAA6B,kFAAoB;AACjD;AACA;AACA;AACA,kDAAkD,gCAAgC;AAClF,mBAAmB,0DAAmB,EAAE,mDAAmD;AAC3F,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,kDAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,eA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A;AACA,eAAe,EAAE;AACjB,sCAAsC,gBAAgB;AACtD,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,oCAAoC,gBAAgB;AACpD,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,uBAAuB,kFAAoB;AAC3C,YAAY,mFAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,yBAAyB,kFAAoB;AAC7C,YAAY,mFAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,4BAA4B,kFAAoB;AAChD,YAAY,mFAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AA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AI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD,IAAI,2DAAoB;AACxB,iBAAiB,yDAAkB;AACnC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,uDAAuD;AACvD,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA;AACA,uBAAuB,4DAAS;AAChC;AACA,8CAA8C,6CAA6C;AAC3F,gBAAgB,+DAAwB,EAAE,6DAA6D,0EAA0E,qCAAqC,gEAAyB,GAAG,UAAU,4DAAS,yBAAyB,IAAI,wEAAiC,GAAG;AACtU,8BAA8B,mEAA4B;AAC1D,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,6BAA6B,UAAU,4DAAS,yBAAyB;AACzE;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA,oBAAoB,yDAAM;AAC1B;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,oCAAoC,kDAAY;AAChD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,oCAAoC,mDAAK;AACzC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,YAAY,uFAAY;AACxB;AACA;AACA,YAAY,0FAAe;AAC3B;AACA;AACA,YAAY,2FAAgB;AAC5B;AACA;AACA,YAAY,0FAAe;AAC3B;AACA;AACA,YAAY,2FAAgB;AAC5B;AACA;AACA,YAAY,0FAAe;AAC3B;AACA;AACA;AACA,wCAAwC,yBAAyB,+DAAwB,CAAC,wDAAiB,GAAG;AAC9G,aAAa,+DAAwB,EAAE,gHAAgH,wEAAiC,mGAAmG;AAC3R,QAAQ,gEAAyB;AACjC,KAAK,EAAE,eAAe,gEAAoB,8BAA8B,gBAAgB,oBAAoB,SAAS,sBAAsB,aAAa,kBAAkB,wBAAwB,qBAAqB,mBAAmB,aAAa,iCAAiC,sBAAsB,sBAAsB,gCAAgC,yBAAyB,yBAAyB,gDAAgD,UAAU,wBAAwB,aAAa,cAAc,kBAAkB,SAAS,0BAA0B,kBAAkB,sGAAsG,yBAAyB,+DAA+D,yBAAyB,iEAAiE,yBAAyB,4QAA4Q,yBAAyB,kRAAkR,yBAAyB,oLAAoL,yBAAyB,wLAAwL,yBAAyB,gLAAgL,yBAAyB,oLAAoL,yBAAyB,8FAA8F,yBAAyB,gGAAgG,yBAAyB,oLAAoL,yBAAyB,wLAAwL,yBAAyB,gGAAgG,yBAAyB,kGAAkG,yBAAyB,0LAA0L,yBAAyB,8LAA8L,yBAAyB,mGAAmG,yBAAyB,qGAAqG,yBAAyB,wBAAwB;AAC7zH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA,0BAA0B,mEAAgB;AAC1C;AACA;AACA;AACA,iBAAiB;AACjB,iCAAiC,qEAAuB;AACxD,+BAA+B,+DAAiB;AAChD;AACA,gCAAgC,gBAAgB,oBAAoB,SAAS,sBAAsB,aAAa,kBAAkB,aAAa,qBAAqB,mBAAmB,aAAa,sBAAsB,sBAAsB,sBAAsB,qBAAqB,yBAAyB,yBAAyB,qCAAqC,UAAU,wBAAwB,aAAa,cAAc,kBAAkB,SAAS,0BAA0B,kBAAkB,gDAAgD,yBAAyB,oDAAoD,yBAAyB,sDAAsD,yBAAyB,mOAAmO,yBAAyB,yOAAyO,yBAAyB,yJAAyJ,yBAAyB,6JAA6J,yBAAyB,qJAAqJ,yBAAyB,yJAAyJ,yBAAyB,iFAAiF,yBAAyB,mFAAmF,yBAAyB,yJAAyJ,yBAAyB,6JAA6J,yBAAyB,mFAAmF,yBAAyB,qFAAqF,yBAAyB,+JAA+J,yBAAyB,mKAAmK,yBAAyB,sFAAsF,yBAAyB,wFAAwF,yBAAyB;AAC7wG,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,EAAE,EAAE,QAAQ,EAAE;AACvE,WAAW,EAqBV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,oBAAoB,UAAU;AAC9B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAWV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,yBAAyB,wFAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAAO;AACxC;AACA;AACA;AACA,gCAAgC,qDAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iDAAiD;AAC/E;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA,kCAAkC,qDAAe;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yCAAyC,kDAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,wBAAwB,oFAAqB;AAC7C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,oFAAqB;AACjD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6DAAK;AACvB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,EAAE;AAC7B,qCAAqC,kEAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,2BAA2B,+DAAwB,CAAC,6DAAsB,GAAG,+DAAwB,CAAC,+DAA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G,OAAO,8DAAuB,EAAE,EAAE,EAAE,GAAG;AACrF,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,6DAAe;AACjC,mBAAmB,sFAAY;AAC/B,SAAS;AACT,kBAAkB,uDAAS;AAC3B,0CAA0C,eAAe;AACzD,SAAS;AACT,kBAAkB,uDAAS;AAC3B,mBAAmB,mEAAe,GAAG,eAAe;AACpD,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EA4EV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAGV;AACD;AACA;AACA,0EAA0E,4CAA4C;AACtH,8BAA8B,+DAAwB,EAAE,iIAAiI;AACzL,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,iBAAiB;AAC/D;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA,sDAAsD,8DAAM;AAC5D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,uDAAuD,8DAAM;AAC7D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,qCAAqC,kDAAY;AACjD;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,6BAA6B,oFAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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EA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,oFAAqB;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,cAAc;AAC9I,0BAA0B,+DAAwB,EAAE,kFAAkF;AACtI,QAAQ,+DAAwB;AAChC,QAAQ,+DAAwB;AAChC,QAAQ,+DAAwB;AAChC,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,qPAAqP,aAAa,kEAA2B,GAAG;AAClT;AACA;AACA,KAAK,8BAA8B,OAAO,sDAAQ,EAAE;AACpD;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,kBAAkB,OAAO,mDAAK,iCAAiC;AAC/D,aAAa,OAAO,mDAAK,EAAE;AAC3B,uBAAuB,OAAO,mDAAK,EAAE;AACrC,oBAAoB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C,uBAAuB,8CAA8C,uBAAuB;AACpS,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,oDAAM;AACxB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,+BAA+B,wFAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kDAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mDAAK;AAC9C,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,oFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gCAAgC,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,eAAe,+DAAwB,a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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE,wBAAwB,SAAS,4DAAY;AACzE,QAAQ,gEAAY;AACpB,QAAQ,iEAAc;AACtB,QAAQ,+EAAY;AACpB,QAAQ,0FAAiB;AACzB,QAAQ,kFAAa;AACrB,QAAQ,mFAAc;AACtB,QAAQ,oFAAiB;AACzB,QAAQ,2FAAkB;AAC1B,QAAQ,4FAAkB,EAAE,EAAE,wBAAwB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oFAAiB,EAAE,EAAE,EAAE,EAAE,EAAE;AACnC,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA,oBAAoB,4DAAY;AAChC,oBAAoB,gEAAY;AAChC,oBAAoB,iEAAc;AAClC,oBAAoB,+EAAY;AAChC,oBAAoB,0FAAiB;AACrC,oBAAoB,kFAAa;AACjC,oBAAoB,mFAAc;AAClC,oBAAoB,oFAAiB;AACrC,oBAAoB,2FAAkB;AACtC,oBAAoB,4FAAkB;AACtC;AACA,oDAAoD,oFAAiB;AACrE;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,gCAAgC,6DAAU;AAC1C;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qDAAe;AAC9C;AACA;AACA;AACA,2BAA2B,qDAAe;AAC1C;AACA;AACA;AACA,wCAAwC,6CAAO;AAC/C;AACA;AACA;AACA,4BAA4B,6CAAO;AACnC;AACA;AACA;AACA;AACA,0CAA0C,kDAAY;AACtD,yCAAyC,kDAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,gBAAgB,mFAAQ;AACxB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY,EAAE,aAAa,EAAE,kBAAkB;AAC9D;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT,yBAAyB,qDAAe;AACxC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6CAA6C,kDAAY;AACzD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,cAAc,mDAAK;AACnB,cAAc,gDAAE;AAChB,mBAAmB,EAAE;AACrB;AACA;AACA,cAAc,mDAAK;AACnB,cAAc,gDAAE;AAChB,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,6BAA6B,2DAAa,kCAAkC,2DAAG;AAC/E,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,2BAA2B,2DAAa,kCAAkC,2DAAG;AAC7E,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,8BAA8B,2DAAa,gCAAgC,2DAAG;AAC9E,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB,iEAAS;AAC3B;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,qDAAqD;AAC/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AA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","file":"heroes-heroes-module.js","sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\n\nconst _c0 = [[[\"caption\"]]];\nconst _c1 = [\"caption\"];\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r52 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r52.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r52.headerText, \" \");\n} }\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r54 = ctx.$implicit;\n    const ctx_r53 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r53.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r53.dataAccessor(data_r54, ctx_r53.name), \" \");\n} }\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, TemplateRef, Input, ContentChild, ElementRef, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, isDevMode, ChangeDetectorRef, Attribute, Optional, Inject, ViewChild, ContentChildren, InjectionToken, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/can-stick.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface for a mixin to provide a directive with a function that checks if the sticky input has\n * been changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @record\n */\nfunction CanStick() { }\nif (false) {\n    /**\n     * Whether sticky positioning should be applied.\n     * @type {?}\n     */\n    CanStick.prototype.sticky;\n    /**\n     * Whether the sticky input has changed since it was last checked.\n     * @type {?}\n     */\n    CanStick.prototype._hasStickyChanged;\n    /**\n     * Whether the sticky value has changed since this was last called.\n     * @return {?}\n     */\n    CanStick.prototype.hasStickyChanged = function () { };\n    /**\n     * Resets the dirty check for cases where the sticky state has been used without checking.\n     * @return {?}\n     */\n    CanStick.prototype.resetStickyChanged = function () { };\n}\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/cell.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base interface for a cell definition. Captures a column's cell template definition.\n * @record\n */\nfunction CellDef() { }\nif (false) {\n    /** @type {?} */\n    CellDef.prototype.template;\n}\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkCellDef.prototype.template;\n}\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkHeaderCellDef.prototype.template;\n}\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkFooterCellDef.prototype.template;\n}\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return ɵCdkColumnDef_BaseFactory(t || CdkColumnDef); };\nCdkColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\nconst ɵCdkColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkColumnDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\n            }]\n    }], null, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkColumnDef.ngAcceptInputType_sticky;\n    /** @type {?} */\n    CdkColumnDef.ngAcceptInputType_stickyEnd;\n    /** @type {?} */\n    CdkColumnDef.prototype._name;\n    /** @type {?} */\n    CdkColumnDef.prototype._stickyEnd;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.cell;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.headerCell;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkColumnDef.prototype.footerCell;\n    /**\n     * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n     * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n     * do not match are replaced by the '-' character.\n     * @type {?}\n     */\n    CdkColumnDef.prototype.cssClassFriendlyName;\n}\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };\nBaseRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n\nif (false) {\n    /**\n     * The columns to be displayed on this row.\n     * @type {?}\n     */\n    BaseRowDef.prototype.columns;\n    /**\n     * Differ used to check if any changes were made to the columns.\n     * @type {?}\n     * @protected\n     */\n    BaseRowDef.prototype._columnsDiffer;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    BaseRowDef.prototype.template;\n    /**\n     * @type {?}\n     * @protected\n     */\n    BaseRowDef.prototype._differs;\n}\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    CdkHeaderRowDef.ngAcceptInputType_sticky;\n}\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkFooterRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    CdkFooterRowDef.ngAcceptInputType_sticky;\n}\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\nif (false) {\n    /**\n     * Function that should return true if this row template should be used for the provided index\n     * and row data. If left undefined, this row will be considered the default row template to use\n     * when no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     * @type {?}\n     */\n    CdkRowDef.prototype.when;\n}\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is false\n * @record\n * @template T\n */\nfunction CdkCellOutletRowContext() { }\nif (false) {\n    /**\n     * Data for the row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.$implicit;\n    /**\n     * Index of the data object in the provided data array.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.index;\n    /**\n     * Length of the number of total rows.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.count;\n    /**\n     * True if this cell is contained in the first row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.first;\n    /**\n     * True if this cell is contained in the last row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.last;\n    /**\n     * True if this cell is contained in a row with an even-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.even;\n    /**\n     * True if this cell is contained in a row with an odd-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletRowContext.prototype.odd;\n}\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n * @record\n * @template T\n */\nfunction CdkCellOutletMultiRowContext() { }\nif (false) {\n    /**\n     * Data for the row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.$implicit;\n    /**\n     * Index of the data object in the provided data array.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.dataIndex;\n    /**\n     * Index location of the rendered row that this cell is located within.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.renderIndex;\n    /**\n     * Length of the number of total rows.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.count;\n    /**\n     * True if this cell is contained in the first row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.first;\n    /**\n     * True if this cell is contained in the last row.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.last;\n    /**\n     * True if this cell is contained in a row with an even-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.even;\n    /**\n     * True if this cell is contained in a row with an odd-numbered index.\n     * @type {?|undefined}\n     */\n    CdkCellOutletMultiRowContext.prototype.odd;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\nif (false) {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     * @type {?}\n     */\n    CdkCellOutlet.mostRecentCellOutlet;\n    /**\n     * The ordered list of cells to render within this outlet's view container\n     * @type {?}\n     */\n    CdkCellOutlet.prototype.cells;\n    /**\n     * The data context to be provided to each cell\n     * @type {?}\n     */\n    CdkCellOutlet.prototype.context;\n    /** @type {?} */\n    CdkCellOutlet.prototype._viewContainer;\n}\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/sticky-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of (/** @type {?} */ (STICKY_DIRECTIONS))) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._isNativeHtmlTable;\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._stickCellCss;\n    /** @type {?} */\n    StickyStyler.prototype.direction;\n    /**\n     * @type {?}\n     * @private\n     */\n    StickyStyler.prototype._isBrowser;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface used to provide an outlet for rows to be inserted into.\n * @record\n */\nfunction RowOutlet() { }\nif (false) {\n    /** @type {?} */\n    RowOutlet.prototype.viewContainer;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    DataRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    DataRowOutlet.prototype.elementRef;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    HeaderRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    HeaderRowOutlet.prototype.elementRef;\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    FooterRowOutlet.prototype.viewContainer;\n    /** @type {?} */\n    FooterRowOutlet.prototype.elementRef;\n}\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Interface used to conveniently type the possible context interfaces for the render row.\n * \\@docs-private\n * @record\n * @template T\n */\nfunction RowContext() { }\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * Set of properties that represents the identity of a single rendered row.\n *\n * When the table needs to determine the list of rows to render, it will do so by iterating through\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\n * is false, there is only one template per data object). For each pair of data object and row\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\n * `RenderRow` is * created. Once the list is complete and all data objects have been itereated\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\n *\n * \\@docs-private\n * @record\n * @template T\n */\nfunction RenderRow() { }\nif (false) {\n    /** @type {?} */\n    RenderRow.prototype.data;\n    /** @type {?} */\n    RenderRow.prototype.dataIndex;\n    /** @type {?} */\n    RenderRow.prototype.rowDef;\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform)); };\nCdkTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(DataRowOutlet, true);\n        ɵngcc0.ɵɵstaticViewQuery(HeaderRowOutlet, true);\n        ɵngcc0.ɵɵstaticViewQuery(FooterRowOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\" }, exportAs: [\"cdkTable\"], ngContentSelectors: _c1, decls: 4, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementContainer(1, 0);\n        ɵngcc0.ɵɵelementContainer(2, 1);\n        ɵngcc0.ɵɵelementContainer(3, 2);\n    } }, directives: [HeaderRowOutlet,\n        DataRowOutlet,\n        FooterRowOutlet], encapsulation: 2 });\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet, { static: true }]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet, { static: true }]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet, { static: true }]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef, { descendants: true }]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef, { descendants: true }]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef, {\n                    descendants: true\n                }]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef, {\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTable.ngAcceptInputType_multiTemplateDataRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._document;\n    /**\n     * Latest data provided by the data source.\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._data;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._onDestroy;\n    /**\n     * List of the rendered rows as identified by their `RenderRow` object.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._renderRows;\n    /**\n     * Subscription that listens for the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._renderChangeSubscription;\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._columnDefsByName;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._rowDefs;\n    /**\n     * Set of all header row definitions that can be used by this table. Populated by the rows\n     * gathered by using `ContentChildren` as well as any custom row definitions added to\n     * `_customHeaderRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._headerRowDefs;\n    /**\n     * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n     * using `ContentChildren` as well as any custom row definitions added to\n     * `_customFooterRowDefs`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._footerRowDefs;\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._dataDiffer;\n    /**\n     * Stores the row definition that does not have a when predicate.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._defaultRowDef;\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customColumnDefs;\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customRowDefs;\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customHeaderRowDefs;\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._customFooterRowDefs;\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._headerRowDefChanged;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._footerRowDefChanged;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._cachedRenderRowsMap;\n    /**\n     * Whether the table is applied to a native `<table>`.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._isNativeHtmlTable;\n    /**\n     * Utility class that is responsible for applying the appropriate sticky positioning styles to\n     * the table's rows and cells.\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._stickyStyler;\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype.stickyCssClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._trackByFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._dataSource;\n    /** @type {?} */\n    CdkTable.prototype._multiTemplateDataRows;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTable.prototype.viewChange;\n    /** @type {?} */\n    CdkTable.prototype._rowOutlet;\n    /** @type {?} */\n    CdkTable.prototype._headerRowOutlet;\n    /** @type {?} */\n    CdkTable.prototype._footerRowOutlet;\n    /**\n     * The column definitions provided by the user that contain what the header, data, and footer\n     * cells should render for each column.\n     * @type {?}\n     */\n    CdkTable.prototype._contentColumnDefs;\n    /**\n     * Set of data row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentRowDefs;\n    /**\n     * Set of header row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentHeaderRowDefs;\n    /**\n     * Set of footer row definitions that were provided to the table as content children.\n     * @type {?}\n     */\n    CdkTable.prototype._contentFooterRowDefs;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._differs;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTable.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTable.prototype._platform;\n}\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/text-column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Configurable options for `CdkTextColumn`.\n * @record\n * @template T\n */\nfunction TextColumnOptions() { }\nif (false) {\n    /**\n     * Default function that provides the header text based on the column name if a header\n     * text is not provided.\n     * @type {?|undefined}\n     */\n    TextColumnOptions.prototype.defaultHeaderTextTransform;\n    /**\n     * Default data accessor to use if one is not provided.\n     * @type {?|undefined}\n     */\n    TextColumnOptions.prototype.defaultDataAccessor;\n}\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} _table\n     * @param {?} _options\n     */\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        /** @type {?} */\n        const name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\nCdkTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkColumnDef, true);\n        ɵngcc0.ɵɵstaticViewQuery(CdkCellDef, true);\n        ɵngcc0.ɵɵstaticViewQuery(CdkHeaderCellDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [CdkColumnDef,\n        CdkHeaderCellDef,\n        CdkCellDef,\n        CdkHeaderCell,\n        CdkCell], encapsulation: 2 });\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: CdkTable, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [TEXT_COLUMN_OPTIONS]\n            }] }]; }, { justify: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], headerText: [{\n            type: Input\n        }], dataAccessor: [{\n            type: Input\n        }], columnDef: [{\n            type: ViewChild,\n            args: [CdkColumnDef, { static: true }]\n        }], cell: [{\n            type: ViewChild,\n            args: [CdkCellDef, { static: true }]\n        }], headerCell: [{\n            type: ViewChild,\n            args: [CdkHeaderCellDef, { static: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTextColumn.prototype._name;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name with its first letter capitalized.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.headerText;\n    /**\n     * Accessor function to retrieve the data rendered for each cell. If this\n     * property is not set, the data cells will render the value found in the data's property matching\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\n     * value defined by the data's `id` property.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.dataAccessor;\n    /**\n     * Alignment of the cell values.\n     * @type {?}\n     */\n    CdkTextColumn.prototype.justify;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.columnDef;\n    /**\n     * The column cell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.cell;\n    /**\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkTextColumn.prototype.headerCell;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextColumn.prototype._table;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextColumn.prototype._options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/table-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn], exports: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/table/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, STICKY_DIRECTIONS, StickyStyler, TEXT_COLUMN_OPTIONS, mixinHasStickyInput };\n\n//# sourceMappingURL=table.js.map","import { Component, Directive, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, ElementRef, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { DtIconModule } from '@dynatrace/barista-components/icon';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport { _toggleCssClass, DtViewportResizer } from '@dynatrace/barista-components/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/empty-state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The min-width from which empty state items are displayed horizontally.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@dynatrace/barista-components/icon';\nimport * as ɵngcc2 from '@dynatrace/barista-components/core';\nimport * as ɵngcc3 from '@angular/cdk/platform';\n\nconst _c0 = [[[\"dt-empty-state-item-img\"], [\"\", \"dt-empty-state-item-img\", \"\"], [\"\", \"dtEmptyStateItemImg\", \"\"]], [[\"dt-empty-state-item-title\"], [\"\", \"dt-empty-state-item-title\", \"\"], [\"\", \"dtEmptyStateItemTitle\", \"\"]], \"*\", [[\"dt-empty-state-footer-actions\"]]];\nconst _c1 = [\"dt-empty-state-item-img, [dt-empty-state-item-img], [dtEmptyStateItemImg]\", \"dt-empty-state-item-title, [dt-empty-state-item-title], [dtEmptyStateItemTitle]\", \"*\", \"dt-empty-state-footer-actions\"];\nconst _c2 = [\"*\"];\nconst ITEMS_HORIZONTAL_BREAKPOINT = 540;\n/**\n * The min-width from which the empty state items are aligned next to each other.\n * @type {?}\n */\nconst LAYOUT_HORIZONTAL_BREAKPOINT = 760;\n/**\n * An empty state item. An empty state card may contain one or more such items.\n *\n * \\@example\n *   <dt-empty-state-item>\n *     <dt-empty-state-item-img>\n *      <img src=\"asset.png\" alt=\"asset\"/>\n *     </dt-empty-state-item-img>\n *     <dt-empty-state-item-title>optional heading</dt-empty-state-item-title>\n *     some item description\n *   </dt-empty-state-item>\n */\nclass DtEmptyStateItem {\n}\nDtEmptyStateItem.ɵfac = function DtEmptyStateItem_Factory(t) { return new (t || DtEmptyStateItem)(); };\nDtEmptyStateItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtEmptyStateItem, selectors: [[\"dt-empty-state-item\"]], hostAttrs: [1, \"dt-empty-state-item\"], ngContentSelectors: _c1, decls: 10, vars: 0, consts: [[1, \"dt-empty-state-item-icon-area\"], [\"name\", \"play\"], [1, \"dt-empty-state-item-content-area\"], [1, \"dt-empty-state-item-image-area\"], [1, \"dt-empty-state-item-text-area\"], [1, \"dt-empty-state-footer-actions\"]], template: function DtEmptyStateItem_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"dt-icon\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵprojection(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n        ɵngcc0.ɵɵprojection(6, 1);\n        ɵngcc0.ɵɵprojection(7, 2);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 5);\n        ɵngcc0.ɵɵprojection(9, 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } }, directives: [ɵngcc1.DtIcon], styles: [\"[_nghost-%COMP%]{display:block}.dt-empty-state-item-image-area[_ngcontent-%COMP%]{margin-left:auto;margin-right:auto;margin-bottom:16px;min-width:120px;max-width:180px}.dt-empty-state-item-text-area[_ngcontent-%COMP%]{max-width:580px}.dt-empty-state-item-icon-area[_ngcontent-%COMP%]{display:none;height:60px;align-items:center;justify-content:center}.dt-empty-state-item-icon-area[_ngcontent-%COMP%]   .dt-icon[_ngcontent-%COMP%]{width:28px;height:28px;margin:auto;transform:rotate(90deg)}.dt-empty-state-item-icon-area[_ngcontent-%COMP%]   .dt-icon[_ngcontent-%COMP%]     svg{fill:#ccc}  .dt-empty-state-item-title{display:block;margin-bottom:16px;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:18px;line-height:1.6}  .dt-empty-state-item-img{display:block;width:100%;text-align:center}  .dt-empty-state-item-img img,   .dt-empty-state-item-img svg{max-width:100%}  .dt-empty-state-footer-actions{margin-top:16px}  .dt-empty-state-footer-actions>.dt-button+.dt-button{margin-left:8px}.dt-empty-state-items-horizontal[_nghost-%COMP%]   .dt-empty-state-item-content-area[_ngcontent-%COMP%], .dt-empty-state-items-horizontal   [_nghost-%COMP%]   .dt-empty-state-item-content-area[_ngcontent-%COMP%]{display:flex}.dt-empty-state-items-horizontal[_nghost-%COMP%]   .dt-empty-state-item-image-area[_ngcontent-%COMP%], .dt-empty-state-items-horizontal   [_nghost-%COMP%]   .dt-empty-state-item-image-area[_ngcontent-%COMP%]{margin-right:16px;margin-left:0;margin-bottom:0}.dt-empty-state-layout-horizontal[_nghost-%COMP%], .dt-empty-state-layout-horizontal   [_nghost-%COMP%]{display:flex}.dt-empty-state-layout-horizontal[_nghost-%COMP%]   .dt-empty-state-item-icon-area[_ngcontent-%COMP%], .dt-empty-state-layout-horizontal   [_nghost-%COMP%]   .dt-empty-state-item-icon-area[_ngcontent-%COMP%]{min-width:60px;flex:0 0 60px;height:100%}.dt-empty-state-layout-horizontal[_nghost-%COMP%]   .dt-empty-state-item-icon-area[_ngcontent-%COMP%]   .dt-icon[_ngcontent-%COMP%], .dt-empty-state-layout-horizontal   [_nghost-%COMP%]   .dt-empty-state-item-icon-area[_ngcontent-%COMP%]   .dt-icon[_ngcontent-%COMP%]{transform:none}\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtEmptyStateItem, [{\n        type: Component,\n        args: [{\n                selector: 'dt-empty-state-item',\n                template: \"<div class=\\\"dt-empty-state-item-icon-area\\\">\\n  <dt-icon name=\\\"play\\\"></dt-icon>\\n</div>\\n\\n<div class=\\\"dt-empty-state-item-content-area\\\">\\n  <div class=\\\"dt-empty-state-item-image-area\\\">\\n    <ng-content\\n      select=\\\"dt-empty-state-item-img, [dt-empty-state-item-img], [dtEmptyStateItemImg]\\\"\\n    ></ng-content>\\n  </div>\\n\\n  <div class=\\\"dt-empty-state-item-text-area\\\">\\n    <ng-content\\n      select=\\\"dt-empty-state-item-title, [dt-empty-state-item-title], [dtEmptyStateItemTitle]\\\"\\n    ></ng-content>\\n\\n    <ng-content></ng-content>\\n\\n    <div class=\\\"dt-empty-state-footer-actions\\\">\\n      <ng-content select=\\\"dt-empty-state-footer-actions\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                host: {\n                    class: 'dt-empty-state-item'\n                },\n                styles: [\":host{display:block}.dt-empty-state-item-image-area{margin-left:auto;margin-right:auto;margin-bottom:16px;min-width:120px;max-width:180px}.dt-empty-state-item-text-area{max-width:580px}.dt-empty-state-item-icon-area{display:none;height:60px;align-items:center;justify-content:center}.dt-empty-state-item-icon-area .dt-icon{width:28px;height:28px;margin:auto;transform:rotate(90deg)}.dt-empty-state-item-icon-area .dt-icon ::ng-deep svg{fill:#ccc}::ng-deep .dt-empty-state-item-title{display:block;margin-bottom:16px;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:18px;line-height:1.6}::ng-deep .dt-empty-state-item-img{display:block;width:100%;text-align:center}::ng-deep .dt-empty-state-item-img img,::ng-deep .dt-empty-state-item-img svg{max-width:100%}::ng-deep .dt-empty-state-footer-actions{margin-top:16px}::ng-deep .dt-empty-state-footer-actions>.dt-button+.dt-button{margin-left:8px}:host-context(.dt-empty-state-items-horizontal) .dt-empty-state-item-content-area{display:flex}:host-context(.dt-empty-state-items-horizontal) .dt-empty-state-item-image-area{margin-right:16px;margin-left:0;margin-bottom:0}:host-context(.dt-empty-state-layout-horizontal){display:flex}:host-context(.dt-empty-state-layout-horizontal) .dt-empty-state-item-icon-area{min-width:60px;flex:0 0 60px;height:100%}:host-context(.dt-empty-state-layout-horizontal) .dt-empty-state-item-icon-area .dt-icon{transform:none}\"]\n            }]\n    }], null, null); })();\n/**\n * The image of an empty state card item.\n *\n * \\@example\n *   <dt-empty-state-item-img>\n *     <img src=\"asset.png\" alt=\"asset\"/>\n *   </dt-empty-state-item-img>\n */\nclass DtEmptyStateItemImage {\n}\nDtEmptyStateItemImage.ɵfac = function DtEmptyStateItemImage_Factory(t) { return new (t || DtEmptyStateItemImage)(); };\nDtEmptyStateItemImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtEmptyStateItemImage, selectors: [[\"dt-empty-state-item-img\"], [\"\", \"dt-empty-state-item-img\", \"\"], [\"\", \"dtEmptyStateItemImg\", \"\"]], hostAttrs: [\"aria-hidden\", \"true\", 1, \"dt-empty-state-item-img\"], exportAs: [\"dtEmptyStateItemImg\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtEmptyStateItemImage, [{\n        type: Directive,\n        args: [{\n                selector: 'dt-empty-state-item-img, [dt-empty-state-item-img], [dtEmptyStateItemImg]',\n                exportAs: 'dtEmptyStateItemImg',\n                host: {\n                    class: 'dt-empty-state-item-img',\n                    'aria-hidden': 'true'\n                }\n            }]\n    }], null, null); })();\n/**\n * The (optional) heading of an empty state card item.\n *\n * \\@example <dt-empty-state-item-title>optional heading</dt-empty-state-item-title>\n */\nclass DtEmptyStateItemTitle {\n}\nDtEmptyStateItemTitle.ɵfac = function DtEmptyStateItemTitle_Factory(t) { return new (t || DtEmptyStateItemTitle)(); };\nDtEmptyStateItemTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtEmptyStateItemTitle, selectors: [[\"dt-empty-state-item-title\"], [\"\", \"dt-empty-state-item-title\", \"\"], [\"\", \"dtEmptyStateItemTitle\", \"\"]], hostAttrs: [\"role\", \"heading\", 1, \"dt-empty-state-item-title\"], exportAs: [\"dtEmptyStateItemTitle\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtEmptyStateItemTitle, [{\n        type: Directive,\n        args: [{\n                selector: 'dt-empty-state-item-title, [dt-empty-state-item-title], [dtEmptyStateItemTitle]',\n                exportAs: 'dtEmptyStateItemTitle',\n                host: {\n                    class: 'dt-empty-state-item-title',\n                    role: 'heading'\n                }\n            }]\n    }], null, null); })();\n/**\n * The action button/s that is/are placed below the image and text of the item\n * (must be a cta styled primary button).\n *\n * \\@example\n *   <dt-empty-state-footer-actions>\n *     <a dt-button color=\"cta\" i18n>View release</a>\n *     <a dt-button color=\"cta\" i18n>More info</a>\n *   </dt-empty-state-footer-actions>\n */\nclass DtEmptyStateFooterActions {\n}\nDtEmptyStateFooterActions.ɵfac = function DtEmptyStateFooterActions_Factory(t) { return new (t || DtEmptyStateFooterActions)(); };\nDtEmptyStateFooterActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtEmptyStateFooterActions, selectors: [[\"dt-empty-state-footer-actions\"]], hostAttrs: [1, \"dt-empty-state-footer-actions\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtEmptyStateFooterActions, [{\n        type: Directive,\n        args: [{\n                selector: 'dt-empty-state-footer-actions',\n                host: {\n                    class: 'dt-empty-state-footer-actions'\n                }\n            }]\n    }], null, null); })();\n/**\n * Placeholder for content that does not yet exist. It consists of one or more\n * items with each item containing an image, an optional header and a\n * short description text. It can be used within a `<dt-card>` or\n * an `<dt-table>`.\n */\nclass DtEmptyState {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _viewportResizer\n     * @param {?} _platform\n     */\n    constructor(_changeDetectorRef, _elementRef, _viewportResizer, _platform) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._viewportResizer = _viewportResizer;\n        this._platform = _platform;\n        this._destroy$ = new Subject();\n        /**\n         * \\@internal\n         * Whether empty state items should have a horizontal layout\n         * (i.e. image and text next to each other).\n         */\n        this._isItemLayoutHorizontal = false;\n        /**\n         * \\@internal\n         * Whether empty state items should be aligned next to each other.\n         */\n        this._isLayoutHorizontal = false;\n        /**\n         * \\@internal The visibility state that is used to trigger the animation steps\n         */\n        this._visibility = 'visible';\n    }\n    /**\n     * \\@internal set the visible state to trigger a fade animation\n     * @param {?} visibility\n     * @return {?}\n     */\n    set _visible(visibility) {\n        this._visibility = visibility ? 'visible' : 'hidden';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._items.changes.pipe(takeUntil(this._destroy$)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Check if the browser supports the resizeObserver.\n            if ('ResizeObserver' in window) {\n                this._containerSizeObserver = new window.ResizeObserver((/**\n                 * @param {?} entries\n                 * @return {?}\n                 */\n                (entries) => {\n                    if (entries && entries[0]) {\n                        // We need to wrap the call to the layout update into an additional\n                        // requestAnimationFrame, because the resize observer would trow a\n                        // javascript error when it is not able to process all entries within\n                        // a single animation frame.\n                        // From the specification:\n                        // > This error means that ResizeObserver was not able to deliver all\n                        // > observations within a single animation frame. It is benign (your\n                        // > site will not break). - Aleksandar Totic\n                        // https://stackoverflow.com/a/50387233\n                        requestAnimationFrame((/**\n                         * @return {?}\n                         */\n                        () => {\n                            this._updateLayoutForSize(entries[0].contentRect.width);\n                        }));\n                    }\n                }));\n                this._containerSizeObserver.observe(this._elementRef.nativeElement);\n            }\n            else {\n                this._viewportResizer\n                    .change()\n                    .pipe(startWith(null), takeUntil(this._destroy$))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._updateLayout();\n                }));\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy$.next();\n        this._destroy$.complete();\n        if (this._containerSizeObserver) {\n            this._containerSizeObserver.disconnect();\n        }\n    }\n    /**\n     * Function that updates the layout based on the passed component width\n     * @private\n     * @param {?} componentWidth\n     * @return {?}\n     */\n    _updateLayoutForSize(componentWidth) {\n        var _a;\n        /** @type {?} */\n        const itemLayoutHorizontal = componentWidth > ITEMS_HORIZONTAL_BREAKPOINT;\n        /** @type {?} */\n        const layoutHorizontal = ((_a = this._items) === null || _a === void 0 ? void 0 : _a.length) > 1 && componentWidth > LAYOUT_HORIZONTAL_BREAKPOINT;\n        _toggleCssClass(layoutHorizontal, this._elementRef.nativeElement, 'dt-empty-state-layout-horizontal');\n        _toggleCssClass(itemLayoutHorizontal && !layoutHorizontal, this._elementRef.nativeElement, 'dt-empty-state-items-horizontal');\n    }\n    /**\n     * \\@internal\n     * Updates the layout according to the width of the container (horizontal or vertical)\n     * @deprecated will be removed once the viewportResizer is removed from the constructor.\n     * \\@breaking-change Remove with version 8.0.0\n     * @return {?}\n     */\n    _updateLayout() {\n        if (this._platform.isBrowser) {\n            /** @type {?} */\n            const componentWidth = this._elementRef.nativeElement.getBoundingClientRect()\n                .width;\n            this._updateLayoutForSize(componentWidth);\n        }\n    }\n}\nDtEmptyState.ɵfac = function DtEmptyState_Factory(t) { return new (t || DtEmptyState)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DtViewportResizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform)); };\nDtEmptyState.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtEmptyState, selectors: [[\"dt-empty-state\"]], contentQueries: function DtEmptyState_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DtEmptyStateItem, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._items = _t);\n    } }, hostAttrs: [1, \"dt-empty-state\"], hostVars: 1, hostBindings: function DtEmptyState_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@fadeIn\", ctx._visibility);\n    } }, exportAs: [\"dtEmptyState\"], ngContentSelectors: _c2, decls: 1, vars: 0, template: function DtEmptyState_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\"[_nghost-%COMP%]{display:flex;flex-flow:column;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:14px;line-height:1.6}.dt-empty-state-layout-horizontal[_nghost-%COMP%]{flex-flow:row}  .dt-empty-state-item+.dt-empty-state-item .dt-empty-state-item-icon-area{display:flex}\"], data: { animation: [\n            trigger('fadeIn', [\n                state('hidden', style({ opacity: 0 })),\n                state('visible', style({ opacity: 1 })),\n                transition(':enter', [\n                    style({ opacity: 0 }),\n                    animate('500ms', style({ opacity: 1 })),\n                ]),\n            ]),\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nDtEmptyState.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: DtViewportResizer },\n    { type: Platform }\n];\nDtEmptyState.propDecorators = {\n    _items: [{ type: ContentChildren, args: [DtEmptyStateItem,] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtEmptyState, [{\n        type: Component,\n        args: [{\n                selector: 'dt-empty-state',\n                exportAs: 'dtEmptyState',\n                template: '<ng-content></ng-content>',\n                host: {\n                    class: 'dt-empty-state',\n                    '[@fadeIn]': '_visibility'\n                },\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                animations: [\n                    trigger('fadeIn', [\n                        state('hidden', style({ opacity: 0 })),\n                        state('visible', style({ opacity: 1 })),\n                        transition(':enter', [\n                            style({ opacity: 0 }),\n                            animate('500ms', style({ opacity: 1 })),\n                        ]),\n                    ]),\n                ],\n                styles: [\":host{display:flex;flex-flow:column;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:14px;line-height:1.6}:host.dt-empty-state-layout-horizontal{flex-flow:row}::ng-deep .dt-empty-state-item+.dt-empty-state-item .dt-empty-state-item-icon-area{display:flex}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.DtViewportResizer }, { type: ɵngcc3.Platform }]; }, { _items: [{\n            type: ContentChildren,\n            args: [DtEmptyStateItem]\n        }] }); })();\nif (false) {\n    /**\n     * \\@internal Empty state items (1..n)\n     * @type {?}\n     */\n    DtEmptyState.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtEmptyState.prototype._destroy$;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtEmptyState.prototype._containerSizeObserver;\n    /**\n     * \\@internal\n     * Whether empty state items should have a horizontal layout\n     * (i.e. image and text next to each other).\n     * @type {?}\n     */\n    DtEmptyState.prototype._isItemLayoutHorizontal;\n    /**\n     * \\@internal\n     * Whether empty state items should be aligned next to each other.\n     * @type {?}\n     */\n    DtEmptyState.prototype._isLayoutHorizontal;\n    /**\n     * \\@internal The visibility state that is used to trigger the animation steps\n     * @type {?}\n     */\n    DtEmptyState.prototype._visibility;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtEmptyState.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtEmptyState.prototype._elementRef;\n    /**\n     * @deprecated Remove the viewportResizer from the constructor as it is no longer needed.\n     * \\@breaking-change Remove the viewportResizer in version 8.0.0\n     * @type {?}\n     * @private\n     */\n    DtEmptyState.prototype._viewportResizer;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtEmptyState.prototype._platform;\n}\n/**\n * Empty state base class that needs to be implemented by every custom\n * empty state that is used inside the table. It provides a proxy to the updateLayout\n * function of the empty state that will be called by the table.\n *\n * @deprecated Remove this class, as it is no longer needed to proxy the update\n * layout call, when the layout updates are triggered by the resize observer.\n * \\@breaking-change Remove the viewportResizer in version 8.0.0\n */\nclass DtCustomEmptyStateBase {\n    /**\n     * \\@internal\n     * Proxies the update layout function of the empty state\n     * to react to layout changes.\n     * @return {?}\n     */\n    _updateLayout() {\n        var _a;\n        // If we have an empty state proxy the updateLayout function\n        (_a = this._emptyState) === null || _a === void 0 ? void 0 : _a._updateLayout();\n    }\n}\nDtCustomEmptyStateBase.ɵfac = function DtCustomEmptyStateBase_Factory(t) { return new (t || DtCustomEmptyStateBase)(); };\nDtCustomEmptyStateBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtCustomEmptyStateBase, viewQuery: function DtCustomEmptyStateBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DtEmptyState, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._emptyState = _t.first);\n    } } });\nDtCustomEmptyStateBase.propDecorators = {\n    _emptyState: [{ type: ViewChild, args: [DtEmptyState,] }]\n};\n\nif (false) {\n    /**\n     * \\@internal Finds the empty state inside the component\n     * @type {?}\n     */\n    DtCustomEmptyStateBase.prototype._emptyState;\n}\n/**\n * Marks a custom empty state component to be used within, for example, `<dt-table>`.\n * The custom empty state must both extend and provide itself as a DtEmptyState.\n */\nclass DtCustomEmptyState {\n}\nDtCustomEmptyState.ɵfac = function DtCustomEmptyState_Factory(t) { return new (t || DtCustomEmptyState)(); };\nDtCustomEmptyState.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtCustomEmptyState, selectors: [[\"\", \"dtCustomEmptyState\", \"\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtCustomEmptyState, [{\n        type: Directive,\n        args: [{\n                selector: '[dtCustomEmptyState]'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/empty-state-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_STATE_DIRECTIVES = [\n    DtEmptyState,\n    DtEmptyStateItem,\n    DtEmptyStateItemImage,\n    DtEmptyStateItemTitle,\n    DtEmptyStateFooterActions,\n    DtCustomEmptyState,\n];\nclass DtEmptyStateModule {\n}\nDtEmptyStateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DtEmptyStateModule });\nDtEmptyStateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DtEmptyStateModule_Factory(t) { return new (t || DtEmptyStateModule)(); }, imports: [[DtIconModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DtEmptyStateModule, { declarations: function () { return [DtEmptyState,\n        DtEmptyStateItem,\n        DtEmptyStateItemImage,\n        DtEmptyStateItemTitle,\n        DtEmptyStateFooterActions,\n        DtCustomEmptyState]; }, imports: function () { return [DtIconModule]; }, exports: function () { return [DtEmptyState,\n        DtEmptyStateItem,\n        DtEmptyStateItemImage,\n        DtEmptyStateItemTitle,\n        DtEmptyStateFooterActions,\n        DtCustomEmptyState]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtEmptyStateModule, [{\n        type: NgModule,\n        args: [{\n                exports: [EMPTY_STATE_DIRECTIVES],\n                declarations: [EMPTY_STATE_DIRECTIVES],\n                imports: [DtIconModule]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: dynatrace-barista-components-empty-state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DtCustomEmptyState, DtCustomEmptyStateBase, DtEmptyState, DtEmptyStateFooterActions, DtEmptyStateItem, DtEmptyStateItemImage, DtEmptyStateItemTitle, DtEmptyStateModule };\n\n//# sourceMappingURL=dynatrace-barista-components-empty-state.js.map","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Pipe, Inject, LOCALE_ID, NgModule } from '@angular/core';\nimport { isEmpty, isNumber, DtLoggerFactory } from '@dynatrace/barista-components/core';\nimport { formatNumber, formatDate, CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/formatted-value.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright 2020 Dynatrace LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction SourceData() { }\nif (false) {\n    /** @type {?} */\n    SourceData.prototype.input;\n    /** @type {?} */\n    SourceData.prototype.unit;\n}\n/**\n * @record\n */\nfunction FormattedData() { }\nif (false) {\n    /** @type {?|undefined} */\n    FormattedData.prototype.transformedValue;\n    /** @type {?|undefined} */\n    FormattedData.prototype.displayValue;\n    /** @type {?|undefined} */\n    FormattedData.prototype.displayUnit;\n    /** @type {?|undefined} */\n    FormattedData.prototype.displayRateUnit;\n    /** @type {?|undefined} */\n    FormattedData.prototype.displayWhiteSpace;\n}\n/** @type {?} */\nconst NO_DATA = '-';\n/**\n * Class used in formatting functions and pipes\n */\nclass DtFormattedValue {\n    /**\n     * @param {?} _sourceData\n     * @param {?} _formattedData\n     */\n    constructor(_sourceData, _formattedData) {\n        this._sourceData = _sourceData;\n        this._formattedData = _formattedData;\n    }\n    /**\n     * Source data containing value, unit, rate unit\n     * @return {?}\n     */\n    get sourceData() {\n        return this._sourceData;\n    }\n    /**\n     * Display data containing the transformed values, units and rate units\n     * @return {?}\n     */\n    get displayData() {\n        return this._formattedData;\n    }\n    /**\n     * @return {?} the string as a combination of the display data\n     */\n    toString() {\n        if (this._formattedData.displayValue === undefined) {\n            return NO_DATA;\n        }\n        /** @type {?} */\n        let text = this._formattedData.displayValue;\n        if (this._formattedData.displayUnit !== undefined) {\n            text = `${text} ${this._formattedData.displayUnit}`;\n        }\n        if (this._formattedData.displayRateUnit !== undefined) {\n            text =\n                this._formattedData.displayUnit !== undefined ||\n                    this._formattedData.displayWhiteSpace === false\n                    ? `${text}/${this._formattedData.displayRateUnit}`\n                    : `${text} /${this._formattedData.displayRateUnit}`;\n        }\n        return text;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DtFormattedValue.prototype._sourceData;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtFormattedValue.prototype._formattedData;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/unit.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright 2020 Dynatrace LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** @enum {string} */\nconst DtUnit = {\n    PERCENT: \"%\",\n    COUNT: \"count\",\n    BYTES: \"B\",\n    KILO_BYTES: \"kB\",\n    MEGA_BYTES: \"MB\",\n    GIGA_BYTES: \"GB\",\n    TERA_BYTES: \"TB\",\n    PETA_BYTES: \"PB\",\n    BITS: \"bit\",\n    KILO_BITS: \"kbit\",\n    MEGA_BITS: \"Mbit\",\n    GIGA_BITS: \"Gbit\",\n    TERA_BITS: \"Tbit\",\n    PETA_BITS: \"Pbit\",\n};\n/** @enum {string} */\nconst DtRateUnit = {\n    PER_NANOSECOND: \"ns\",\n    PER_MILLISECOND: \"ms\",\n    PER_SECOND: \"s\",\n    PER_MINUTE: \"min\",\n    PER_HOUR: \"h\",\n    PER_DAY: \"d\",\n    PER_WEEK: \"w\",\n    PER_MONTH: \"mo\",\n    PER_YEAR: \"y\",\n};\n/** @enum {string} */\nconst DtTimeUnit = {\n    YEAR: \"y\",\n    MONTH: \"mo\",\n    DAY: \"d\",\n    HOUR: \"h\",\n    MINUTE: \"min\",\n    SECOND: \"s\",\n    MILLISECOND: \"ms\",\n    MICROSECOND: \"\\u00B5s\",\n    NANOSECOND: \"ns\",\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/time-deprecated/time-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// tslint:disable: no-magic-numbers\n// Factorials needed in converting milliseconds to other time units\n/** @type {?} */\nconst CONVERSION_FACTORS_TO_MS = new Map([\n    [DtTimeUnit.YEAR, 12 * 30.4 * 24 * 60 * 60 * 1000],\n    [DtTimeUnit.MONTH, 30.4 * 24 * 60 * 60 * 1000],\n    [DtTimeUnit.DAY, 24 * 60 * 60 * 1000],\n    [DtTimeUnit.HOUR, 60 * 60 * 1000],\n    [DtTimeUnit.MINUTE, 60 * 1000],\n    [DtTimeUnit.SECOND, 1000],\n    [DtTimeUnit.MILLISECOND, 1],\n    [DtTimeUnit.MICROSECOND, 0.001],\n    [DtTimeUnit.NANOSECOND, 0.000001],\n]);\n/** @type {?} */\nconst CONVERSIONUNITS = 2;\n/** @breaking-change - Will be removed with version 7.0.0 */\n/** @deprecated Please use dtDuration instead */\n/**\n * @param {?} time - numeric time value to be converted to\n * amount of time from years to nanoseconds\n * @param {?=} inputUnit\n * @param {?=} toUnit\n * @return {?}\n */\nfunction formatTime(time, inputUnit = DtTimeUnit.MILLISECOND, toUnit) {\n    /** @type {?} */\n    const inputData = {\n        input: time,\n        unit: inputUnit,\n    };\n    /** @type {?} */\n    let formattedData;\n    if (time <= 0) {\n        return new DtFormattedValue(inputData, (formattedData = {\n            transformedValue: inputData.input,\n            displayValue: '0',\n            displayUnit: inputUnit,\n        }));\n    }\n    else {\n        // Calculates the amount of each timeunit and adds the value and unit into a resultstring\n        if (CONVERSION_FACTORS_TO_MS.get(inputUnit) === undefined) {\n            return NO_DATA;\n        }\n        /** @type {?} */\n        const result = buildResultFromTime(time, inputUnit, toUnit);\n        if (result === undefined) {\n            return NO_DATA;\n        }\n        /** @type {?} */\n        let resultString = '';\n        result.forEach((/**\n         * @param {?} value\n         * @param {?} key\n         * @return {?}\n         */\n        (value, key) => {\n            resultString = `${resultString}${value}${key} `;\n        }));\n        resultString = resultString.trim();\n        formattedData = {\n            transformedValue: inputData.input,\n            displayValue: resultString,\n            displayUnit: '',\n        };\n        return new DtFormattedValue(inputData, formattedData);\n    }\n}\n// Converts input to milliseconds\n/**\n * @param {?} time\n * @param {?} inputUnit\n * @param {?} toUnit\n * @return {?}\n */\nfunction buildResultFromTime(time, inputUnit, toUnit) {\n    if (!CONVERSION_FACTORS_TO_MS.has(inputUnit)) {\n        return;\n    }\n    /** @type {?} */\n    let rest = time * (/** @type {?} */ (CONVERSION_FACTORS_TO_MS.get(inputUnit)));\n    /** @type {?} */\n    const result = new Map();\n    /** @type {?} */\n    let counter = 0;\n    /** @type {?} */\n    let canConvert = false;\n    /** @type {?} */\n    const conversionFactorKeys = Array.from(CONVERSION_FACTORS_TO_MS.keys());\n    if (toUnit !== undefined &&\n        conversionFactorKeys.indexOf(toUnit) >\n            conversionFactorKeys.indexOf(inputUnit)) {\n        canConvert = true;\n    }\n    for (const key of conversionFactorKeys) {\n        /** @type {?} */\n        const factor = (/** @type {?} */ (CONVERSION_FACTORS_TO_MS.get(key)));\n        /** @type {?} */\n        const amount = Math.trunc(rest / factor);\n        if (canConvert &&\n            conversionFactorKeys.indexOf((/** @type {?} */ (toUnit))) >= conversionFactorKeys.indexOf(key)) {\n            counter = CONVERSIONUNITS;\n            if (amount > 0) {\n                result.set(key, amount);\n            }\n        }\n        else if (counter < CONVERSIONUNITS) {\n            if (amount > 0) {\n                if (counter < CONVERSIONUNITS) {\n                    result.set(key, amount);\n                }\n                counter++;\n                // Only next two units will be displayed. Examples: `1y 1mo 1d` instead of `1y 1mo 1d 1h 1min...`\n            }\n            else if (counter > 0) {\n                counter++;\n            }\n        }\n        rest = rest - amount * factor;\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/time-deprecated/time.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @breaking-change - Will be removed with version 7.0.0 */\n/** @deprecated Please use dtDuration instead */\n/**\n * Pipe used to convert milliseconds to amount of time from years to nanoseconds\n */\nclass DtTime {\n    /**\n     * @param {?} input - The timevalue to be formatted to amount of time from years to nanoseconds\n     * @param {?=} inputUnit\n     * @param {?=} toUnit\n     * @return {?}\n     */\n    // tslint:disable: no-any\n    transform(input, inputUnit = DtTimeUnit.MILLISECOND, toUnit) {\n        if (isEmpty(input)) {\n            return NO_DATA;\n        }\n        return isNumber(input)\n            ? formatTime(coerceNumberProperty(input), inputUnit, toUnit)\n            : NO_DATA;\n    }\n}\nDtTime.ɵfac = function DtTime_Factory(t) { return new (t || DtTime)(); };\nDtTime.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtTime\", type: DtTime, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTime, [{\n        type: Pipe,\n        args: [{\n                name: 'dtTime'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/number-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// tslint:disable:no-magic-numbers\n/** @type {?} */\nconst KILO_MULTIPLIER = 1000;\n/** @type {?} */\nconst KIBI_MULTIPLIER = 1024;\n/**\n * @record\n */\nfunction DtNumberFormatOptions() { }\nif (false) {\n    /** @type {?} */\n    DtNumberFormatOptions.prototype.inputUnit;\n    /** @type {?|undefined} */\n    DtNumberFormatOptions.prototype.outputUnit;\n    /** @type {?} */\n    DtNumberFormatOptions.prototype.factor;\n}\n/** @type {?} */\nconst ABBREVIATION_LEVELS = [\n    { multiplier: Math.pow(KILO_MULTIPLIER, 3), postfix: 'bil' },\n    { multiplier: Math.pow(KILO_MULTIPLIER, 2), postfix: 'mil' },\n    { multiplier: KILO_MULTIPLIER, postfix: 'k' },\n];\n/** @type {?} */\nconst DEFAULT_PRECISION_FOR_MIN_VALUE = 3;\n/**\n * Helper function that adjusts a given number by abbreviating or adjusting the precision\n * Returns adjusted number as a string\n *\n * @param {?} value - numeric value to be transformed\n * @param {?=} abbreviate - defines whether to abbreviate big numbers or not (by adding appropriate postfixes); false by default\n * @param {?=} maxPrecision - The maximum amount of digits to be used, if provided\n * @return {?}\n */\nfunction adjustNumber(value, abbreviate = false, maxPrecision) {\n    /** @type {?} */\n    const calcValue = Math.abs(value);\n    return abbreviate && calcValue >= KILO_MULTIPLIER\n        ? abbreviateNumber(value)\n        : adjustPrecision(value, maxPrecision);\n}\n/**\n * @param {?} value\n * @param {?=} maxPrecision\n * @return {?}\n */\nfunction adjustPrecision(value, maxPrecision) {\n    // tslint:disable:no-magic-numbers\n    /** @type {?} */\n    const calcValue = Math.abs(value);\n    /** @type {?} */\n    const minValue = 1 /\n        Math.pow(10, Math.max(maxPrecision || DEFAULT_PRECISION_FOR_MIN_VALUE, 0));\n    /** @type {?} */\n    let digits = 0;\n    if (calcValue === 0) {\n        return '0';\n    }\n    else if (calcValue < minValue) {\n        if (value < 0) {\n            return `-${minValue}`;\n        }\n        else {\n            return `< ${minValue}`;\n        }\n    }\n    else if (maxPrecision) {\n        digits = maxPrecision;\n    }\n    else if (calcValue < 1) {\n        digits = 3;\n    }\n    else if (calcValue < 10) {\n        digits = 2;\n    }\n    else if (calcValue < 100) {\n        digits = 1;\n    }\n    return formatNumber(value, 'en-US', `0.0-${digits}`);\n}\n/**\n * @param {?} sourceValue\n * @return {?}\n */\nfunction abbreviateNumber(sourceValue) {\n    /** @type {?} */\n    let value = Math.abs(sourceValue);\n    /** @type {?} */\n    let postfix = '';\n    /** @type {?} */\n    const level = ABBREVIATION_LEVELS.find((/**\n     * @param {?} m\n     * @return {?}\n     */\n    (m) => m.multiplier <= value));\n    if (level !== undefined) {\n        value = sourceValue / level.multiplier;\n        postfix = level.postfix;\n    }\n    /** @type {?} */\n    const formattedValue = adjustPrecision(value);\n    return `${formattedValue}${postfix}`;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/bits-bytes-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction DtUnitConversion() { }\nif (false) {\n    /** @type {?} */\n    DtUnitConversion.prototype.multiplier;\n    /** @type {?} */\n    DtUnitConversion.prototype.unit;\n}\n/**\n * Util function used to format a number to either Bits or Bytes\n * @param {?} input\n * @param {?} conversions\n * @param {?} options\n * @return {?}\n */\nfunction formatToBitsBytes(input, conversions, options) {\n    /** @type {?} */\n    const sourceData = input instanceof DtFormattedValue\n        ? input.sourceData\n        : {\n            input,\n            unit: options.inputUnit,\n        };\n    /** @type {?} */\n    let formattedData = {};\n    /** @type {?} */\n    const value = coerceNumberProperty(sourceData.input, NaN);\n    if (!isNaN(value)) {\n        /** @type {?} */\n        const valueInUnit = convertToUnit(value, conversions, sourceData.unit);\n        /** @type {?} */\n        const conversion = options.outputUnit\n            ? getFixedUnitConversion(conversions, options.outputUnit)\n            : getAutoUnitConversion(conversions, valueInUnit);\n        /** @type {?} */\n        const convertedValue = conversion\n            ? valueInUnit / conversion.multiplier\n            : valueInUnit;\n        /** @type {?} */\n        const convertedUnit = conversion ? conversion.unit : options.inputUnit;\n        formattedData = {\n            transformedValue: convertedValue,\n            displayValue: adjustNumber(convertedValue),\n            displayUnit: convertedUnit,\n            displayRateUnit: input instanceof DtFormattedValue\n                ? input.displayData.displayRateUnit\n                : undefined,\n        };\n    }\n    return new DtFormattedValue(sourceData, formattedData);\n}\n/**\n * Converts number to given unit by applying the corect conversionrate\n * @param {?} input\n * @param {?} conversions\n * @param {?} inputUnit\n * @return {?}\n */\nfunction convertToUnit(input, conversions, inputUnit) {\n    /** @type {?} */\n    const conversion = conversions.find((/**\n     * @param {?} m\n     * @return {?}\n     */\n    (m) => m.unit === inputUnit));\n    return conversion !== undefined ? input * conversion.multiplier : input;\n}\n/**\n * @param {?} conversions\n * @param {?} valueInUnit\n * @return {?}\n */\nfunction getAutoUnitConversion(conversions, valueInUnit) {\n    return conversions.find((/**\n     * @param {?} m\n     * @return {?}\n     */\n    (m) => valueInUnit >= m.multiplier));\n}\n/**\n * @param {?} conversions\n * @param {?} outputUnit\n * @return {?}\n */\nfunction getFixedUnitConversion(conversions, outputUnit) {\n    return conversions.find((/**\n     * @param {?} m\n     * @return {?}\n     */\n    (m) => m.unit === outputUnit));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/bits/bits-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_BITS_OPTIONS = {\n    factor: KILO_MULTIPLIER,\n    inputUnit: \"bit\" /* BITS */,\n};\n// tslint:disable:no-magic-numbers\n/** @type {?} */\nconst KILO_CONVERSIONS = [\n    { multiplier: Math.pow(KILO_MULTIPLIER, 5), unit: \"Pbit\" /* PETA_BITS */ },\n    { multiplier: Math.pow(KILO_MULTIPLIER, 4), unit: \"Tbit\" /* TERA_BITS */ },\n    { multiplier: Math.pow(KILO_MULTIPLIER, 3), unit: \"Gbit\" /* GIGA_BITS */ },\n    { multiplier: Math.pow(KILO_MULTIPLIER, 2), unit: \"Mbit\" /* MEGA_BITS */ },\n    { multiplier: KILO_MULTIPLIER, unit: \"kbit\" /* KILO_BITS */ },\n];\n/** @type {?} */\nconst KIBI_CONVERSIONS = [\n    { multiplier: Math.pow(KIBI_MULTIPLIER, 5), unit: \"Pbit\" /* PETA_BITS */ },\n    { multiplier: Math.pow(KIBI_MULTIPLIER, 4), unit: \"Tbit\" /* TERA_BITS */ },\n    { multiplier: Math.pow(KIBI_MULTIPLIER, 3), unit: \"Gbit\" /* GIGA_BITS */ },\n    { multiplier: Math.pow(KIBI_MULTIPLIER, 2), unit: \"Mbit\" /* MEGA_BITS */ },\n    { multiplier: KIBI_MULTIPLIER, unit: \"kbit\" /* KILO_BITS */ },\n];\n// tslint:enable:no-magic-numbers\n/**\n * Util function that formats given number as bits\n * @param {?} input - value that gets formatted\n * @param {?=} options\n * @return {?}\n */\nfunction formatBits(\n// tslint:disable-next-line:no-any\ninput, options) {\n    /** @type {?} */\n    const mergedOptions = Object.assign(Object.assign({}, DEFAULT_BITS_OPTIONS), options);\n    /** @type {?} */\n    const conversions = getConversions(mergedOptions.factor);\n    return formatToBitsBytes(input, conversions, mergedOptions);\n}\n/**\n * @param {?} factor\n * @return {?}\n */\nfunction getConversions(factor) {\n    return factor === KIBI_MULTIPLIER ? KIBI_CONVERSIONS : KILO_CONVERSIONS;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/bits/bits.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe for formatting a given number to Bits\n */\nclass DtBits {\n    /**\n     * @param {?} input - The value to be formatted as bits\n     * @param {?=} factor - The factor used to divide the number for decimal prefixes. Default is 1000\n     * @param {?=} inputUnit - The unit for the input number. Default is DtUnit.BITS\n     * @return {?}\n     */\n    transform(\n    // tslint:disable-next-line:no-any\n    input, factor = KILO_MULTIPLIER, inputUnit = \"bit\" /* BITS */) {\n        if (isEmpty(input)) {\n            return NO_DATA;\n        }\n        if (input instanceof DtFormattedValue) {\n            return formatBits(input, { factor, inputUnit });\n        }\n        if (isNumber(input)) {\n            return formatBits(coerceNumberProperty(input), { factor, inputUnit });\n        }\n        return NO_DATA;\n    }\n}\nDtBits.ɵfac = function DtBits_Factory(t) { return new (t || DtBits)(); };\nDtBits.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtBits\", type: DtBits, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtBits, [{\n        type: Pipe,\n        args: [{\n                name: 'dtBits'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/bytes/bytes-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_BYTES_OPTIONS = {\n    factor: KILO_MULTIPLIER,\n    inputUnit: \"B\" /* BYTES */,\n};\n// tslint:disable:no-magic-numbers\n/** @type {?} */\nconst KILO_CONVERSIONS$1 = [\n    { multiplier: Math.pow(KILO_MULTIPLIER, 5), unit: \"PB\" /* PETA_BYTES */ },\n    { multiplier: Math.pow(KILO_MULTIPLIER, 4), unit: \"TB\" /* TERA_BYTES */ },\n    { multiplier: Math.pow(KILO_MULTIPLIER, 3), unit: \"GB\" /* GIGA_BYTES */ },\n    { multiplier: Math.pow(KILO_MULTIPLIER, 2), unit: \"MB\" /* MEGA_BYTES */ },\n    { multiplier: KILO_MULTIPLIER, unit: \"kB\" /* KILO_BYTES */ },\n];\n/** @type {?} */\nconst KIBI_CONVERSIONS$1 = [\n    { multiplier: Math.pow(KIBI_MULTIPLIER, 5), unit: \"PB\" /* PETA_BYTES */ },\n    { multiplier: Math.pow(KIBI_MULTIPLIER, 4), unit: \"TB\" /* TERA_BYTES */ },\n    { multiplier: Math.pow(KIBI_MULTIPLIER, 3), unit: \"GB\" /* GIGA_BYTES */ },\n    { multiplier: Math.pow(KIBI_MULTIPLIER, 2), unit: \"MB\" /* MEGA_BYTES */ },\n    { multiplier: KIBI_MULTIPLIER, unit: \"kB\" /* KILO_BYTES */ },\n];\n// tslint:enable:no-magic-numbers\n/**\n * Util function that formats given number as bytes\n * @param {?} input - value that gets formatted\n * @param {?=} options\n * @return {?}\n */\nfunction formatBytes(input, // tslint:disable-line:no-any\noptions) {\n    /** @type {?} */\n    const mergedOptions = Object.assign(Object.assign({}, DEFAULT_BYTES_OPTIONS), options);\n    /** @type {?} */\n    const conversions = getConversions$1(mergedOptions.factor);\n    return formatToBitsBytes(input, conversions, mergedOptions);\n}\n/**\n * @param {?} factor\n * @return {?}\n */\nfunction getConversions$1(factor) {\n    return factor === KIBI_MULTIPLIER ? KIBI_CONVERSIONS$1 : KILO_CONVERSIONS$1;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/bytes/bytes.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe for formatting a given number to Bytes\n */\nclass DtBytes {\n    /**\n     * @param {?} input - The number to be formatted as bytes\n     * @param {?=} factor - The factor used to divide the number for decimal prefixes. Default is 1000\n     * @param {?=} inputUnit - The unit for the input number. Default is DtUnit.BYTES\n     * @return {?}\n     */\n    transform(\n    // tslint:disable-next-line:no-any\n    input, factor = KILO_MULTIPLIER, inputUnit = \"B\" /* BYTES */) {\n        if (isEmpty(input)) {\n            return NO_DATA;\n        }\n        if (input instanceof DtFormattedValue) {\n            return formatBytes(input, { factor, inputUnit });\n        }\n        if (isNumber(input)) {\n            return formatBytes(coerceNumberProperty(input), { factor, inputUnit });\n        }\n        return NO_DATA;\n    }\n}\nDtBytes.ɵfac = function DtBytes_Factory(t) { return new (t || DtBytes)(); };\nDtBytes.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtBytes\", type: DtBytes, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtBytes, [{\n        type: Pipe,\n        args: [{\n                name: 'dtBytes'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/bytes/kilobytes.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe for formatting a given number to Kilobytes\n */\nclass DtKilobytes {\n    /**\n     * @param {?} input - The value to be formatted as Kilobytes\n     * @param {?=} factor - The factor used to divide the number for decimal prefixes. Default is 1000\n     * @param {?=} inputUnit - The unit for the input number. Default is DtUnit.BYTES\n     * @return {?}\n     */\n    transform(\n    // tslint:disable-next-line:no-any\n    input, factor = KILO_MULTIPLIER, inputUnit = \"B\" /* BYTES */) {\n        if (isEmpty(input)) {\n            return NO_DATA;\n        }\n        if (input instanceof DtFormattedValue) {\n            return formatBytes(input, {\n                factor,\n                inputUnit,\n                outputUnit: \"kB\" /* KILO_BYTES */,\n            });\n        }\n        if (isNumber(input)) {\n            return formatBytes(input, {\n                factor,\n                inputUnit,\n                outputUnit: \"kB\" /* KILO_BYTES */,\n            });\n        }\n        return NO_DATA;\n    }\n}\nDtKilobytes.ɵfac = function DtKilobytes_Factory(t) { return new (t || DtKilobytes)(); };\nDtKilobytes.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtKilobytes\", type: DtKilobytes, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtKilobytes, [{\n        type: Pipe,\n        args: [{\n                name: 'dtKilobytes'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/bytes/megabytes.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe for formatting a given number to Megabytes\n */\nclass DtMegabytes {\n    /**\n     * @param {?} input - The number to be formatted as Megabytes\n     * @param {?=} factor - The factor used to divide the number for decimal prefixes. Default is 1000\n     * @param {?=} inputUnit - The unit for the input number. Default is DtUnit.BYTES\n     * @return {?}\n     */\n    transform(\n    // tslint:disable-next-line:no-any\n    input, factor = KILO_MULTIPLIER, inputUnit = \"B\" /* BYTES */) {\n        if (isEmpty(input)) {\n            return NO_DATA;\n        }\n        if (input instanceof DtFormattedValue) {\n            return formatBytes(input, {\n                factor,\n                inputUnit,\n                outputUnit: \"MB\" /* MEGA_BYTES */,\n            });\n        }\n        if (isNumber(input)) {\n            return formatBytes(coerceNumberProperty(input), {\n                factor,\n                inputUnit,\n                outputUnit: \"MB\" /* MEGA_BYTES */,\n            });\n        }\n        return NO_DATA;\n    }\n}\nDtMegabytes.ɵfac = function DtMegabytes_Factory(t) { return new (t || DtMegabytes)(); };\nDtMegabytes.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtMegabytes\", type: DtMegabytes, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtMegabytes, [{\n        type: Pipe,\n        args: [{\n                name: 'dtMegabytes'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/count/count-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Util function formats the given number to a set of counting abbreviations (e.g. '20000000' will result in '20 mil')\n *\n * @param {?} input - numeric value to be transformed\n * @param {?=} inputUnit - input unit, typically defined unit of type DtUnit (DtUnit.COUNT by default), custom strings are also allowed\n *    value is used only as a reference in case an additional rate pipe is used\n * @return {?}\n */\nfunction formatCount(input, inputUnit = \"count\" /* COUNT */) {\n    /** @type {?} */\n    const sourceData = input instanceof DtFormattedValue\n        ? input.sourceData\n        : {\n            input,\n            unit: inputUnit,\n        };\n    /** @type {?} */\n    const value = coerceNumberProperty(sourceData.input, NaN);\n    /** @type {?} */\n    const formattedData = !isNaN(value)\n        ? {\n            transformedValue: value,\n            displayValue: adjustNumber(value, true),\n            displayUnit: inputUnit !== \"count\" /* COUNT */ ? inputUnit : undefined,\n            displayRateUnit: input instanceof DtFormattedValue\n                ? input.displayData.displayRateUnit\n                : undefined,\n        }\n        : {};\n    return new DtFormattedValue(sourceData, formattedData);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/count/count.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DtCount {\n    /**\n     * @param {?} input - The value to be formatted as an abbreviation\n     * @param {?=} inputUnit - The unit for the input number. Default is DtUnit.COUNT\n     * @return {?}\n     */\n    transform(\n    // tslint:disable-next-line:no-any\n    input, inputUnit = \"count\" /* COUNT */) {\n        if (isEmpty(input)) {\n            return NO_DATA;\n        }\n        if (input instanceof DtFormattedValue) {\n            return formatCount(input, inputUnit);\n        }\n        if (isNumber(input)) {\n            return formatCount(coerceNumberProperty(input), inputUnit);\n        }\n        return NO_DATA;\n    }\n}\nDtCount.ɵfac = function DtCount_Factory(t) { return new (t || DtCount)(); };\nDtCount.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtCount\", type: DtCount, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtCount, [{\n        type: Pipe,\n        args: [{\n                name: 'dtCount'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/date/date-range.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Error message that should be logged if no numbers are provided to the dateRange formatter.\n * \\@internal\n * @type {?}\n */\nconst ERROR_MESSAGE_NO_NUMBERS_PROVIDED = 'The DtDateRange formatter could not format the provided values! Please ensure that two numbers are provided!';\n/**\n * Error message that should be logged if not 2 numbers are provided.\n * \\@internal\n * @type {?}\n */\nconst ERROR_MESSAGE_WRONG_FORMAT = 'The DtDateRange formatter expects an array of two numbers that should be formatted!';\n/**\n * \\@internal Placeholder that should be displayed if no valid timestamps are provided\n * @type {?}\n */\nconst PLACEHOLDER = '{from} – {to}';\n/**\n * Instance of the logger for the date range formatter\n * @type {?}\n */\nconst logger = DtLoggerFactory.create('DtDateRange Formatter');\nclass DtDateRange {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * Pipe will format 2 UTC Timestamps to date time.\n     * Client web browser time zone will be included.\n     *\n     * ### Formatting Examples\n     * - `Jan 24 09:05 - 15:59` - for same day\n     * - `Jan 23 00:00 - Jan 24 12:01` - for different dates in current year\n     * - `2017 Apr 13 13:13 - 2018 Jun 06 06:06` - for different dates and years\n     *\n     * ### Usage in templates\n     *\n     * `{{ [startUtcTimestamp, endUtcTimestamp] | dtDateRange }}`\n     * @param {?} value\n     * @return {?}\n     */\n    transform(value) {\n        // tslint:disable-next-line no-magic-numbers\n        if (!Array.isArray(value) || value.length !== 2) {\n            logger.error(ERROR_MESSAGE_WRONG_FORMAT);\n            return PLACEHOLDER;\n        }\n        return dtFormatDateRange(value[0], value[1], this._locale);\n    }\n}\nDtDateRange.ɵfac = function DtDateRange_Factory(t) { return new (t || DtDateRange)(ɵngcc0.ɵɵdirectiveInject(LOCALE_ID)); };\nDtDateRange.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtDateRange\", type: DtDateRange, pure: true });\n/** @nocollapse */\nDtDateRange.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtDateRange, [{\n        type: Pipe,\n        args: [{\n                name: 'dtDateRange',\n                pure: true\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Inject,\n                args: [LOCALE_ID]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DtDateRange.prototype._locale;\n}\n/**\n * Formats two provided dates (start and end) to reflect a range.\n * \\@example\n * `Jan 24 09:05 - 15:59` - For the same day.\n * `Jan 23 00:00 - Jan 24 12:01` - For different dates in the current year.\n * `2017 Apr 13 13:13 - 2018 Jun 06 06:06` - For different dates and years.\n * @param {?} start The start timestamp.\n * @param {?} end The end timestamp.\n * @param {?=} locale The locale to format with – default: *en-US*\n * @return {?}\n */\nfunction dtFormatDateRange(start, end, locale = 'en-US') {\n    if (isNaN(start) || isNaN(end)) {\n        logger.error(ERROR_MESSAGE_NO_NUMBERS_PROVIDED);\n        return PLACEHOLDER;\n    }\n    /** @type {?} */\n    const date1 = new Date(start);\n    /** @type {?} */\n    const date2 = new Date(end);\n    /** @type {?} */\n    const now = new Date(Date.now());\n    /** @type {?} */\n    let dateString1 = 'MMM d HH:mm';\n    /** @type {?} */\n    let dateString2 = 'MMM d HH:mm';\n    if (date1.getUTCFullYear() === date2.getUTCFullYear()) {\n        if (now.getUTCFullYear() !== date1.getUTCFullYear()) {\n            dateString1 = 'y MMM d HH:mm';\n        }\n        if (date1.getUTCMonth() === date2.getUTCMonth() &&\n            date1.getUTCDay() === date2.getUTCDay()) {\n            dateString2 = 'HH:mm';\n        }\n    }\n    else {\n        dateString1 = 'y MMM d HH:mm';\n        dateString2 = dateString1;\n    }\n    dateString1 = formatDate(start, dateString1, locale);\n    dateString2 = formatDate(end, dateString2, locale);\n    return `${dateString1} — ${dateString2}`;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/percent/percent-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Util function that adds percent formatting to any number\n *\n * @param {?} input - numeric value to be transformed\n * @param {?=} maxPrecision - The maximum amount of digits to be used, if provided\n * @return {?}\n */\nfunction formatPercent(input, maxPrecision) {\n    /** @type {?} */\n    const inputData = {\n        input,\n        unit: \"%\" /* PERCENT */,\n    };\n    /** @type {?} */\n    const value = coerceNumberProperty(input, NaN);\n    /** @type {?} */\n    const formattedData = !isNaN(value)\n        ? {\n            transformedValue: value,\n            displayValue: adjustNumber(value, undefined, maxPrecision),\n            displayUnit: inputData.unit,\n        }\n        : {};\n    return new DtFormattedValue(inputData, formattedData);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/percent/percent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe used to add percent formatting\n */\nclass DtPercent {\n    /**\n     * @param {?} input - The value to be formatted as a percentage\n     * @param {?=} maxPrecision - The maximum amount of digits to be used, if provided\n     * @return {?}\n     */\n    // tslint:disable-next-line:no-any\n    transform(input, maxPrecision) {\n        if (isEmpty(input)) {\n            return NO_DATA;\n        }\n        if (isNumber(input)) {\n            return formatPercent(input, maxPrecision);\n        }\n        return NO_DATA;\n    }\n}\nDtPercent.ɵfac = function DtPercent_Factory(t) { return new (t || DtPercent)(); };\nDtPercent.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtPercent\", type: DtPercent, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtPercent, [{\n        type: Pipe,\n        args: [{\n                name: 'dtPercent'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/rate/rate-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Util function that adds rate formatting\n *\n * @param {?} input - numeric value or DtFormattedValue to be transformed\n * @param {?} rateUnit - rate unit connected and displayed with the value,\n *  typically defined rate unit of type DtRateUnit, custom strings are also allowed\n * @return {?}\n */\nfunction formatRate(input, rateUnit) {\n    /** @type {?} */\n    const sourceData = input instanceof DtFormattedValue\n        ? input.sourceData\n        : { input, unit: \"count\" /* COUNT */ };\n    /** @type {?} */\n    const displayValue = input instanceof DtFormattedValue\n        ? input.displayData.displayValue\n        : input.toString();\n    /** @type {?} */\n    const displayUnit = input instanceof DtFormattedValue\n        ? input.displayData.displayUnit\n        : undefined;\n    /** @type {?} */\n    const displayWhiteSpace = input instanceof DtFormattedValue\n        ? input.displayData.displayWhiteSpace\n        : undefined;\n    /** @type {?} */\n    const formattedData = {\n        transformedValue: sourceData.input,\n        displayRateUnit: rateUnit,\n        displayUnit,\n        displayValue,\n        displayWhiteSpace,\n    };\n    return new DtFormattedValue(sourceData, formattedData);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/rate/rate.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe used to add a rate (e.g. per second) to the value\n */\nclass DtRate {\n    /**\n     * @param {?} input - The value or DtFomrattedValue to be formatted with a rate\n     * @param {?} rateUnit - The unit for the rate of the input\n     * @return {?}\n     */\n    transform(input, // tslint:disable-line:no-any\n    rateUnit) {\n        if (isEmpty(input)) {\n            return NO_DATA;\n        }\n        if (input instanceof DtFormattedValue) {\n            return formatRate(input, rateUnit);\n        }\n        if (isNumber(input)) {\n            return formatRate(coerceNumberProperty(input), rateUnit);\n        }\n        return NO_DATA;\n    }\n}\nDtRate.ɵfac = function DtRate_Factory(t) { return new (t || DtRate)(); };\nDtRate.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtRate\", type: DtRate, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtRate, [{\n        type: Pipe,\n        args: [{\n                name: 'dtRate'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/duration/duration-formatter-constants.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} formatMethod\n * @return {?}\n */\nfunction toDurationMode(formatMethod) {\n    if (formatMethod === 'DEFAULT') {\n        return 'DEFAULT';\n    }\n    else if (formatMethod === 'PRECISE') {\n        return 'PRECISE';\n    }\n    else if (typeof formatMethod === 'number') {\n        return formatMethod;\n    }\n}\n// tslint:disable: no-magic-numbers\n/**\n * Factorials needed for converting milliseconds to other time units\n * @type {?}\n */\nconst CONVERSION_FACTORS_TO_MS$1 = new Map([\n    [DtTimeUnit.YEAR, 12 * 30.41666 * 24 * 60 * 60 * 1000],\n    [DtTimeUnit.MONTH, 30.41666 * 24 * 60 * 60 * 1000],\n    [DtTimeUnit.DAY, 24 * 60 * 60 * 1000],\n    [DtTimeUnit.HOUR, 60 * 60 * 1000],\n    [DtTimeUnit.MINUTE, 60 * 1000],\n    [DtTimeUnit.SECOND, 1000],\n    [DtTimeUnit.MILLISECOND, 1],\n    [DtTimeUnit.MICROSECOND, 1000],\n    [DtTimeUnit.NANOSECOND, 1],\n]);\n/**\n * Default for the conversionunit when no formatmethod is passed as a number.\n * @type {?}\n */\nconst CONVERSIONUNITS$1 = 3;\n/**\n * Use when converting a duration to micro- or nanoseconds\n * @type {?}\n */\nconst MOVE_COMMA = 1000000;\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/duration/duration-formatter-utils/convert-to-milliseconds.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Converts any duration to milliseconds\n * @param {?} duration numeric time value\n * @param {?} inputUnit dtTimeUnit value describing which unit the duration is in\n * @return {?}\n */\nfunction dtConvertToMilliseconds(duration, inputUnit) {\n    if (duration >= 0) {\n        return inputUnit === DtTimeUnit.MICROSECOND ||\n            inputUnit === DtTimeUnit.NANOSECOND\n            ? (duration * (/** @type {?} */ (CONVERSION_FACTORS_TO_MS$1.get(inputUnit)))) / MOVE_COMMA\n            : duration * (/** @type {?} */ (CONVERSION_FACTORS_TO_MS$1.get(inputUnit)));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/duration/duration-formatter-utils/transform-result.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Calculates output duration in either \"DEFAULT\" or \"CUSTOM\" mode.\n * If precision is DEFAULT then displays a maximum of three units, but\n * if precision is a number, then displays that amount of units.\n * @param {?} duration numeric time value\n * @param {?} inputUnit dtTimeUnit value describing which unit the duration is in\n * @param {?} formatMethod the formatting method\n * @return {?}\n */\nfunction dtTransformResult(duration, inputUnit, formatMethod) {\n    /** @type {?} */\n    const result = new Map();\n    /** @type {?} */\n    const unitsToDisplay = typeof formatMethod === 'number' ? formatMethod : CONVERSIONUNITS$1;\n    /** @type {?} */\n    let rest = duration * (/** @type {?} */ (CONVERSION_FACTORS_TO_MS$1.get(inputUnit)));\n    /** @type {?} */\n    let displayedUnits = 0;\n    for (const key of Array.from(CONVERSION_FACTORS_TO_MS$1.keys())) {\n        if (key === DtTimeUnit.MICROSECOND) {\n            rest = Math.round(rest * MOVE_COMMA); // handles IEEE floating point number problem\n        }\n        /** @type {?} */\n        const amount = Math.trunc(rest / (/** @type {?} */ (CONVERSION_FACTORS_TO_MS$1.get(key))));\n        if (displayedUnits < unitsToDisplay) {\n            if (amount > 0) {\n                result.set(key, amount.toString());\n                // Only increase when a unit with a value bigger than 0 exists\n                displayedUnits++;\n            }\n            else if (displayedUnits > 0) {\n                // Only increase when a unit with a value is already set\n                displayedUnits++;\n            }\n        }\n        rest = rest - amount * (/** @type {?} */ (CONVERSION_FACTORS_TO_MS$1.get(key)));\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/duration/duration-formatter-utils/transform-result-precise.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Calculates the duration precisely. Will convert duration to the inputUnit or to the outputUnit if set. (floating point number for its corelated unit)\n * @param {?} duration numeric time value\n * @param {?} inputUnit dtTimeUnit value describing which unit the duration is in\n * @param {?} outputUnit dtTimeUnit | undefined value describing the unit to which it should format\n * @param {?} formatMethod the formatting method\n * @return {?}\n */\nfunction dtTransformResultPrecise(duration, inputUnit, outputUnit, formatMethod) {\n    /** @type {?} */\n    const amount = inputUnit === DtTimeUnit.MILLISECOND\n        ? duration\n        : dtConvertToMilliseconds(duration, inputUnit);\n    return outputUnit !== undefined\n        ? calcResult((/** @type {?} */ (amount)), formatMethod, outputUnit)\n        : calcResult((/** @type {?} */ (amount)), formatMethod, inputUnit);\n}\n/**\n * @param {?} amount\n * @param {?} formatMethod\n * @param {?} unit\n * @return {?}\n */\nfunction calcResult(amount, formatMethod, unit) {\n    /** @type {?} */\n    let result = new Map();\n    if (formatMethod === 'PRECISE') {\n        amount = amount / (/** @type {?} */ (CONVERSION_FACTORS_TO_MS$1.get(unit)));\n        // Need to move the comma since IEEE can't handle floating point numbers very well.\n        if (unit === DtTimeUnit.MICROSECOND || unit === DtTimeUnit.NANOSECOND) {\n            amount *= MOVE_COMMA;\n        }\n        result.set(unit, amount.toString());\n    }\n    else {\n        amount = Math.trunc(amount / (/** @type {?} */ (CONVERSION_FACTORS_TO_MS$1.get(unit))));\n        amount < 1 ? result.set(unit, '< 1') : result.set(unit, amount.toString());\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/duration/duration-formatter-utils/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/duration/duration-formatter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Formats a numeric value to a duration string\n * @param {?} duration numeric time value\n * @param {?=} formatMethod the formatting method\n * @param {?=} outputUnit dtTimeUnit | undefined value describing the unit to which it should format e.g to seconds\n * @param {?=} inputUnit dtTimeUnit value describing which unit the duration is in (default: milliseconds)\n * @return {?}\n */\nfunction formatDuration(duration, formatMethod = 'DEFAULT', outputUnit, inputUnit = DtTimeUnit.MILLISECOND) {\n    /** @type {?} */\n    const inputData = {\n        input: duration,\n        unit: inputUnit,\n    };\n    if (duration <= 0 && formatMethod === 'DEFAULT') {\n        return new DtFormattedValue(inputData, {\n            transformedValue: duration,\n            displayValue: '< 1',\n            displayUnit: inputUnit,\n            displayWhiteSpace: false,\n        });\n    }\n    /** @type {?} */\n    const result = outputUnit || formatMethod === 'PRECISE'\n        ? dtTransformResultPrecise(duration, inputUnit, outputUnit, formatMethod)\n        : dtTransformResult(duration, inputUnit, formatMethod);\n    // Return NO_DATA when inputUnit is invalid\n    if (CONVERSION_FACTORS_TO_MS$1.get(inputUnit) === undefined) {\n        return NO_DATA;\n    }\n    if (result === undefined) {\n        return NO_DATA;\n    }\n    /** @type {?} */\n    let resultString = '';\n    result.forEach((/**\n     * @param {?} value\n     * @param {?} key\n     * @return {?}\n     */\n    (value, key) => {\n        resultString = `${resultString}${value} ${key} `;\n    }));\n    return new DtFormattedValue(inputData, {\n        transformedValue: inputData.input,\n        displayValue: resultString.trim(),\n        displayWhiteSpace: false,\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/duration/duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe used to convert milliseconds to amount of time from years to nanoseconds\n */\nclass DtDuration {\n    /**\n     * @param {?} duration The timevalue to be formatted to amount of time from years to nanoseconds\n     * @param {?} formatMethod DtDurationMode Configuration for formatting the output\n     * @param {?} outputUnit dtTimeUnit | undefined value describing the unit to which it should format\n     * @param {?=} inputUnit dtTimeUnit value describing which unit the duration is in\n     * @return {?}\n     */\n    transform(duration, formatMethod, outputUnit, inputUnit = DtTimeUnit.MILLISECOND) {\n        if (isEmpty(duration)) {\n            return NO_DATA;\n        }\n        return isNumber(duration)\n            ? formatDuration(coerceNumberProperty(duration), formatMethod, outputUnit, inputUnit)\n            : NO_DATA;\n    }\n}\nDtDuration.ɵfac = function DtDuration_Factory(t) { return new (t || DtDuration)(); };\nDtDuration.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"dtDuration\", type: DtDuration, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtDuration, [{\n        type: Pipe,\n        args: [{\n                name: 'dtDuration'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/formatters-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst FORMATTERS = [\n    DtBytes,\n    DtBits,\n    DtKilobytes,\n    DtMegabytes,\n    DtCount,\n    DtPercent,\n    DtRate,\n    DtDateRange,\n    DtTime,\n    DtDuration,\n];\nclass DtFormattersModule {\n}\nDtFormattersModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DtFormattersModule });\nDtFormattersModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DtFormattersModule_Factory(t) { return new (t || DtFormattersModule)(); }, imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DtFormattersModule, { declarations: function () { return [DtBytes,\n        DtBits,\n        DtKilobytes,\n        DtMegabytes,\n        DtCount,\n        DtPercent,\n        DtRate,\n        DtDateRange,\n        DtTime,\n        DtDuration]; }, imports: function () { return [CommonModule]; }, exports: function () { return [DtBytes,\n        DtBits,\n        DtKilobytes,\n        DtMegabytes,\n        DtCount,\n        DtPercent,\n        DtRate,\n        DtDateRange,\n        DtTime,\n        DtDuration]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtFormattersModule, [{\n        type: NgModule,\n        args: [{\n                declarations: FORMATTERS,\n                exports: FORMATTERS,\n                imports: [CommonModule]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: dynatrace-barista-components-formatters.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DtBits, DtBytes, DtCount, DtDateRange, DtDuration, DtTime as DtExperimentalFormatTime, DtFormattedValue, DtFormattersModule, DtKilobytes, DtMegabytes, DtPercent, DtRate, DtRateUnit, DtTimeUnit, KIBI_MULTIPLIER, KILO_MULTIPLIER, adjustNumber, dtFormatDateRange, formatTime as experimentalFormatTime, formatBits, formatBytes, formatCount, formatDuration, formatPercent, formatRate };\n\n//# sourceMappingURL=dynatrace-barista-components-formatters.js.map","import { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Output, Input, NgModule } from '@angular/core';\nimport { DtButtonModule } from '@dynatrace/barista-components/button';\nimport { DtIconModule } from '@dynatrace/barista-components/icon';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { AsyncSubject } from 'rxjs';\nimport { isNumber } from '@dynatrace/barista-components/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/pagination-defaults.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright 2020 Dynatrace LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * \\@internal The default page size if there is no page size and there are no provided page size options.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@dynatrace/barista-components/button';\nimport * as ɵngcc2 from '@dynatrace/barista-components/icon';\nimport * as ɵngcc3 from '@angular/common';\n\nfunction DtPagination_ng_container_4_li_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 8);\n    ɵngcc0.ɵɵelementStart(1, \"span\");\n    ɵngcc0.ɵɵtext(2, \"\\u2026\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3._ariaLabelEllipsis);\n} }\nfunction DtPagination_ng_container_4_li_2_button_1_Template(rf, ctx) { if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function DtPagination_ng_container_4_li_2_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const page_r5 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8._setPage(page_r5); });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const page_r5 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r6._ariaLabelPage + \" \" + page_r5);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", page_r5, \" \");\n} }\nfunction DtPagination_ng_container_4_li_2_span_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const page_r5 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r7._ariaLabelCurrent + \" \" + page_r5);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", page_r5, \" \");\n} }\nfunction DtPagination_ng_container_4_li_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"li\", 8);\n    ɵngcc0.ɵɵtemplate(1, DtPagination_ng_container_4_li_2_button_1_Template, 2, 2, \"button\", 9);\n    ɵngcc0.ɵɵtemplate(2, DtPagination_ng_container_4_li_2_span_2_Template, 2, 2, \"span\", 10);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const page_r5 = ctx.$implicit;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", page_r5 !== ctx_r4.currentPage);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", page_r5 === ctx_r4.currentPage);\n} }\nfunction DtPagination_ng_container_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, DtPagination_ng_container_4_li_1_Template, 3, 1, \"li\", 6);\n    ɵngcc0.ɵɵtemplate(2, DtPagination_ng_container_4_li_2_Template, 3, 2, \"li\", 7);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const block_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", i_r2 > 0);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", block_r1);\n} }\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * \\@internal The offset from the start and the end when it should start adding the ellipsis character\n * @type {?}\n */\nconst BOUND = 3;\n/**\n * \\@internal The maximum amount of pages that are displayed in a row\n * @type {?}\n */\nconst MAX_PAGINATION_ITEMS = 7;\n/**\n * \\@internal Aria label for the previous page Button.\n * @type {?}\n */\nconst ARIA_DEFAULT_PREVIOUS_LABEL = 'Previous page';\n/**\n * \\@internal Aria label for the next page Button.\n * @type {?}\n */\nconst ARIA_DEFAULT_NEXT_LABEL = 'Next page';\n/**\n * \\@internal Aria label for the pagination.\n * @type {?}\n */\nconst ARIA_DEFAULT_LABEL = 'Pagination';\n/**\n * \\@internal Aria label for the ellipsis character.\n * @type {?}\n */\nconst ARIA_DEFAULT_ELLIPSES = 'The next pages are ellipses';\n/**\n * \\@internal Aria label for a page button (Page 1,2,3...).\n * @type {?}\n */\nconst ARIA_DEFAULT_PAGE_LABEL = 'page';\n/**\n * \\@internal Aria label for the current page button.\n * @type {?}\n */\nconst ARIA_DEFAULT_CURRENT_LABEL = 'You are currently on page';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/pagination-calculate-pages.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * Calculates the numbers to be displayed by the pagination, according to the pagination State.\n * ellipsis pages that should not be shown.\n * @param {?} numberOfPages the number of pages that should be displayed\n * @param {?} currentPage the number of the current page (starts with 1)\n * @return {?}\n */\nfunction calculatePages(numberOfPages, currentPage) {\n    if (currentPage > numberOfPages || currentPage < 1) {\n        return [];\n    }\n    if (numberOfPages < MAX_PAGINATION_ITEMS) {\n        // create an Array with the length of numberOfPages that starts with one and ends with n\n        return [Array.from({ length: numberOfPages }, (/**\n             * @param {?} _\n             * @param {?} index\n             * @return {?}\n             */\n            (_, index) => index + 1))];\n    }\n    /** @type {?} */\n    const start = new Set(Array.from({ length: BOUND }, (/**\n     * @param {?} _\n     * @param {?} index\n     * @return {?}\n     */\n    (_, index) => index + 1)));\n    /** @type {?} */\n    const end = new Set(Array.from({ length: BOUND }, (/**\n     * @param {?} _\n     * @param {?} index\n     * @return {?}\n     */\n    (_, index) => numberOfPages - BOUND + index + 1)));\n    /** @type {?} */\n    const middle = new Set();\n    if (start.has(currentPage)) {\n        start.add(currentPage + 1);\n    }\n    else if (end.has(currentPage)) {\n        end.add(currentPage - 1);\n    }\n    else {\n        middle.add(currentPage - 1);\n        middle.add(currentPage);\n        middle.add(currentPage + 1);\n    }\n    /** @type {?} */\n    const startArray = Array.from(start);\n    /** @type {?} */\n    const middleArray = Array.from(middle);\n    /** @type {?} */\n    const endArray = Array.from(end).sort((/**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    (a, b) => a - b));\n    if (middle.has(currentPage)) {\n        return [[startArray[0]], middleArray, [endArray[endArray.length - 1]]];\n    }\n    if (start.has(currentPage)) {\n        return [\n            startArray,\n            endArray.slice(startArray.length - MAX_PAGINATION_ITEMS + 1),\n        ];\n    }\n    // current is in the end\n    return [\n        startArray.splice(0, MAX_PAGINATION_ITEMS - endArray.length - 1),\n        endArray,\n    ];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/pagination.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DtPagination {\n    /**\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Event that gets fired if the pagination changes the current page\n         */\n        this.changed = new EventEmitter();\n        this._length = 0;\n        this._pageSize = DEFAULT_PAGE_SIZE;\n        this._currentPage = 1;\n        /**\n         * \\@internal Aria label for the previous page button. Defaults to \"Previous page\"\n         */\n        this._ariaLabelPrevious = ARIA_DEFAULT_PREVIOUS_LABEL;\n        /**\n         * \\@internal Aria label for the next page button. Defaults to \"Next page\"\n         */\n        this._ariaLabelNext = ARIA_DEFAULT_NEXT_LABEL;\n        /**\n         * Aria label for the pagination. Defaults to \"Pagination\"\n         */\n        this.ariaLabel = ARIA_DEFAULT_LABEL;\n        /**\n         * \\@internal Aria label for the ellipsis character. Defaults to \"The next pages are ellipsis\"\n         */\n        this._ariaLabelEllipsis = ARIA_DEFAULT_ELLIPSES;\n        /**\n         * \\@internal Aria label for a page button (Page 1,2,3...). Defaults to \"Page\"\n         */\n        this._ariaLabelPage = ARIA_DEFAULT_PAGE_LABEL;\n        /**\n         * \\@internal Aria label for the current page button.\n         * Defaults to \"You are currently on page\"\n         */\n        this._ariaLabelCurrent = ARIA_DEFAULT_CURRENT_LABEL;\n        this._numberOfPages = 0;\n        /**\n         * \\@internal\n         * The async subject is used to get the last value, even it has completed.\n         * Used to detect when the pagination is ready.\n         */\n        this._initialized = new AsyncSubject();\n        /**\n         * \\@internal Array of the pages to be displayed\n         */\n        this._pages = [];\n        this._updateItems();\n    }\n    /**\n     * The length of the total number of items that are being paginated. Defaulted to 0.\n     * @return {?}\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set length(value) {\n        /** @type {?} */\n        const length = coerceNumberProperty(value);\n        if (isNumber(value) && this._length !== length) {\n            this._length = length;\n            this._updateItems();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Number of items to display on a page. By default set to 50.\n     * @return {?}\n     */\n    get pageSize() {\n        return this._pageSize;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set pageSize(value) {\n        /** @type {?} */\n        const pageSize = coerceNumberProperty(value);\n        if (isNumber(value) && this._pageSize !== pageSize) {\n            this._pageSize = pageSize;\n            this._updateItems();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * The current page of the pagination\n     * @return {?}\n     */\n    get currentPage() {\n        return this._currentPage;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set currentPage(value) {\n        /** @type {?} */\n        const currentPage = coerceNumberProperty(value);\n        if (isNumber(value) && this._currentPage !== currentPage) {\n            this._currentPage = currentPage;\n            this._updateItems();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Aria label for the previous page button. Defaults to \"Previous page\"\n     * @deprecated `aria-label-previous` does not conform with accessibility standards.\n     * Please use `ariaLabelPrevious` input instead.\n     * \\@breaking-change Will be removed in version 7.0.0\n     * @return {?}\n     */\n    get ariaPreviousLabel() {\n        return this._ariaLabelPrevious;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaPreviousLabel(value) {\n        this._ariaLabelPrevious = value;\n    }\n    /**\n     * Aria label for the previous page button. Defaults to \"Previous page\"\n     * @return {?}\n     */\n    get ariaLabelPrevious() {\n        return this._ariaLabelPrevious;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaLabelPrevious(value) {\n        this._ariaLabelPrevious = value;\n    }\n    /**\n     * Aria label for the next page button. Defaults to \"Next page\"\n     * @deprecated `aria-label-next` does not conform with accessibility standards.\n     * Please use `ariaLabelNext` input instead.\n     * \\@breaking-change Will be removed in version 7.0.0\n     * @return {?}\n     */\n    get ariaNextLabel() {\n        return this._ariaLabelNext;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaNextLabel(value) {\n        this._ariaLabelNext = value;\n    }\n    /**\n     * Aria label for the next page button. Defaults to \"Next page\"\n     * @return {?}\n     */\n    get ariaLabelNext() {\n        return this._ariaLabelNext;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaLabelNext(value) {\n        this._ariaLabelNext = value;\n    }\n    /**\n     * Aria label for the ellipsis character. Defaults to \"The next pages are ellipses\"\n     * @deprecated `aria-label-ellipses` does not conform with accessibility standards.\n     * Please use `ariaLabelEllipsis` input instead.\n     * \\@breaking-change Will be removed in version 7.0.0\n     * @return {?}\n     */\n    get ariaLabelEllipses() {\n        return this._ariaLabelEllipsis;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaLabelEllipses(value) {\n        this._ariaLabelEllipsis = value;\n    }\n    /**\n     * Aria label for the ellipsis character. Defaults to \"The next pages are ellipsis\"\n     * @return {?}\n     */\n    get ariaLabelEllipsis() {\n        return this._ariaLabelEllipsis;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaLabelEllipsis(value) {\n        this._ariaLabelEllipsis = value;\n    }\n    /**\n     * Aria label for a page button (Page 1,2,3...). Defaults to \"Page\"\n     * @deprecated `aria-label-page` does not conform with accessibility standards.\n     * Please use `ariaLabelPage` input instead.\n     * \\@breaking-change Will be removed in version 7.0.0\n     * @return {?}\n     */\n    get ariaPageLabel() {\n        return this._ariaLabelPage;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaPageLabel(value) {\n        this._ariaLabelPage = value;\n    }\n    /**\n     * Aria label for a page button (Page 1,2,3...). Defaults to \"Page\"\n     * @return {?}\n     */\n    get ariaLabelPage() {\n        return this._ariaLabelPage;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaLabelPage(value) {\n        this._ariaLabelPage = value;\n    }\n    /**\n     * Aria label for the current page button. Defaults to \"You are currently on page\"\n     * @deprecated `aria-label-current` does not conform with accessibility standards.\n     * Please use `ariaLabelCurrent` input instead.\n     * \\@breaking-change Will be removed in version 7.0.0\n     * @return {?}\n     */\n    get ariaCurrentLabel() {\n        return this._ariaLabelCurrent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaCurrentLabel(value) {\n        this._ariaLabelCurrent = value;\n    }\n    /**\n     * Aria label for the current page button. Defaults to \"You are currently on page\"\n     * @return {?}\n     */\n    get ariaLabelCurrent() {\n        return this._ariaLabelCurrent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ariaLabelCurrent(value) {\n        this._ariaLabelCurrent = value;\n    }\n    /**\n     * The number of pages by the provided page size and the length of all items\n     * @return {?}\n     */\n    get numberOfPages() {\n        return this._numberOfPages;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._initialized.next(true);\n        this._initialized.complete();\n    }\n    /**\n     * sets the previous page as current page\n     * @return {?}\n     */\n    previous() {\n        if (!this._isFirstPage) {\n            this._setPage(this.currentPage - 1);\n        }\n    }\n    /**\n     * sets the next page as current page\n     * @return {?}\n     */\n    next() {\n        if (!this._isLastPage) {\n            this._setPage(this.currentPage + 1);\n        }\n    }\n    /**\n     * \\@internal\n     * sets the current page and emits the changed event with the current page\n     * only triggered by user interaction.\n     * @param {?} page\n     * @return {?}\n     */\n    _setPage(page) {\n        this.currentPage = page;\n        this.changed.emit(page);\n    }\n    /**\n     * Calculates the pages that should be displayed by the pagination\n     * @private\n     * @return {?}\n     */\n    _updateItems() {\n        this._numberOfPages =\n            this._pageSize > 0 ? Math.ceil(this.length / this.pageSize) : 0;\n        this._isFirstPage = this._currentPage <= 1;\n        this._isLastPage = this._currentPage >= this._numberOfPages;\n        this._pages = calculatePages(this._numberOfPages, this._currentPage);\n    }\n}\nDtPagination.ɵfac = function DtPagination_Factory(t) { return new (t || DtPagination)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nDtPagination.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtPagination, selectors: [[\"dt-pagination\"]], hostAttrs: [\"role\", \"navigation\", 1, \"dt-pagination\"], inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], length: \"length\", pageSize: \"pageSize\", currentPage: \"currentPage\", ariaPreviousLabel: [\"aria-label-previous\", \"ariaPreviousLabel\"], ariaLabelPrevious: \"ariaLabelPrevious\", ariaNextLabel: [\"aria-label-next\", \"ariaNextLabel\"], ariaLabelNext: \"ariaLabelNext\", ariaLabelEllipses: [\"aria-label-ellipses\", \"ariaLabelEllipses\"], ariaLabelEllipsis: \"ariaLabelEllipsis\", ariaPageLabel: [\"aria-label-page\", \"ariaPageLabel\"], ariaLabelPage: \"ariaLabelPage\", ariaCurrentLabel: [\"aria-label-current\", \"ariaCurrentLabel\"], ariaLabelCurrent: \"ariaLabelCurrent\" }, outputs: { changed: \"changed\" }, exportAs: [\"dtPagination\"], decls: 8, vars: 8, consts: [[1, \"dt-pagination-list\"], [1, \"dt-pagination-previous\"], [\"dt-icon-button\", \"\", \"variant\", \"nested\", \"color\", \"accent\", 3, \"disabled\", \"click\"], [\"name\", \"dropdownclosed\"], [4, \"ngFor\", \"ngForOf\"], [1, \"dt-pagination-next\"], [\"class\", \"dt-pagination-item\", 4, \"ngIf\"], [\"class\", \"dt-pagination-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"dt-pagination-item\"], [\"dt-button\", \"\", \"variant\", \"nested\", 3, \"click\", 4, \"ngIf\"], [\"aria-current\", \"\", 4, \"ngIf\"], [\"dt-button\", \"\", \"variant\", \"nested\", 3, \"click\"], [\"aria-current\", \"\"]], template: function DtPagination_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ol\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"li\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"button\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function DtPagination_Template_button_click_2_listener() { return ctx.previous(); });\n        ɵngcc0.ɵɵelement(3, \"dt-icon\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, DtPagination_ng_container_4_Template, 3, 2, \"ng-container\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"li\", 5);\n        ɵngcc0.ɵɵelementStart(6, \"button\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function DtPagination_Template_button_click_6_listener() { return ctx.next(); });\n        ɵngcc0.ɵɵelement(7, \"dt-icon\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx._isFirstPage);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._ariaLabelPrevious)(\"aria-disabled\", ctx._isFirstPage);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._pages);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx._isLastPage);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._ariaLabelNext)(\"aria-disabled\", ctx._isLastPage);\n    } }, directives: [ɵngcc1.DtButton, ɵngcc2.DtIcon, ɵngcc3.NgForOf, ɵngcc3.NgIf], styles: [\".dt-pagination-list[_ngcontent-%COMP%]{font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:14px;line-height:1.6;display:flex;margin:0;padding:0}.dt-pagination-list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{list-style-type:none}.dt-pagination-previous[_ngcontent-%COMP%]{margin-right:8px}.dt-pagination-previous[_ngcontent-%COMP%]   dt-icon[_ngcontent-%COMP%]{transform:scale(-1,1)}.dt-pagination-next[_ngcontent-%COMP%]{margin-left:8px}.dt-pagination-item[_ngcontent-%COMP%]   button[_ngcontent-%COMP%], .dt-pagination-item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#6d6d6d;display:inline-block;line-height:32px;min-width:32px;padding:0;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.dt-pagination-item[_ngcontent-%COMP%]   [aria-current][_ngcontent-%COMP%]{color:#191919;font-weight:700;font-size:14px;line-height:32px}\"], changeDetection: 0 });\n/** @nocollapse */\nDtPagination.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nDtPagination.propDecorators = {\n    changed: [{ type: Output }],\n    length: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    currentPage: [{ type: Input }],\n    ariaPreviousLabel: [{ type: Input, args: ['aria-label-previous',] }],\n    ariaLabelPrevious: [{ type: Input }],\n    ariaNextLabel: [{ type: Input, args: ['aria-label-next',] }],\n    ariaLabelNext: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelEllipses: [{ type: Input, args: ['aria-label-ellipses',] }],\n    ariaLabelEllipsis: [{ type: Input }],\n    ariaPageLabel: [{ type: Input, args: ['aria-label-page',] }],\n    ariaLabelPage: [{ type: Input }],\n    ariaCurrentLabel: [{ type: Input, args: ['aria-label-current',] }],\n    ariaLabelCurrent: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtPagination, [{\n        type: Component,\n        args: [{\n                exportAs: 'dtPagination',\n                selector: 'dt-pagination',\n                template: \"<ol class=\\\"dt-pagination-list\\\" [attr.aria-label]=\\\"ariaLabel\\\">\\n  <li class=\\\"dt-pagination-previous\\\">\\n    <button\\n      dt-icon-button\\n      variant=\\\"nested\\\"\\n      color=\\\"accent\\\"\\n      [attr.aria-label]=\\\"_ariaLabelPrevious\\\"\\n      [attr.aria-disabled]=\\\"_isFirstPage\\\"\\n      [disabled]=\\\"_isFirstPage\\\"\\n      (click)=\\\"previous()\\\"\\n    >\\n      <dt-icon name=\\\"dropdownclosed\\\"></dt-icon>\\n    </button>\\n  </li>\\n\\n  <ng-container *ngFor=\\\"let block of _pages; let i = index\\\">\\n    <li *ngIf=\\\"i > 0\\\" class=\\\"dt-pagination-item\\\">\\n      <span [attr.aria-label]=\\\"_ariaLabelEllipsis\\\">\\u2026</span>\\n    </li>\\n\\n    <li *ngFor=\\\"let page of block\\\" class=\\\"dt-pagination-item\\\">\\n      <button\\n        *ngIf=\\\"page !== currentPage\\\"\\n        dt-button\\n        variant=\\\"nested\\\"\\n        [attr.aria-label]=\\\"_ariaLabelPage + ' ' + page\\\"\\n        (click)=\\\"_setPage(page)\\\"\\n      >\\n        {{ page }}\\n      </button>\\n\\n      <span\\n        *ngIf=\\\"page === currentPage\\\"\\n        aria-current\\n        [attr.aria-label]=\\\"_ariaLabelCurrent + ' ' + page\\\"\\n      >\\n        {{ page }}\\n      </span>\\n    </li>\\n  </ng-container>\\n\\n  <li class=\\\"dt-pagination-next\\\">\\n    <button\\n      dt-icon-button\\n      variant=\\\"nested\\\"\\n      color=\\\"accent\\\"\\n      [attr.aria-label]=\\\"_ariaLabelNext\\\"\\n      [attr.aria-disabled]=\\\"_isLastPage\\\"\\n      [disabled]=\\\"_isLastPage\\\"\\n      (click)=\\\"next()\\\"\\n    >\\n      <dt-icon name=\\\"dropdownclosed\\\"></dt-icon>\\n    </button>\\n  </li>\\n</ol>\\n\",\n                host: {\n                    class: 'dt-pagination',\n                    role: 'navigation'\n                },\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                styles: [\".dt-pagination-list{font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:14px;line-height:1.6;display:flex;margin:0;padding:0}.dt-pagination-list li{list-style-type:none}.dt-pagination-previous{margin-right:8px}.dt-pagination-previous dt-icon{transform:scale(-1,1)}.dt-pagination-next{margin-left:8px}.dt-pagination-item button,.dt-pagination-item span{color:#6d6d6d;display:inline-block;line-height:32px;min-width:32px;padding:0;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.dt-pagination-item [aria-current]{color:#191919;font-weight:700;font-size:14px;line-height:32px}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { changed: [{\n            type: Output\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], length: [{\n            type: Input\n        }], pageSize: [{\n            type: Input\n        }], currentPage: [{\n            type: Input\n        }], ariaPreviousLabel: [{\n            type: Input,\n            args: ['aria-label-previous']\n        }], ariaLabelPrevious: [{\n            type: Input\n        }], ariaNextLabel: [{\n            type: Input,\n            args: ['aria-label-next']\n        }], ariaLabelNext: [{\n            type: Input\n        }], ariaLabelEllipses: [{\n            type: Input,\n            args: ['aria-label-ellipses']\n        }], ariaLabelEllipsis: [{\n            type: Input\n        }], ariaPageLabel: [{\n            type: Input,\n            args: ['aria-label-page']\n        }], ariaLabelPage: [{\n            type: Input\n        }], ariaCurrentLabel: [{\n            type: Input,\n            args: ['aria-label-current']\n        }], ariaLabelCurrent: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Event that gets fired if the pagination changes the current page\n     * @type {?}\n     */\n    DtPagination.prototype.changed;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtPagination.prototype._length;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtPagination.prototype._pageSize;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtPagination.prototype._currentPage;\n    /**\n     * \\@internal Aria label for the previous page button. Defaults to \"Previous page\"\n     * @type {?}\n     */\n    DtPagination.prototype._ariaLabelPrevious;\n    /**\n     * \\@internal Aria label for the next page button. Defaults to \"Next page\"\n     * @type {?}\n     */\n    DtPagination.prototype._ariaLabelNext;\n    /**\n     * Aria label for the pagination. Defaults to \"Pagination\"\n     * @type {?}\n     */\n    DtPagination.prototype.ariaLabel;\n    /**\n     * \\@internal Aria label for the ellipsis character. Defaults to \"The next pages are ellipsis\"\n     * @type {?}\n     */\n    DtPagination.prototype._ariaLabelEllipsis;\n    /**\n     * \\@internal Aria label for a page button (Page 1,2,3...). Defaults to \"Page\"\n     * @type {?}\n     */\n    DtPagination.prototype._ariaLabelPage;\n    /**\n     * \\@internal Aria label for the current page button.\n     * Defaults to \"You are currently on page\"\n     * @type {?}\n     */\n    DtPagination.prototype._ariaLabelCurrent;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtPagination.prototype._numberOfPages;\n    /**\n     * \\@internal\n     * The async subject is used to get the last value, even it has completed.\n     * Used to detect when the pagination is ready.\n     * @type {?}\n     */\n    DtPagination.prototype._initialized;\n    /**\n     * \\@internal Array of the pages to be displayed\n     * @type {?}\n     */\n    DtPagination.prototype._pages;\n    /**\n     * \\@internal Whether the current page is the first page\n     * @type {?}\n     */\n    DtPagination.prototype._isFirstPage;\n    /**\n     * \\@internal Whether the current page is last page\n     * @type {?}\n     */\n    DtPagination.prototype._isLastPage;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtPagination.prototype._changeDetectorRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/pagination-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DtPaginationModule {\n}\nDtPaginationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DtPaginationModule });\nDtPaginationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DtPaginationModule_Factory(t) { return new (t || DtPaginationModule)(); }, imports: [[CommonModule, DtIconModule, DtButtonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DtPaginationModule, { declarations: function () { return [DtPagination]; }, imports: function () { return [CommonModule, DtIconModule, DtButtonModule]; }, exports: function () { return [DtPagination]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtPaginationModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, DtIconModule, DtButtonModule],\n                exports: [DtPagination],\n                declarations: [DtPagination]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: dynatrace-barista-components-pagination.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DtPagination, DtPaginationModule };\n\n//# sourceMappingURL=dynatrace-barista-components-pagination.js.map","import { TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { CdkRowDef, CdkRow, CDK_ROW_TEMPLATE, CdkCellDef, CdkColumnDef, CdkTable, CDK_TABLE_TEMPLATE, CdkTableModule, CdkHeaderCellDef, CdkHeaderRowDef, CdkHeaderRow, DataSource } from '@angular/cdk/table';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, EventEmitter, isDevMode, Input, Output, ChangeDetectorRef, Optional, SkipSelf, Host, ContentChildren, IterableDiffers, Inject, Attribute, NgModule, NgZone, ViewContainerRef, ViewChild, TemplateRef, forwardRef, ContentChild } from '@angular/core';\nimport { DtButtonModule } from '@dynatrace/barista-components/button';\nimport { _addCssClass, _removeCssClass, _replaceCssClass, mixinDisabled, isDefined, DtIndicator, _parseCssValue, isNumber, DtIndicatorModule, compareValues } from '@dynatrace/barista-components/core';\nimport { DtEmptyState, DtEmptyStateModule } from '@dynatrace/barista-components/empty-state';\nimport { DtFormFieldModule } from '@dynatrace/barista-components/form-field';\nimport { formatCount, DtFormattersModule } from '@dynatrace/barista-components/formatters';\nimport { DtIconModule } from '@dynatrace/barista-components/icon';\nimport { DtInputModule } from '@dynatrace/barista-components/input';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subscription, merge, Subject, BehaviorSubject, of, combineLatest } from 'rxjs';\nimport { takeUntil, startWith, filter, switchMap, mapTo, map } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data row definition for the dt-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/table';\nimport * as ɵngcc2 from '@dynatrace/barista-components/core';\nimport * as ɵngcc3 from '@dynatrace/barista-components/button';\nimport * as ɵngcc4 from '@dynatrace/barista-components/icon';\nimport * as ɵngcc5 from '@angular/cdk/platform';\nimport * as ɵngcc6 from '@angular/cdk/portal';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/collections';\nimport * as ɵngcc9 from '@dynatrace/barista-components/form-field';\nimport * as ɵngcc10 from '@dynatrace/barista-components/input';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"caption\"]]];\nconst _c2 = [\"caption\"];\nconst _c3 = [\"emptyStateTemplate\"];\nfunction DtTable_ng_template_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n} }\nfunction DtTable_div_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c4 = [[[\"\", \"dtTableEmptyState\", \"\"], [\"dt-empty-state\"], [\"\", \"dtCustomEmptyState\", \"\"]], [[\"\", \"dtTableLoadingState\", \"\"]]];\nconst _c5 = [\"[dtTableEmptyState], dt-empty-state, [dtCustomEmptyState]\", \"[dtTableLoadingState]\"];\nconst _c6 = [\"dtExpandableRow\"];\nfunction DtExpandableRow_ng_container_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n} if (rf & 2) {\n    const ctx_r17 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r17._expandableContentTemplate);\n} }\nconst _c7 = function (a0) { return { \"dt-expandable-row-expandable-expanded\": a0 }; };\nfunction DtSimpleTextColumn_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"dt-header-cell\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r19 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dt-sort-header\", ctx_r19.sortable);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r19.label || ctx_r19.name);\n} }\nfunction DtSimpleTextColumn_dt_cell_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"dt-cell\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 5);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r21 = ctx.$implicit;\n    const ctx_r20 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"dtIndicator\", ctx_r20._getIndicator(data_r21))(\"dtIndicatorColor\", ctx_r20._getIndicator(data_r21));\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r20._getData(data_r21));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r20._getData(data_r21));\n} }\nfunction DtSimpleNumberColumn_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"dt-header-cell\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r22 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dt-sort-header\", ctx_r22.sortable);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r22.label || ctx_r22.name);\n} }\nfunction DtSimpleNumberColumn_dt_cell_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"dt-cell\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 5);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r24 = ctx.$implicit;\n    const ctx_r23 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"dtIndicator\", ctx_r23._getIndicator(data_r24))(\"dtIndicatorColor\", ctx_r23._getIndicator(data_r24));\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r23._getData(data_r24));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r23._getData(data_r24));\n} }\nfunction DtFavoriteColumn_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"dt-header-cell\", 4);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r25 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dt-sort-header\", ctx_r25.sortable);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r25.label);\n} }\nfunction DtFavoriteColumn_dt_cell_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nconst _c8 = function (a0, a1) { return { favorite: a0, data: a1 }; };\nfunction DtFavoriteColumn_dt_cell_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"dt-cell\", 5);\n    ɵngcc0.ɵɵtemplate(1, DtFavoriteColumn_dt_cell_2_ng_container_1_Template, 1, 0, \"ng-container\", 6);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r29 = ctx.$implicit;\n    const ctx_r26 = ɵngcc0.ɵɵnextContext();\n    const _r27 = ɵngcc0.ɵɵreference(4);\n    ɵngcc0.ɵɵproperty(\"dtIndicator\", ctx_r26._getIndicator(data_r29))(\"dtIndicatorColor\", ctx_r26._getIndicator(data_r29));\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r26._isFavorite(data_r29));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r27)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(5, _c8, ctx_r26._isFavorite(data_r29), data_r29));\n} }\nfunction DtFavoriteColumn_ng_template_3_Template(rf, ctx) { if (rf & 1) {\n    const _r34 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function DtFavoriteColumn_ng_template_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r34); const data_r32 = ctx.data; const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33._toggleFavorite(data_r32); });\n    ɵngcc0.ɵɵelement(1, \"dt-icon\", 8);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const favorite_r31 = ctx.favorite;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"dt-favorite-column-filled-star\", favorite_r31)(\"dt-favorite-column-empty-star\", !favorite_r31);\n    ɵngcc0.ɵɵproperty(\"name\", favorite_r31 ? \"favorite\" : \"star-empty\");\n} }\nconst _c9 = [\"dt-sort-header\", \"\"];\nfunction DtSortHeader_button_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nfunction DtSortHeader_button_1_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵelement(1, \"dt-icon\", 8);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r40 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"name\", ctx_r40._sortIconName);\n} }\nfunction DtSortHeader_button_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"button\", 4);\n    ɵngcc0.ɵɵtemplate(1, DtSortHeader_button_1_ng_container_1_Template, 1, 0, \"ng-container\", 5);\n    ɵngcc0.ɵɵtemplate(2, DtSortHeader_button_1_div_2_Template, 2, 1, \"div\", 6);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r35 = ɵngcc0.ɵɵnextContext();\n    const _r37 = ɵngcc0.ɵɵreference(4);\n    ɵngcc0.ɵɵattribute(\"disabled\", ctx_r35._isDisabled || null)(\"aria-label\", ctx_r35.ariaLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r37);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r35._isDisabled);\n} }\nfunction DtSortHeader_ng_container_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nfunction DtSortHeader_ng_container_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, DtSortHeader_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 5);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    ɵngcc0.ɵɵnextContext();\n    const _r37 = ɵngcc0.ɵɵreference(4);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r37);\n} }\nfunction DtSortHeader_ng_template_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n} }\nconst _c10 = [[[\"dt-table-empty-state-image\"]], [[\"dt-table-empty-state-title\"]], [[\"dt-table-empty-state-message\"]]];\nconst _c11 = [\"dt-table-empty-state-image\", \"dt-table-empty-state-title\", \"dt-table-empty-state-message\"];\nclass DtRowDef extends CdkRowDef {\n}\nDtRowDef.ɵfac = function DtRowDef_Factory(t) { return ɵDtRowDef_BaseFactory(t || DtRowDef); };\nDtRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtRowDef, selectors: [[\"\", \"dtRowDef\", \"\"]], inputs: { columns: [\"dtRowDefColumns\", \"columns\"], when: [\"dtRowDefWhen\", \"when\"] }, exportAs: [\"dtRowDef\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkRowDef, useExisting: DtRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵDtRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DtRowDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[dtRowDef]',\n                exportAs: 'dtRowDef',\n                providers: [{ provide: CdkRowDef, useExisting: DtRowDef }],\n                inputs: ['columns: dtRowDefColumns', 'when: dtRowDefWhen']\n            }]\n    }], null, null); })();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass DtRow extends CdkRow {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        super();\n        this._elementRef = _elementRef;\n        this._cells = new Set();\n        this._cellStateChangesSub = Subscription.EMPTY;\n        DtRow._mostRecentRow = this;\n    }\n    /**\n     * \\@internal\n     * Returns the array of registered cells\n     * @return {?}\n     */\n    get _registeredCells() {\n        return Array.from(this._cells);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (DtRow._mostRecentRow === this) {\n            DtRow._mostRecentRow = null;\n        }\n        this._cellStateChangesSub.unsubscribe();\n    }\n    /**\n     * \\@internal\n     * The cell registers here and the listeners is added to apply the correct css classes\n     * @param {?} cell\n     * @return {?}\n     */\n    _registerCell(cell) {\n        this._cells.add(cell);\n        this._listenForStateChanges();\n    }\n    /**\n     * \\@internal\n     * The cell unregisters here and the listeners are updated\n     * @param {?} cell\n     * @return {?}\n     */\n    _unregisterCell(cell) {\n        this._cells.delete(cell);\n        this._listenForStateChanges();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenForStateChanges() {\n        this._cellStateChangesSub.unsubscribe();\n        /** @type {?} */\n        const cells = Array.from(this._cells.values());\n        this._cellStateChangesSub = merge(...cells.map((/**\n         * @param {?} cell\n         * @return {?}\n         */\n        (cell) => cell._stateChanges))).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._applyCssClasses(cells);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} cells\n     * @return {?}\n     */\n    _applyCssClasses(cells) {\n        /** @type {?} */\n        const hasError = !!cells.find((/**\n         * @param {?} cell\n         * @return {?}\n         */\n        (cell) => cell.hasError));\n        /** @type {?} */\n        const hasWarning = !!cells.find((/**\n         * @param {?} cell\n         * @return {?}\n         */\n        (cell) => cell.hasWarning));\n        /** @type {?} */\n        const hasIndicator = hasError || hasWarning;\n        if (hasIndicator) {\n            _addCssClass(this._elementRef.nativeElement, 'dt-table-row-indicator');\n        }\n        else {\n            _removeCssClass(this._elementRef.nativeElement, 'dt-table-row-indicator');\n        }\n        if (hasWarning) {\n            _replaceCssClass(this._elementRef.nativeElement, 'dt-color-error', 'dt-color-warning');\n        }\n        else {\n            _removeCssClass(this._elementRef.nativeElement, 'dt-color-warning');\n        }\n        if (hasError) {\n            _replaceCssClass(this._elementRef.nativeElement, 'dt-color-warning', 'dt-color-error');\n        }\n        else {\n            _removeCssClass(this._elementRef.nativeElement, 'dt-color-error');\n        }\n    }\n}\nDtRow.ɵfac = function DtRow_Factory(t) { return new (t || DtRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDtRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtRow, selectors: [[\"dt-row\"]], hostAttrs: [\"role\", \"row\", 1, \"dt-row\"], exportAs: [\"dtRow\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function DtRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], styles: [\"[_nghost-%COMP%]{min-height:40px;align-items:stretch;border:0;box-sizing:border-box;display:flex;position:relative}[_nghost-%COMP%]::after{display:inline-block;min-height:inherit;content:\\\"\\\"}[_nghost-%COMP%]:nth-child(even){background-color:#fff;border:1px solid #fff}[_nghost-%COMP%]:nth-child(odd){background-color:#f8f8f8;border:1px solid #f8f8f8}.dt-table-row-indicator[_nghost-%COMP%]::before{width:2px;height:calc(100% - 4px);content:\\\"\\\";display:block;position:absolute;left:2px;-ms-grid-row-align:center;align-self:center}.dt-table-interactive-rows[_nghost-%COMP%]:hover, .dt-table-interactive-rows   [_nghost-%COMP%]:hover{border:1px solid #898989}.dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#c41425}.dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before, .dt-theme-turquoise   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before, .dt-theme-turquoise.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#c41425}.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before, .dt-theme-turquoise   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before, .dt-theme-turquoise.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before, .dt-theme-turquoise.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#e74d59}.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before, .dt-theme-turquoise.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}.dt-theme-blue   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before, .dt-theme-blue.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#c41425}.dt-theme-blue   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before, .dt-theme-blue.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}.dt-theme-blue.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#e74d59}.dt-theme-blue.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}.dt-theme-purple   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before, .dt-theme-purple.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#c41425}.dt-theme-purple   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before, .dt-theme-purple.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}.dt-theme-purple.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#e74d59}.dt-theme-purple.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}.dt-theme-royalblue   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before, .dt-theme-royalblue.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#c41425}.dt-theme-royalblue   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before, .dt-theme-royalblue.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}.dt-theme-royalblue.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]::before{background-color:#e74d59}.dt-theme-royalblue.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]::before{background-color:#e6be00}\"], changeDetection: 0 });\n/**\n * \\@internal Necessary due to the fact that we cannot get the DtRow via normal DI\n */\nDtRow._mostRecentRow = null;\n/** @nocollapse */\nDtRow.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtRow, [{\n        type: Component,\n        args: [{\n                selector: 'dt-row',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    class: 'dt-row',\n                    role: 'row'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                exportAs: 'dtRow',\n                styles: [\":host{min-height:40px;align-items:stretch;border:0;box-sizing:border-box;display:flex;position:relative}:host::after{display:inline-block;min-height:inherit;content:\\\"\\\"}:host:nth-child(even){background-color:#fff;border:1px solid #fff}:host:nth-child(odd){background-color:#f8f8f8;border:1px solid #f8f8f8}:host.dt-table-row-indicator::before{width:2px;height:calc(100% - 4px);content:\\\"\\\";display:block;position:absolute;left:2px;-ms-grid-row-align:center;align-self:center}:host-context(.dt-table-interactive-rows):hover{border:1px solid #898989}:host.dt-table-row-indicator.dt-color-error::before{background-color:#c41425}:host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}.dt-theme-light :host.dt-table-row-indicator.dt-color-error::before,.dt-theme-turquoise :host.dt-table-row-indicator.dt-color-error::before,.dt-theme-turquoise.dt-theme-light :host.dt-table-row-indicator.dt-color-error::before{background-color:#c41425}.dt-theme-light :host.dt-table-row-indicator.dt-color-warning::before,.dt-theme-turquoise :host.dt-table-row-indicator.dt-color-warning::before,.dt-theme-turquoise.dt-theme-light :host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}.dt-theme-dark :host.dt-table-row-indicator.dt-color-error::before,.dt-theme-turquoise.dt-theme-dark :host.dt-table-row-indicator.dt-color-error::before{background-color:#e74d59}.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning::before,.dt-theme-turquoise.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}.dt-theme-blue :host.dt-table-row-indicator.dt-color-error::before,.dt-theme-blue.dt-theme-light :host.dt-table-row-indicator.dt-color-error::before{background-color:#c41425}.dt-theme-blue :host.dt-table-row-indicator.dt-color-warning::before,.dt-theme-blue.dt-theme-light :host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}.dt-theme-blue.dt-theme-dark :host.dt-table-row-indicator.dt-color-error::before{background-color:#e74d59}.dt-theme-blue.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}.dt-theme-purple :host.dt-table-row-indicator.dt-color-error::before,.dt-theme-purple.dt-theme-light :host.dt-table-row-indicator.dt-color-error::before{background-color:#c41425}.dt-theme-purple :host.dt-table-row-indicator.dt-color-warning::before,.dt-theme-purple.dt-theme-light :host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}.dt-theme-purple.dt-theme-dark :host.dt-table-row-indicator.dt-color-error::before{background-color:#e74d59}.dt-theme-purple.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}.dt-theme-royalblue :host.dt-table-row-indicator.dt-color-error::before,.dt-theme-royalblue.dt-theme-light :host.dt-table-row-indicator.dt-color-error::before{background-color:#c41425}.dt-theme-royalblue :host.dt-table-row-indicator.dt-color-warning::before,.dt-theme-royalblue.dt-theme-light :host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}.dt-theme-royalblue.dt-theme-dark :host.dt-table-row-indicator.dt-color-error::before{background-color:#e74d59}.dt-theme-royalblue.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning::before{background-color:#e6be00}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * \\@internal Necessary due to the fact that we cannot get the DtRow via normal DI\n     * @type {?}\n     */\n    DtRow._mostRecentRow;\n    /**\n     * @type {?}\n     * @protected\n     */\n    DtRow.prototype._cells;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtRow.prototype._cellStateChangesSub;\n    /**\n     * @type {?}\n     * @protected\n     */\n    DtRow.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/sort/sort-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright 2020 Dynatrace LLC\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * \\@internal\n * @return {?}\n */\nfunction getDtSortHeaderNotContainedWithinSortError() {\n    return Error(`DtSortHeader must be placed within a parent element with the DtSort directive.`);\n}\n/**\n * \\@internal\n * @param {?} direction\n * @return {?}\n */\nfunction getDtSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/sort/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The current sort state.\n * @record\n */\nfunction DtSortEvent() { }\nif (false) {\n    /**\n     * The id of the column being sorted.\n     * @type {?}\n     */\n    DtSortEvent.prototype.active;\n    /**\n     * The sort direction.\n     * @type {?}\n     */\n    DtSortEvent.prototype.direction;\n}\n/**\n * Boilerplate for applying mixins to DtSort.\n * \\@internal\n */\nclass DtSortBase {\n}\n/** @type {?} */\nconst _DtSortMixinBase = mixinDisabled(DtSortBase);\n/**\n * Container for DtSortHeaders to manage the sort state and provide default sort parameters.\n */\nclass DtSort extends _DtSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Used to notify any child components listening to state changes.\n         * \\@internal\n         */\n        this._stateChanges = new Subject();\n        /**\n         * \\@internal Initialized subject that fires on initialization and completes on destroy.\n         */\n        this._initialized = new BehaviorSubject(false);\n        /**\n         * The direction to set when an DtSortHeader is initially sorted.\n         * May be overriden by the DtSortHeader's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active DtSortHeader.\n     * @return {?}\n     */\n    get direction() {\n        return this._direction;\n    }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (isDevMode() &&\n            direction &&\n            direction !== 'asc' &&\n            direction !== 'desc') {\n            throw getDtSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortableOrActive\n     * @param {?=} direction\n     * @return {?}\n     */\n    sort(sortableOrActive, direction) {\n        if (typeof sortableOrActive === 'string') {\n            this.active = sortableOrActive;\n            this.direction = (/** @type {?} */ (direction));\n        }\n        else {\n            /** @type {?} */\n            const sortable = sortableOrActive;\n            if (this.active !== sortable.id) {\n                this.active = sortable.id;\n                this.direction = sortable.start ? sortable.start : this.start;\n            }\n            else {\n                this.direction = this.getNextSortDirection(sortable);\n            }\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        /** @type {?} */\n        const sortDirectionCycle = getSortDirection(sortable.start || this.start);\n        // Get and return the next direction in the cycle\n        /** @type {?} */\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._initialized.next(true);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // If the active column is set initially but the target direction is not defined\n        // we need to default the sort direction to the start direction.\n        if (isDefined(changes.active) &&\n            changes.active.firstChange &&\n            this.direction === '') {\n            this.direction = this.start;\n        }\n        // If active is bound and being changed after initialization\n        // we need to update the sorter.\n        if (isDefined(changes.active) && !changes.active.firstChange) {\n            this.sort(this.active, this.direction);\n        }\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._initialized.complete();\n    }\n}\nDtSort.ɵfac = function DtSort_Factory(t) { return ɵDtSort_BaseFactory(t || DtSort); };\nDtSort.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtSort, selectors: [[\"\", \"dtSort\", \"\"]], inputs: { disabled: [\"dtSortDisabled\", \"disabled\"], start: [\"dtSortStart\", \"start\"], direction: [\"dtSortDirection\", \"direction\"], active: [\"dtSortActive\", \"active\"] }, outputs: { sortChange: \"dtSortChange\" }, exportAs: [\"dtSort\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nDtSort.propDecorators = {\n    active: [{ type: Input, args: ['dtSortActive',] }],\n    start: [{ type: Input, args: ['dtSortStart',] }],\n    direction: [{ type: Input, args: ['dtSortDirection',] }],\n    sortChange: [{ type: Output, args: ['dtSortChange',] }]\n};\nconst ɵDtSort_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DtSort);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtSort, [{\n        type: Directive,\n        args: [{\n                selector: '[dtSort]',\n                exportAs: 'dtSort',\n                inputs: ['disabled: dtSortDisabled']\n            }]\n    }], null, { start: [{\n            type: Input,\n            args: ['dtSortStart']\n        }], sortChange: [{\n            type: Output,\n            args: ['dtSortChange']\n        }], direction: [{\n            type: Input,\n            args: ['dtSortDirection']\n        }], active: [{\n            type: Input,\n            args: ['dtSortActive']\n        }] }); })();\nif (false) {\n    /**\n     * Used to notify any child components listening to state changes.\n     * \\@internal\n     * @type {?}\n     */\n    DtSort.prototype._stateChanges;\n    /**\n     * \\@internal Initialized subject that fires on initialization and completes on destroy.\n     * @type {?}\n     */\n    DtSort.prototype._initialized;\n    /**\n     * The id of the most recently sorted DtSortHeader.\n     * @type {?}\n     */\n    DtSort.prototype.active;\n    /**\n     * The direction to set when an DtSortHeader is initially sorted.\n     * May be overriden by the DtSortHeader's sort start.\n     * @type {?}\n     */\n    DtSort.prototype.start;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtSort.prototype._direction;\n    /**\n     * Event emitted when the user changes either the active sort or sort direction.\n     * @type {?}\n     */\n    DtSort.prototype.sortChange;\n}\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @return {?}\n */\nfunction getSortDirection(start) {\n    /** @type {?} */\n    const sortOrder = ['asc', 'desc'];\n    if (start === 'desc') {\n        sortOrder.reverse();\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cell.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the dt-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass DtCellDef extends CdkCellDef {\n}\nDtCellDef.ɵfac = function DtCellDef_Factory(t) { return ɵDtCellDef_BaseFactory(t || DtCellDef); };\nDtCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtCellDef, selectors: [[\"\", \"dtCellDef\", \"\"]], exportAs: [\"dtCellDef\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkCellDef, useExisting: DtCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵDtCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DtCellDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[dtCellDef]',\n                exportAs: 'dtCellDef',\n                providers: [{ provide: CdkCellDef, useExisting: DtCellDef }]\n            }]\n    }], null, null); })();\n/**\n * Column definition for the dt-table.\n * Defines a set of cells available for a table column.\n */\nclass DtColumnDef extends CdkColumnDef {\n    constructor() {\n        super(...arguments);\n        /**\n         * The alignment of the colums\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.align = 'left';\n        /**\n         * \\@internal Alignment subject which fires with changes to the alignment input.\n         */\n        this._stateChanges = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n}\nDtColumnDef.ɵfac = function DtColumnDef_Factory(t) { return ɵDtColumnDef_BaseFactory(t || DtColumnDef); };\nDtColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtColumnDef, selectors: [[\"\", \"dtColumnDef\", \"\"]], inputs: { align: [\"dtColumnAlign\", \"align\"], name: [\"dtColumnDef\", \"name\"], proportion: [\"dtColumnProportion\", \"proportion\"], minWidth: [\"dtColumnMinWidth\", \"minWidth\"] }, exportAs: [\"dtColumnDef\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkColumnDef, useExisting: DtColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nDtColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['dtColumnDef',] }],\n    align: [{ type: Input, args: ['dtColumnAlign',] }],\n    proportion: [{ type: Input, args: ['dtColumnProportion',] }],\n    minWidth: [{ type: Input, args: ['dtColumnMinWidth',] }]\n};\nconst ɵDtColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DtColumnDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[dtColumnDef]',\n                exportAs: 'dtColumnDef',\n                providers: [{ provide: CdkColumnDef, useExisting: DtColumnDef }]\n            }]\n    }], null, { align: [{\n            type: Input,\n            args: ['dtColumnAlign']\n        }], name: [{\n            type: Input,\n            args: ['dtColumnDef']\n        }], proportion: [{\n            type: Input,\n            args: ['dtColumnProportion']\n        }], minWidth: [{\n            type: Input,\n            args: ['dtColumnMinWidth']\n        }] }); })();\nif (false) {\n    /**\n     * Unique name for this column.\n     * @type {?}\n     */\n    DtColumnDef.prototype.name;\n    /**\n     * The alignment of the colums\n     * @type {?}\n     */\n    DtColumnDef.prototype.align;\n    /**\n     * The proportion of the column compared to the others.\n     * @type {?}\n     */\n    DtColumnDef.prototype.proportion;\n    /**\n     * The min width of the column.\n     * @type {?}\n     */\n    DtColumnDef.prototype.minWidth;\n    /**\n     * \\@internal Alignment subject which fires with changes to the alignment input.\n     * @type {?}\n     */\n    DtColumnDef.prototype._stateChanges;\n}\n/**\n * Cell template container that adds the right classes and role.\n */\nclass DtCell {\n    /**\n     * @param {?} _columnDef\n     * @param {?} _changeDetectorRef\n     * @param {?} elem\n     * @param {?=} dtSortable\n     * @param {?=} _dtIndicator\n     */\n    constructor(_columnDef, _changeDetectorRef, elem, dtSortable, _dtIndicator) {\n        this._columnDef = _columnDef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dtIndicator = _dtIndicator;\n        /**\n         * \\@internal\n         * Emits whenever the indicators change or one of the inputs on the indicators changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * \\@internal\n         * indicates if a cell is sorted, used for displaying a bold value\n         */\n        this._isSorted = false;\n        this._sortChangeSubscription = Subscription.EMPTY;\n        this._destroy = new Subject();\n        if (dtSortable) {\n            this._isSorted = dtSortable.active === this._columnDef.name;\n            dtSortable.sortChange\n                .pipe(takeUntil(this._destroy))\n                .subscribe((/**\n             * @param {?} sort\n             * @return {?}\n             */\n            (sort) => {\n                // If event is void, it is being unregisterd.\n                this._isSorted = sort.active === this._columnDef.name;\n                this._changeDetectorRef.detectChanges();\n            }));\n        }\n        this._columnDef._stateChanges\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            _updateDtColumnStyles(this._columnDef, elem);\n        }));\n        if (DtRow._mostRecentRow) {\n            this._row = DtRow._mostRecentRow;\n            this._row._registerCell(this);\n        }\n    }\n    /**\n     * Whether the cell has an error\n     * @return {?}\n     */\n    get hasError() {\n        return this._hasIndicator('error');\n    }\n    /**\n     * Whether the cell has a warning\n     * @return {?}\n     */\n    get hasWarning() {\n        return this._hasIndicator('warning');\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        /** @type {?} */\n        const indicatorChanges = this._dtIndicator\n            ? this._dtIndicator._stateChanges\n            : this._indicators.changes.pipe(startWith(null), filter((/**\n             * @return {?}\n             */\n            () => !!this._indicators.length)), switchMap((/**\n             * @return {?}\n             */\n            () => merge(...this._indicators.map((/**\n             * @param {?} indicator\n             * @return {?}\n             */\n            (indicator) => indicator._stateChanges))))));\n        indicatorChanges.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._stateChanges.next();\n        }));\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._sortChangeSubscription.unsubscribe();\n        this._destroy.next();\n        this._destroy.complete();\n        if (this._row) {\n            this._row._unregisterCell(this);\n        }\n    }\n    /**\n     * @private\n     * @param {?} indicatorType\n     * @return {?}\n     */\n    _hasIndicator(indicatorType) {\n        if (this._dtIndicator) {\n            return (this._dtIndicator.active && this._dtIndicator.color === indicatorType);\n        }\n        return (this._indicators &&\n            isDefined(this._indicators.find((/**\n             * @param {?} indicator\n             * @return {?}\n             */\n            (indicator) => indicator.active && indicator.color === indicatorType))));\n    }\n}\nDtCell.ɵfac = function DtCell_Factory(t) { return new (t || DtCell)(ɵngcc0.ɵɵdirectiveInject(DtColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DtSort, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DtIndicator, 9)); };\nDtCell.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtCell, selectors: [[\"dt-cell\"]], contentQueries: function DtCell_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DtIndicator, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._indicators = _t);\n    } }, hostAttrs: [\"role\", \"gridcell\", 1, \"dt-cell\"], hostVars: 2, hostBindings: function DtCell_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dt-cell-sorted\", ctx._isSorted);\n    } }, exportAs: [\"dtCell\"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DtCell_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".dt-cell-sorted[_nghost-%COMP%]{font-weight:600}.dt-table.dt-cell[_nghost-%COMP%], .dt-table   .dt-cell[_nghost-%COMP%]{overflow:hidden;word-wrap:break-word;position:relative;font-variant:tabular-nums;flex:1;display:flex;align-items:center;justify-content:flex-start;padding:8px 12px}.dt-table.dt-cell.dt-column-sorted[_nghost-%COMP%], .dt-table   .dt-cell.dt-column-sorted[_nghost-%COMP%]{color:#191919;font-weight:700}.dt-table.dt-cell.dt-table-column-align-right[_nghost-%COMP%], .dt-table   .dt-cell.dt-table-column-align-right[_nghost-%COMP%]{justify-content:flex-end;text-align:right}.dt-table.dt-cell.dt-table-column-align-center[_nghost-%COMP%], .dt-table   .dt-cell.dt-table-column-align-center[_nghost-%COMP%]{justify-content:center;text-align:center}.dt-tree-table.dt-cell[_nghost-%COMP%], .dt-tree-table   .dt-cell[_nghost-%COMP%]{overflow:hidden;word-wrap:break-word;position:relative;font-variant:tabular-nums;padding-left:12px;padding-right:12px;display:table-cell}.dt-tree-table.dt-cell.dt-column-sorted[_nghost-%COMP%], .dt-tree-table   .dt-cell.dt-column-sorted[_nghost-%COMP%]{color:#191919;font-weight:700}.dt-tree-table.dt-cell.dt-table-column-align-right[_nghost-%COMP%], .dt-tree-table   .dt-cell.dt-table-column-align-right[_nghost-%COMP%]{text-align:right}.dt-tree-table.dt-cell.dt-table-column-align-center[_nghost-%COMP%], .dt-tree-table   .dt-cell.dt-table-column-align-center[_nghost-%COMP%]{text-align:center}[_nghost-%COMP%]     .dt-info-group .dt-info-group-icon .dt-icon svg{fill:#454646}\"], changeDetection: 0 });\n/** @nocollapse */\nDtCell.ctorParameters = () => [\n    { type: DtColumnDef },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: DtSort, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: DtIndicator, decorators: [{ type: Optional }, { type: Host }] }\n];\nDtCell.propDecorators = {\n    _indicators: [{ type: ContentChildren, args: [DtIndicator, { descendants: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtCell, [{\n        type: Component,\n        args: [{\n                selector: 'dt-cell',\n                template: '<ng-content></ng-content>',\n                host: {\n                    class: 'dt-cell',\n                    role: 'gridcell',\n                    '[class.dt-cell-sorted]': '_isSorted'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                exportAs: 'dtCell',\n                styles: [\":host.dt-cell-sorted{font-weight:600}:host-context(.dt-table).dt-cell{overflow:hidden;word-wrap:break-word;position:relative;font-variant:tabular-nums;flex:1;display:flex;align-items:center;justify-content:flex-start;padding:8px 12px}:host-context(.dt-table).dt-cell.dt-column-sorted{color:#191919;font-weight:700}:host-context(.dt-table).dt-cell.dt-table-column-align-right{justify-content:flex-end;text-align:right}:host-context(.dt-table).dt-cell.dt-table-column-align-center{justify-content:center;text-align:center}:host-context(.dt-tree-table).dt-cell{overflow:hidden;word-wrap:break-word;position:relative;font-variant:tabular-nums;padding-left:12px;padding-right:12px;display:table-cell}:host-context(.dt-tree-table).dt-cell.dt-column-sorted{color:#191919;font-weight:700}:host-context(.dt-tree-table).dt-cell.dt-table-column-align-right{text-align:right}:host-context(.dt-tree-table).dt-cell.dt-table-column-align-center{text-align:center}:host ::ng-deep .dt-info-group .dt-info-group-icon .dt-icon svg{fill:#454646}\"]\n            }]\n    }], function () { return [{ type: DtColumnDef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: DtSort, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc2.DtIndicator, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }]; }, { _indicators: [{\n            type: ContentChildren,\n            args: [DtIndicator, { descendants: true }]\n        }] }); })();\nif (false) {\n    /**\n     * \\@internal A list of references of the applied indicator.\n     * @type {?}\n     */\n    DtCell.prototype._indicators;\n    /**\n     * \\@internal\n     * Emits whenever the indicators change or one of the inputs on the indicators changes\n     * @type {?}\n     */\n    DtCell.prototype._stateChanges;\n    /**\n     * \\@internal\n     * The parent row\n     * @type {?}\n     */\n    DtCell.prototype._row;\n    /**\n     * \\@internal\n     * indicates if a cell is sorted, used for displaying a bold value\n     * @type {?}\n     */\n    DtCell.prototype._isSorted;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtCell.prototype._sortChangeSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtCell.prototype._destroy;\n    /** @type {?} */\n    DtCell.prototype._columnDef;\n    /** @type {?} */\n    DtCell.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtCell.prototype._dtIndicator;\n}\n/** @type {?} */\nconst ALIGNMENT_CAST_MAP = new Map([\n    ['icon', 'center'],\n    ['control', 'center'],\n    ['number', 'right'],\n    ['date', 'right'],\n    ['ip', 'right'],\n]);\n/**\n * Maps the provided alignment to a css align provided by the cast map, if there's no coincidence\n * return the provided one. In the latter case will be handle with the default left-aligned SCSS style.\n *\n * This will be also 'type checked' with the Template Compiler feature from \\@Angular6.\n * @param {?} value\n * @return {?}\n */\nfunction coerceAlignment(value) {\n    return (ALIGNMENT_CAST_MAP.get((/** @type {?} */ (value))) ||\n        ((/** @type {?} */ (value))));\n}\n/**\n * \\@internal Sets the css classes on a DtColumn\n * @param {?} columnDef\n * @param {?} elementRef\n * @return {?}\n */\nfunction _setDtColumnCssClasses(columnDef, elementRef) {\n    const { align, cssClassFriendlyName } = columnDef;\n    /** @type {?} */\n    const cssAlignmentClass = coerceAlignment(align);\n    _removeCssClass(elementRef.nativeElement, 'dt-table-column-align-left');\n    _removeCssClass(elementRef.nativeElement, 'dt-table-column-align-center');\n    _removeCssClass(elementRef.nativeElement, 'dt-table-column-align-right');\n    _addCssClass(elementRef.nativeElement, `dt-table-column-align-${cssAlignmentClass}`);\n    _addCssClass(elementRef.nativeElement, `dt-table-column-${cssClassFriendlyName}`);\n}\n/**\n * \\@internal Set classes name and styles props for columns.\n * @param {?} columnDef\n * @param {?} elementRef\n * @return {?}\n */\nfunction _updateDtColumnStyles(columnDef, elementRef) {\n    _setDtColumnCssClasses(columnDef, elementRef);\n    /** @type {?} */\n    const element = elementRef.nativeElement;\n    if (element && element.style) {\n        const { proportion, minWidth } = columnDef;\n        /** @type {?} */\n        const setProportion = coerceNumberProperty(proportion);\n        if (setProportion > 0) {\n            element.style.flexGrow = setProportion + '';\n            element.style.flexShrink = setProportion + '';\n        }\n        /** @type {?} */\n        const valueAndUnit = _parseCssValue(minWidth);\n        if (valueAndUnit !== null) {\n            element.style.minWidth = `${valueAndUnit.value}${valueAndUnit.unit}`;\n        }\n        else {\n            element.style.minWidth = '';\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/expandable/expandable-cell.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell template that adds the right classes, role and static content for the details cell,\n * which can be used to indicate that a table row is expandable.\n */\nclass DtExpandableCell extends DtCell {\n}\nDtExpandableCell.ɵfac = function DtExpandableCell_Factory(t) { return ɵDtExpandableCell_BaseFactory(t || DtExpandableCell); };\nDtExpandableCell.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtExpandableCell, selectors: [[\"dt-expandable-cell\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"dt-expandable-cell\"], inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledBy: [\"aria-labelledby\", \"ariaLabelledBy\"] }, exportAs: [\"dtExpandableCell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [[\"dt-icon-button\", \"\", \"variant\", \"nested\", 3, \"click\"], [\"name\", \"dropdownopen\", 1, \"dt-expandable-cell-dropdown\"]], template: function DtExpandableCell_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function DtExpandableCell_Template_button_click_0_listener() { return ctx._row.expanded ? ctx._row._collapse() : ctx._row._expandViaInteraction(); });\n        ɵngcc0.ɵɵelement(1, \"dt-icon\", 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledBy);\n    } }, directives: [ɵngcc3.DtButton, ɵngcc4.DtIcon], styles: [\".dt-expandable-cell[_nghost-%COMP%]{overflow:hidden;word-wrap:break-word;position:relative;font-variant:tabular-nums;flex:1;display:flex;align-items:center;justify-content:flex-start;padding:8px 12px}.dt-expandable-cell.dt-column-sorted[_nghost-%COMP%]{color:#191919;font-weight:700}.dt-expandable-cell.dt-table-column-align-right[_nghost-%COMP%]{justify-content:flex-end;text-align:right}.dt-expandable-cell.dt-table-column-align-center[_nghost-%COMP%]{justify-content:center;text-align:center}.dt-expandable-cell[_nghost-%COMP%]   .dt-expandable-cell-dropdown[_ngcontent-%COMP%]{width:20px;height:20px;transform:rotate(0);transition:transform 225ms}.dt-expandable-cell.dt-expandable-cell-expanded[_nghost-%COMP%]   .dt-expandable-cell-dropdown[_ngcontent-%COMP%]{transform:rotate(180deg);transition:transform 225ms}\"], changeDetection: 0 });\nDtExpandableCell.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledBy: [{ type: Input, args: ['aria-labelledby',] }]\n};\nconst ɵDtExpandableCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DtExpandableCell);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtExpandableCell, [{\n        type: Component,\n        args: [{\n                selector: 'dt-expandable-cell',\n                template: \"<button\\n  dt-icon-button\\n  variant=\\\"nested\\\"\\n  [attr.aria-label]=\\\"ariaLabel\\\"\\n  [attr.aria-labelledby]=\\\"ariaLabelledBy\\\"\\n  (click)=\\\"_row.expanded ? _row._collapse() : _row._expandViaInteraction()\\\"\\n>\\n  <dt-icon class=\\\"dt-expandable-cell-dropdown\\\" name=\\\"dropdownopen\\\"></dt-icon>\\n</button>\\n\",\n                host: {\n                    class: 'dt-expandable-cell',\n                    role: 'gridcell'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                preserveWhitespaces: false,\n                exportAs: 'dtExpandableCell',\n                styles: [\":host.dt-expandable-cell{overflow:hidden;word-wrap:break-word;position:relative;font-variant:tabular-nums;flex:1;display:flex;align-items:center;justify-content:flex-start;padding:8px 12px}:host.dt-expandable-cell.dt-column-sorted{color:#191919;font-weight:700}:host.dt-expandable-cell.dt-table-column-align-right{justify-content:flex-end;text-align:right}:host.dt-expandable-cell.dt-table-column-align-center{justify-content:center;text-align:center}:host.dt-expandable-cell .dt-expandable-cell-dropdown{width:20px;height:20px;transform:rotate(0);transition:transform 225ms}:host.dt-expandable-cell.dt-expandable-cell-expanded .dt-expandable-cell-dropdown{transform:rotate(180deg);transition:transform 225ms}\"]\n            }]\n    }], null, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledBy: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }] }); })();\nif (false) {\n    /**\n     * \\@internal\n     * Retyped for the AOT compiler, as _row member will always be a DtExpandableRow\n     * for the DtExpandable cell.\n     * @type {?}\n     */\n    DtExpandableCell.prototype._row;\n    /**\n     * Aria label applied to the cell for better accessibility.\n     * @type {?}\n     */\n    DtExpandableCell.prototype.ariaLabel;\n    /**\n     * Aria reference to a label describing the cell.\n     * @type {?}\n     */\n    DtExpandableCell.prototype.ariaLabelledBy;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/base-table.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\n// tslint:disable-next-line: class-name\nclass _DtTableBase extends CdkTable {\n    /**\n     * @param {?} differs\n     * @param {?} changeDetectorRef\n     * @param {?} elementRef\n     * @param {?} document\n     * @param {?} platform\n     * @param {?} _role\n     * @param {?=} interactiveRows\n     */\n    constructor(differs, changeDetectorRef, elementRef, \n    // tslint:disable-next-line: no-any\n    document, platform, _role, interactiveRows) {\n        // tslint:disable-next-line: no-any\n        super(differs, changeDetectorRef, elementRef, _role, (/** @type {?} */ (((/** @type {?} */ (null))))), // tslint:disable-line:no-any\n        document, platform);\n        this._role = _role;\n        this._interactiveRows = false;\n        this.interactiveRows = (/** @type {?} */ (interactiveRows));\n    }\n    /**\n     * Whether the defined rows are interactive.\n     * @return {?}\n     */\n    get interactiveRows() {\n        return this._interactiveRows;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set interactiveRows(value) {\n        this._interactiveRows = coerceBooleanProperty(value);\n    }\n}\n_DtTableBase.ɵfac = function _DtTableBase_Factory(t) { return new (t || _DtTableBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Platform), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵinjectAttribute('interactiveRows')); };\n_DtTableBase.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: _DtTableBase, selectors: [[\"dt-table-base\"]], inputs: { interactiveRows: \"interactiveRows\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function _DtTableBase_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementContainer(1, 0);\n        ɵngcc0.ɵɵelementContainer(2, 1);\n        ɵngcc0.ɵɵelementContainer(3, 2);\n    } }, directives: [ɵngcc1.HeaderRowOutlet, ɵngcc1.DataRowOutlet, ɵngcc1.FooterRowOutlet], encapsulation: 2 });\n/** @nocollapse */\n_DtTableBase.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Boolean, decorators: [{ type: Attribute, args: ['interactiveRows',] }] }\n];\n_DtTableBase.propDecorators = {\n    interactiveRows: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_DtTableBase, [{\n        type: Component,\n        args: [{\n                selector: 'dt-table-base',\n                template: CDK_TABLE_TEMPLATE\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.Platform }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: Boolean, decorators: [{\n                type: Attribute,\n                args: ['interactiveRows']\n            }] }]; }, { interactiveRows: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    _DtTableBase.prototype._interactiveRows;\n    /**\n     * @type {?}\n     * @protected\n     */\n    _DtTableBase.prototype._role;\n}\n// tslint:disable-next-line: class-name\nclass _DtTableBaseModule {\n}\n_DtTableBaseModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _DtTableBaseModule });\n_DtTableBaseModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _DtTableBaseModule_Factory(t) { return new (t || _DtTableBaseModule)(); }, imports: [[CdkTableModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_DtTableBaseModule, { declarations: function () { return [_DtTableBase]; }, imports: function () { return [CdkTableModule]; }, exports: function () { return [_DtTableBase]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_DtTableBaseModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTableModule],\n                exports: [_DtTableBase],\n                declarations: [_DtTableBase]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/table.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nfunction SimpleColumnsAccessorMaps() { }\nif (false) {\n    /** @type {?} */\n    SimpleColumnsAccessorMaps.prototype.displayAccessorMap;\n    /** @type {?} */\n    SimpleColumnsAccessorMaps.prototype.sortAccessorMap;\n    /** @type {?} */\n    SimpleColumnsAccessorMaps.prototype.comparatorMap;\n}\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * @template T\n */\nclass DtTable extends _DtTableBase {\n    /**\n     * @param {?} differs\n     * @param {?} changeDetectorRef\n     * @param {?} elementRef\n     * @param {?} role\n     * @param {?} _ngZone\n     * @param {?} document\n     * @param {?} platform\n     * @param {?} _viewContainerRef\n     */\n    constructor(differs, changeDetectorRef, elementRef, role, \n    /** @breaking-change: ngZone is no longer necessary in the table injectors, will be removed with 7.0.0 */\n    _ngZone, \n    // tslint:disable-next-line: no-any\n    document, platform, _viewContainerRef) {\n        super(differs, changeDetectorRef, elementRef, document, platform, role);\n        this._viewContainerRef = _viewContainerRef;\n        this._destroy$ = new Subject();\n        /**\n         * Sort accessor map that holds all sort accessor functions from the registered simple columns.\n         */\n        this._sortAccessorMap = new Map();\n        /**\n         * Sort accessor map that holds all display accessor functions from the registered simple columns.\n         */\n        this._displayAccessorMap = new Map();\n        /**\n         * Sort accessor map that holds all comparator accessor functions from the registered simple columns.\n         */\n        this._comparatorFunctionMap = new Map();\n        /**\n         * \\@internal A generated UID\n         */\n        this._uniqueId = `dt-table-${nextUniqueId++}`;\n        /**\n         * \\@internal Stream of all simple dataAccessor functions for all SimpleColumns\n         */\n        this._dataAccessors = new BehaviorSubject({\n            displayAccessorMap: this._displayAccessorMap,\n            sortAccessorMap: this._sortAccessorMap,\n            comparatorMap: this._comparatorFunctionMap,\n        });\n        /**\n         * Subscription of attached stream of the portal outlet\n         */\n        this._portalOutletSubscription = Subscription.EMPTY;\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied.\n         */\n        this.stickyCssClass = 'dt-table-sticky';\n    }\n    /**\n     * Whether the loading state should be displayed.\n     * @return {?}\n     */\n    get loading() {\n        return this._loading;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set loading(value) {\n        this._loading = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple rows can be expanded at a time.\n     * @return {?}\n     */\n    get multiExpand() {\n        return this._multiExpand;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiExpand(value) {\n        this._multiExpand = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the datasource is empty.\n     * @return {?}\n     */\n    get isEmptyDataSource() {\n        return !(this._data && this._data.length);\n    }\n    /**\n     * Updates the dataAccessors subject for the connected datasource.\n     * @private\n     * @return {?}\n     */\n    _updateAccessors() {\n        this._dataAccessors.next({\n            displayAccessorMap: this._displayAccessorMap,\n            sortAccessorMap: this._sortAccessorMap,\n            comparatorMap: this._comparatorFunctionMap,\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy$.next();\n        this._destroy$.complete();\n        this._portalOutletSubscription.unsubscribe();\n    }\n    /**\n     * Renders rows based on the table's latest set of data,\n     * which was either provided directly as an input or retrieved\n     * through an Observable stream (directly or from a DataSource).\n     * @return {?}\n     */\n    renderRows() {\n        super.renderRows();\n        // no need if there is no empty state provided via content projection\n        if (!this._emptyState.first) {\n            return;\n        }\n        // if we have a subscription we need to unsubscribe to re-subscribe later on\n        // we need to subscribe in this function in case that there is no other hook\n        // where we can hook into the cdk Table\n        if (this._portalOutletSubscription) {\n            this._portalOutletSubscription.unsubscribe();\n        }\n        this._portalOutletSubscription = this._portalOutlet.attached\n            .pipe(mapTo(this._emptyState.first))\n            .subscribe((/**\n         * @param {?} emptyState\n         * @return {?}\n         */\n        (emptyState) => {\n            // Update the layout of the empty state after it was attached\n            emptyState._visible = true;\n        }));\n        if (this.isEmptyDataSource) {\n            if (!this._portalOutlet.hasAttached()) {\n                /** @type {?} */\n                const template = new TemplatePortal(this._emptyStateTemplate, this._viewContainerRef);\n                this._portalOutlet.attachTemplatePortal(template);\n            }\n            this._emptyState.first._visible = true;\n        }\n        else {\n            // ned to unset the visibility to have every time the component will be attached a fading animation.\n            this._emptyState.first._visible = false;\n            this._portalOutlet.detach();\n        }\n    }\n    /**\n     * Update the column accessor functions\n     * @param {?} name\n     * @param {?=} displayAccessor\n     * @param {?=} sortAccessor\n     * @param {?=} comparatorFunction\n     * @return {?}\n     */\n    _updateColumnAccessors(name, displayAccessor, sortAccessor, comparatorFunction) {\n        if (displayAccessor) {\n            this._displayAccessorMap.set(name, displayAccessor);\n        }\n        else {\n            this._displayAccessorMap.delete(name);\n        }\n        if (sortAccessor) {\n            this._sortAccessorMap.set(name, sortAccessor);\n        }\n        else {\n            this._sortAccessorMap.delete(name);\n        }\n        if (comparatorFunction) {\n            this._comparatorFunctionMap.set(name, comparatorFunction);\n        }\n        else {\n            this._comparatorFunctionMap.delete(name);\n        }\n        this._updateAccessors();\n    }\n    /**\n     * \\@internal Helper function for simple columns to unregister their sort accessors.\n     * @param {?} name\n     * @return {?}\n     */\n    _removeColumnAccessors(name) {\n        this._sortAccessorMap.delete(name);\n        this._displayAccessorMap.delete(name);\n        this._comparatorFunctionMap.delete(name);\n        this._updateAccessors();\n    }\n}\nDtTable.ɵfac = function DtTable_Factory(t) { return new (t || DtTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nDtTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtTable, selectors: [[\"dt-table\"]], contentQueries: function DtTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DtEmptyState, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._emptyState = _t);\n    } }, viewQuery: function DtTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c3, true);\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._emptyStateTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"dt-table\"], hostVars: 2, hostBindings: function DtTable_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dt-table-interactive-rows\", ctx.interactiveRows);\n    } }, inputs: { loading: \"loading\", multiExpand: \"multiExpand\" }, exportAs: [\"dtTable\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 7, vars: 1, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"], [\"emptyStateTemplate\", \"\"], [\"cdkPortalOutlet\", \"\"], [\"class\", \"dt-table-float-loading\", 4, \"ngIf\"], [1, \"dt-table-float-loading\"]], template: function DtTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementContainer(0, 0);\n        ɵngcc0.ɵɵelementContainer(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 2);\n        ɵngcc0.ɵɵtemplate(3, DtTable_ng_template_3_Template, 1, 0, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementContainer(5, 4);\n        ɵngcc0.ɵɵtemplate(6, DtTable_div_6_Template, 2, 0, \"div\", 5);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(6);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.loading);\n    } }, directives: [ɵngcc1.HeaderRowOutlet, ɵngcc1.DataRowOutlet, ɵngcc1.FooterRowOutlet, ɵngcc6.CdkPortalOutlet, ɵngcc7.NgIf], styles: [\".dt-header-cell{font-family:BerninaSansWeb,OpenSans,sans-serif;font-size:12px;line-height:1.6;color:#6d6d6d;font-weight:600;word-break:normal;padding:2px;overflow:hidden}.dt-table[_nghost-%COMP%]     .dt-header-cell, .dt-table   [_nghost-%COMP%]     .dt-header-cell{overflow:hidden;word-wrap:break-word;position:relative;font-variant:tabular-nums;flex:1;display:flex;align-items:center;justify-content:flex-start;align-items:flex-end;border-bottom:1px solid #e6e6e6;padding:8px 12px}.dt-table[_nghost-%COMP%]     .dt-header-cell.dt-column-sorted, .dt-table   [_nghost-%COMP%]     .dt-header-cell.dt-column-sorted{color:#191919;font-weight:700}.dt-table[_nghost-%COMP%]     .dt-header-cell.dt-table-column-align-right, .dt-table   [_nghost-%COMP%]     .dt-header-cell.dt-table-column-align-right{justify-content:flex-end;text-align:right}.dt-table[_nghost-%COMP%]     .dt-header-cell.dt-table-column-align-center, .dt-table   [_nghost-%COMP%]     .dt-header-cell.dt-table-column-align-center{justify-content:center;text-align:center}.dt-table-interactive-rows[_nghost-%COMP%]:hover, .dt-table-interactive-rows   [_nghost-%COMP%]:hover{color:#191919}  .dt-cell .dt-info-group{align-items:center;padding:4px 0}  .dt-cell .dt-info-group .dt-info-group-content{line-height:22px}  .dt-cell .dt-info-group .dt-info-group-title{font-size:16px;line-height:22px}[_nghost-%COMP%]{display:flex;flex-flow:column nowrap;min-width:100%;position:relative;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:14px;line-height:1.6}[_nghost-%COMP%]   .dt-table-float-loading[_ngcontent-%COMP%]{position:absolute;top:0;display:flex;align-items:center;justify-content:center;height:100%;width:100%}[_nghost-%COMP%]     .dt-empty-state{margin:8px auto;width:calc(100% - 16px)}.dt-table-search + [_nghost-%COMP%]{margin-top:8px}\"], changeDetection: 0 });\n/** @nocollapse */\nDtTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: ViewContainerRef }\n];\nDtTable.propDecorators = {\n    loading: [{ type: Input }],\n    multiExpand: [{ type: Input }],\n    _emptyState: [{ type: ContentChildren, args: [DtEmptyState,] }],\n    _emptyStateTemplate: [{ type: ViewChild, args: ['emptyStateTemplate', { static: true },] }],\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTable, [{\n        type: Component,\n        args: [{\n                selector: 'dt-table',\n                template: \"<ng-container headerRowOutlet></ng-container>\\n<ng-container rowOutlet></ng-container>\\n<ng-container footerRowOutlet></ng-container>\\n\\n<ng-template #emptyStateTemplate>\\n  <ng-content\\n    select=\\\"[dtTableEmptyState], dt-empty-state, [dtCustomEmptyState]\\\"\\n  ></ng-content>\\n</ng-template>\\n\\n<ng-container cdkPortalOutlet></ng-container>\\n\\n<div *ngIf=\\\"loading\\\" class=\\\"dt-table-float-loading\\\">\\n  <ng-content select=\\\"[dtTableLoadingState]\\\"></ng-content>\\n</div>\\n\",\n                exportAs: 'dtTable',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                preserveWhitespaces: false,\n                host: {\n                    class: 'dt-table',\n                    '[class.dt-table-interactive-rows]': 'interactiveRows'\n                },\n                styles: [\"::ng-deep .dt-header-cell{font-family:BerninaSansWeb,OpenSans,sans-serif;font-size:12px;line-height:1.6;color:#6d6d6d;font-weight:600;word-break:normal;padding:2px;overflow:hidden}:host-context(.dt-table) ::ng-deep .dt-header-cell{overflow:hidden;word-wrap:break-word;position:relative;font-variant:tabular-nums;flex:1;display:flex;align-items:center;justify-content:flex-start;align-items:flex-end;border-bottom:1px solid #e6e6e6;padding:8px 12px}:host-context(.dt-table) ::ng-deep .dt-header-cell.dt-column-sorted{color:#191919;font-weight:700}:host-context(.dt-table) ::ng-deep .dt-header-cell.dt-table-column-align-right{justify-content:flex-end;text-align:right}:host-context(.dt-table) ::ng-deep .dt-header-cell.dt-table-column-align-center{justify-content:center;text-align:center}:host-context(.dt-table-interactive-rows):hover{color:#191919}::ng-deep .dt-cell .dt-info-group{align-items:center;padding:4px 0}::ng-deep .dt-cell .dt-info-group .dt-info-group-content{line-height:22px}::ng-deep .dt-cell .dt-info-group .dt-info-group-title{font-size:16px;line-height:22px}:host{display:flex;flex-flow:column nowrap;min-width:100%;position:relative;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:14px;line-height:1.6}:host .dt-table-float-loading{position:absolute;top:0;display:flex;align-items:center;justify-content:center;height:100%;width:100%}:host ::ng-deep .dt-empty-state{margin:8px auto;width:calc(100% - 16px)}.dt-table-search+:host{margin-top:8px}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.Platform }, { type: ɵngcc0.ViewContainerRef }]; }, { loading: [{\n            type: Input\n        }], multiExpand: [{\n            type: Input\n        }], _emptyState: [{\n            type: ContentChildren,\n            args: [DtEmptyState]\n        }], _emptyStateTemplate: [{\n            type: ViewChild,\n            args: ['emptyStateTemplate', { static: true }]\n        }], _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTable.prototype._multiExpand;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTable.prototype._loading;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTable.prototype._destroy$;\n    /**\n     * Sort accessor map that holds all sort accessor functions from the registered simple columns.\n     * @type {?}\n     * @private\n     */\n    DtTable.prototype._sortAccessorMap;\n    /**\n     * Sort accessor map that holds all display accessor functions from the registered simple columns.\n     * @type {?}\n     * @private\n     */\n    DtTable.prototype._displayAccessorMap;\n    /**\n     * Sort accessor map that holds all comparator accessor functions from the registered simple columns.\n     * @type {?}\n     * @private\n     */\n    DtTable.prototype._comparatorFunctionMap;\n    /**\n     * \\@internal A generated UID\n     * @type {?}\n     */\n    DtTable.prototype._uniqueId;\n    /**\n     * \\@internal The QueryList that holds the empty state component\n     * @type {?}\n     */\n    DtTable.prototype._emptyState;\n    /**\n     * \\@internal The template where the empty state component gets rendered inside\n     * @type {?}\n     */\n    DtTable.prototype._emptyStateTemplate;\n    /**\n     * \\@internal The portal where the component will be projected in when we have to show the empty state.\n     * @type {?}\n     */\n    DtTable.prototype._portalOutlet;\n    /**\n     * \\@internal Stream of all simple dataAccessor functions for all SimpleColumns\n     * @type {?}\n     */\n    DtTable.prototype._dataAccessors;\n    /**\n     * Subscription of attached stream of the portal outlet\n     * @type {?}\n     * @private\n     */\n    DtTable.prototype._portalOutletSubscription;\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied.\n     * @type {?}\n     * @protected\n     */\n    DtTable.prototype.stickyCssClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTable.prototype._viewContainerRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/expandable/expandable-row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId$1 = 0;\nclass DtExpandableRowChangeEvent {\n    /**\n     * @param {?} row\n     */\n    constructor(row) {\n        this.row = row;\n    }\n}\nif (false) {\n    /** @type {?} */\n    DtExpandableRowChangeEvent.prototype.row;\n}\nclass DtExpandableRowContent {\n}\nDtExpandableRowContent.ɵfac = function DtExpandableRowContent_Factory(t) { return new (t || DtExpandableRowContent)(); };\nDtExpandableRowContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtExpandableRowContent, selectors: [[\"ng-template\", \"dtExpandableRowContent\", \"\"]], exportAs: [\"DtExpandableRowContent\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtExpandableRowContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[dtExpandableRowContent]',\n                exportAs: 'DtExpandableRowContent'\n            }]\n    }], null, null); })();\n/**\n * Data row template container that contains the cell outlet and an expandable section.\n * Adds the right class and role.\n */\nclass DtExpandableRow extends DtRow {\n    /**\n     * @param {?} _table\n     * @param {?} _changeDetectorRef\n     * @param {?} _expansionDispatcher\n     * @param {?} elementRef\n     */\n    constructor(_table, _changeDetectorRef, _expansionDispatcher, elementRef) {\n        super(elementRef);\n        this._table = _table;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        this._expanded = false;\n        this._uniqueId = `dt-expandable-row-${nextUniqueId$1++}`;\n        /**\n         * Event emitted when the row's expandable state changes.\n         */\n        this.expandChange = new EventEmitter();\n        /**\n         * \\@internal Event emitted when the row is expanded.\n         */\n        this._expandedStream = this.expandChange.pipe(filter((/**\n         * @param {?} changeEvent\n         * @return {?}\n         */\n        (changeEvent) => changeEvent.row.expanded)));\n        /**\n         * \\@internal Event emitted when the row is collapsed.\n         */\n        this._collapsedStream = this.expandChange.pipe(filter((/**\n         * @param {?} changeEvent\n         * @return {?}\n         */\n        (changeEvent) => !changeEvent.row.expanded)));\n        this._templateSubscription = Subscription.EMPTY;\n        this._expansionDispatcher.listen((/**\n         * @param {?} rowId\n         * @param {?} tableId\n         * @return {?}\n         */\n        (rowId, tableId) => {\n            /**\n             * If the table does not allow multiple rows to be expanded at a time,\n             * the currently expanded row is collapsed.\n             */\n            if (this._table &&\n                !this._table.multiExpand &&\n                this._table._uniqueId === tableId &&\n                this._uniqueId !== rowId) {\n                this._collapse();\n            }\n        }));\n    }\n    /**\n     * The expanded state of the row.\n     * @return {?}\n     */\n    get expanded() {\n        return this._expanded;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set expanded(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue) {\n            this._expand();\n        }\n        else {\n            this._collapse();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._templateSubscription = this._expandableContentTemplates.changes\n            .pipe(startWith(null))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._expandableContentTemplate =\n                this._expandableContentTemplates.first || null;\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._templateSubscription.unsubscribe();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _expand() {\n        if (!this._expanded) {\n            this._expanded = true;\n            this._setExpandableCell(true);\n            this.expandChange.emit(new DtExpandableRowChangeEvent(this));\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * \\@internal Collapses the row\n     * @return {?}\n     */\n    _collapse() {\n        if (this._expanded) {\n            this._expanded = false;\n            this._setExpandableCell(false);\n            this.expandChange.emit(new DtExpandableRowChangeEvent(this));\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * \\@internal Expands the row. This is only called as a result of an user action.\n     * @return {?}\n     */\n    _expandViaInteraction() {\n        if (!this._expanded) {\n            this._expanded = true;\n            this._setExpandableCell(true);\n            this._expansionDispatcher.notify(this._uniqueId, this._table._uniqueId);\n            this.expandChange.emit(new DtExpandableRowChangeEvent(this));\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Sets the style of the expandable cell.\n     * @private\n     * @param {?} expanded\n     * @return {?}\n     */\n    _setExpandableCell(expanded) {\n        // Somehow a hack, a better solution would be appreciated.\n        /** @type {?} */\n        const cells = ((/** @type {?} */ (this._rowRef\n            .nativeElement))).querySelectorAll('dt-expandable-cell');\n        [].slice.call(cells).forEach((/**\n         * @param {?} cell\n         * @return {?}\n         */\n        (cell) => {\n            (expanded ? _addCssClass : _removeCssClass)(cell, 'dt-expandable-cell-expanded');\n        }));\n    }\n}\nDtExpandableRow.ɵfac = function DtExpandableRow_Factory(t) { return new (t || DtExpandableRow)(ɵngcc0.ɵɵdirectiveInject(DtTable), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDtExpandableRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtExpandableRow, selectors: [[\"dt-expandable-row\"]], contentQueries: function DtExpandableRow_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DtExpandableRowContent, false, TemplateRef);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._expandableContentTemplates = _t);\n    } }, viewQuery: function DtExpandableRow_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c6, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowRef = _t.first);\n    } }, hostAttrs: [\"role\", \"row\", \"class.dt-expandable-row-initial\", \"_pristine\", 1, \"dt-expandable-row\"], inputs: { expanded: \"expanded\" }, outputs: { expandChange: \"expandChange\", _expandedStream: \"expanded\", _collapsedStream: \"collapsed\" }, exportAs: [\"dtExpandableRow\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 9, vars: 6, consts: [[1, \"dt-expandable-row-base\", 3, \"ngClass\"], [\"dtExpandableRow\", \"\"], [\"cdkCellOutlet\", \"\"], [1, \"dt-expandable-row-collapsible\"], [1, \"dt-expandable-row-expandable\", 3, \"ngClass\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [\"dtExpandableContent\", \"\"], [3, \"ngTemplateOutlet\"]], template: function DtExpandableRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementContainer(2, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(5, DtExpandableRow_ng_container_5_Template, 1, 1, \"ng-container\", 5);\n        ɵngcc0.ɵɵelementStart(6, \"div\", null, 6);\n        ɵngcc0.ɵɵprojection(8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.expanded ? \"dt-expandable-row-base-expanded\" : \"dt-expandable-row-base-collapsed\");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"@detailExpand\", ctx.expanded ? \"expanded\" : \"collapsed\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c7, ctx.expanded));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.expanded);\n    } }, directives: [ɵngcc7.NgClass, ɵngcc1.CdkCellOutlet, ɵngcc7.NgIf, ɵngcc7.NgTemplateOutlet], styles: [\".dt-expandable-row[_nghost-%COMP%]:nth-child(even){background-color:#fff}.dt-expandable-row[_nghost-%COMP%]:nth-child(odd){background-color:#f8f8f8}.dt-expandable-row-base[_ngcontent-%COMP%]{position:relative;min-height:40px;align-items:stretch;border:2px solid transparent;box-sizing:border-box;display:flex}.dt-expandable-row-base[_ngcontent-%COMP%]::after{display:inline-block;min-height:inherit;content:\\\"\\\"}.dt-expandable-row-base-collapsed[_ngcontent-%COMP%]:hover{border:1px solid #898989;padding:1px}.dt-expandable-row-base[_ngcontent-%COMP%] + .dt-expandable-row-collapsible[_ngcontent-%COMP%]{overflow:hidden}.dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top:2px solid #454646;border-bottom:hidden;border-left:hidden;border-right:hidden;padding:0 2px;background-color:#e6e6e6}.dt-expandable-row-expandable[_ngcontent-%COMP%]{background-color:#fff;padding:16px 12px 16px 14px}.dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom:2px solid #454646}.dt-expandable-row-initial[_nghost-%COMP%]   .dt-expandable-row-collapsible[_ngcontent-%COMP%]{height:0;min-height:0;visibility:hidden}.dt-table-row-indicator[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{width:2px;height:calc(100% - 4px);content:\\\"\\\";display:block;position:absolute;left:2px;-ms-grid-row-align:center;align-self:center}.dt-table-row-indicator[_nghost-%COMP%]   .dt-expandable-row-base-collapsed[_ngcontent-%COMP%]:hover::before{height:calc(100% - 6px);left:3px}.dt-table-row-indicator[_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]::before{height:calc(100% - 4px);left:4px}[_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#00b9cc;background-color:#e1f7f9}[_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#00b9cc}.dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#c41425}.dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%], .dt-theme-turquoise   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%], .dt-theme-turquoise.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#00b9cc;background-color:#e1f7f9}.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%], .dt-theme-turquoise   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%], .dt-theme-turquoise.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#00b9cc}.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-turquoise   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-turquoise.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#c41425}.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-turquoise   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-turquoise.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%], .dt-theme-turquoise.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#00b9cc;background-color:#e1f7f9}.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%], .dt-theme-turquoise.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#00b9cc}.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-turquoise.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e74d59}.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-turquoise.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}.dt-theme-blue   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%], .dt-theme-blue.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#14a8f5;background-color:#e0f4fc}.dt-theme-blue   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%], .dt-theme-blue.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#14a8f5}.dt-theme-blue   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-blue.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#c41425}.dt-theme-blue   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-blue.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}.dt-theme-blue.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#14a8f5;background-color:#e0f4fc}.dt-theme-blue.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#14a8f5}.dt-theme-blue.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e74d59}.dt-theme-blue.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}.dt-theme-purple   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%], .dt-theme-purple.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#9355b7;background-color:#eedbfd}.dt-theme-purple   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%], .dt-theme-purple.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#9355b7}.dt-theme-purple   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-purple.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#c41425}.dt-theme-purple   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-purple.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}.dt-theme-purple.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#9355b7;background-color:#eedbfd}.dt-theme-purple.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#9355b7}.dt-theme-purple.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e74d59}.dt-theme-purple.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}.dt-theme-royalblue   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%], .dt-theme-royalblue.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#526cff;background-color:#e6eaff}.dt-theme-royalblue   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%], .dt-theme-royalblue.dt-theme-light   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#526cff}.dt-theme-royalblue   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-royalblue.dt-theme-light   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#c41425}.dt-theme-royalblue   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before, .dt-theme-royalblue.dt-theme-light   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}.dt-theme-royalblue.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-base-expanded[_ngcontent-%COMP%]{border-top-color:#526cff;background-color:#e6eaff}.dt-theme-royalblue.dt-theme-dark   [_nghost-%COMP%]   .dt-expandable-row-expandable-expanded[_ngcontent-%COMP%]{border-bottom-color:#526cff}.dt-theme-royalblue.dt-theme-dark   .dt-table-row-indicator.dt-color-error[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e74d59}.dt-theme-royalblue.dt-theme-dark   .dt-table-row-indicator.dt-color-warning[_nghost-%COMP%]   .dt-expandable-row-base[_ngcontent-%COMP%]::before{background-color:#e6be00}\"], data: { animation: [\n            trigger('detailExpand', [\n                state('collapsed', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),\n                state('expanded', style({ height: 'auto', visibility: 'visible' })),\n                transition('collapsed => expanded', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([\n                    style({ height: 'auto', visibility: 'hidden', offset: 0.95 }),\n                    style({ height: 'auto', visibility: 'visible', offset: 1 }),\n                ]))),\n                transition('expanded => collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([\n                    style({ height: 'auto', visibility: 'hidden', offset: 0 }),\n                    style({\n                        height: '0px',\n                        minHeight: '0',\n                        visibility: 'hidden',\n                        offset: 1\n                    }),\n                ]))),\n            ]),\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nDtExpandableRow.ctorParameters = () => [\n    { type: DtTable },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ElementRef }\n];\nDtExpandableRow.propDecorators = {\n    expanded: [{ type: Input }],\n    expandChange: [{ type: Output }],\n    _expandedStream: [{ type: Output, args: ['expanded',] }],\n    _collapsedStream: [{ type: Output, args: ['collapsed',] }],\n    _rowRef: [{ type: ViewChild, args: ['dtExpandableRow', { static: true },] }],\n    _expandableContentTemplates: [{ type: ContentChildren, args: [DtExpandableRowContent, { read: TemplateRef },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtExpandableRow, [{\n        type: Component,\n        args: [{\n                animations: [\n                    trigger('detailExpand', [\n                        state('collapsed', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),\n                        state('expanded', style({ height: 'auto', visibility: 'visible' })),\n                        transition('collapsed => expanded', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([\n                            style({ height: 'auto', visibility: 'hidden', offset: 0.95 }),\n                            style({ height: 'auto', visibility: 'visible', offset: 1 }),\n                        ]))),\n                        transition('expanded => collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)', keyframes([\n                            style({ height: 'auto', visibility: 'hidden', offset: 0 }),\n                            style({\n                                height: '0px',\n                                minHeight: '0',\n                                visibility: 'hidden',\n                                offset: 1\n                            }),\n                        ]))),\n                    ]),\n                ],\n                selector: 'dt-expandable-row',\n                template: \"<div\\n  class=\\\"dt-expandable-row-base\\\"\\n  [ngClass]=\\\"\\n    expanded\\n      ? 'dt-expandable-row-base-expanded'\\n      : 'dt-expandable-row-base-collapsed'\\n  \\\"\\n  #dtExpandableRow\\n>\\n  <ng-container cdkCellOutlet></ng-container>\\n</div>\\n<div\\n  [@detailExpand]=\\\"expanded ? 'expanded' : 'collapsed'\\\"\\n  class=\\\"dt-expandable-row-collapsible\\\"\\n>\\n  <div\\n    class=\\\"dt-expandable-row-expandable\\\"\\n    [ngClass]=\\\"{ 'dt-expandable-row-expandable-expanded': expanded }\\\"\\n  >\\n    <ng-container\\n      *ngIf=\\\"expanded\\\"\\n      [ngTemplateOutlet]=\\\"_expandableContentTemplate\\\"\\n    ></ng-container>\\n    <div #dtExpandableContent>\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                host: {\n                    role: 'row',\n                    class: 'dt-expandable-row',\n                    'class.dt-expandable-row-initial': '_pristine'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                exportAs: 'dtExpandableRow',\n                styles: [\":host.dt-expandable-row:nth-child(even){background-color:#fff}:host.dt-expandable-row:nth-child(odd){background-color:#f8f8f8}.dt-expandable-row-base{position:relative;min-height:40px;align-items:stretch;border:2px solid transparent;box-sizing:border-box;display:flex}.dt-expandable-row-base::after{display:inline-block;min-height:inherit;content:\\\"\\\"}.dt-expandable-row-base-collapsed:hover{border:1px solid #898989;padding:1px}.dt-expandable-row-base+.dt-expandable-row-collapsible{overflow:hidden}.dt-expandable-row-base-expanded{border-top:2px solid #454646;border-bottom:hidden;border-left:hidden;border-right:hidden;padding:0 2px;background-color:#e6e6e6}.dt-expandable-row-expandable{background-color:#fff;padding:16px 12px 16px 14px}.dt-expandable-row-expandable-expanded{border-bottom:2px solid #454646}:host.dt-expandable-row-initial .dt-expandable-row-collapsible{height:0;min-height:0;visibility:hidden}:host.dt-table-row-indicator .dt-expandable-row-base::before{width:2px;height:calc(100% - 4px);content:\\\"\\\";display:block;position:absolute;left:2px;-ms-grid-row-align:center;align-self:center}:host.dt-table-row-indicator .dt-expandable-row-base-collapsed:hover::before{height:calc(100% - 6px);left:3px}:host.dt-table-row-indicator .dt-expandable-row-base-expanded::before{height:calc(100% - 4px);left:4px}:host .dt-expandable-row-base-expanded{border-top-color:#00b9cc;background-color:#e1f7f9}:host .dt-expandable-row-expandable-expanded{border-bottom-color:#00b9cc}:host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#c41425}:host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}.dt-theme-light :host .dt-expandable-row-base-expanded,.dt-theme-turquoise :host .dt-expandable-row-base-expanded,.dt-theme-turquoise.dt-theme-light :host .dt-expandable-row-base-expanded{border-top-color:#00b9cc;background-color:#e1f7f9}.dt-theme-light :host .dt-expandable-row-expandable-expanded,.dt-theme-turquoise :host .dt-expandable-row-expandable-expanded,.dt-theme-turquoise.dt-theme-light :host .dt-expandable-row-expandable-expanded{border-bottom-color:#00b9cc}.dt-theme-light :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before,.dt-theme-turquoise :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before,.dt-theme-turquoise.dt-theme-light :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#c41425}.dt-theme-light :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before,.dt-theme-turquoise :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before,.dt-theme-turquoise.dt-theme-light :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}.dt-theme-dark :host .dt-expandable-row-base-expanded,.dt-theme-turquoise.dt-theme-dark :host .dt-expandable-row-base-expanded{border-top-color:#00b9cc;background-color:#e1f7f9}.dt-theme-dark :host .dt-expandable-row-expandable-expanded,.dt-theme-turquoise.dt-theme-dark :host .dt-expandable-row-expandable-expanded{border-bottom-color:#00b9cc}.dt-theme-dark :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before,.dt-theme-turquoise.dt-theme-dark :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#e74d59}.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before,.dt-theme-turquoise.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}.dt-theme-blue :host .dt-expandable-row-base-expanded,.dt-theme-blue.dt-theme-light :host .dt-expandable-row-base-expanded{border-top-color:#14a8f5;background-color:#e0f4fc}.dt-theme-blue :host .dt-expandable-row-expandable-expanded,.dt-theme-blue.dt-theme-light :host .dt-expandable-row-expandable-expanded{border-bottom-color:#14a8f5}.dt-theme-blue :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before,.dt-theme-blue.dt-theme-light :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#c41425}.dt-theme-blue :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before,.dt-theme-blue.dt-theme-light :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}.dt-theme-blue.dt-theme-dark :host .dt-expandable-row-base-expanded{border-top-color:#14a8f5;background-color:#e0f4fc}.dt-theme-blue.dt-theme-dark :host .dt-expandable-row-expandable-expanded{border-bottom-color:#14a8f5}.dt-theme-blue.dt-theme-dark :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#e74d59}.dt-theme-blue.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}.dt-theme-purple :host .dt-expandable-row-base-expanded,.dt-theme-purple.dt-theme-light :host .dt-expandable-row-base-expanded{border-top-color:#9355b7;background-color:#eedbfd}.dt-theme-purple :host .dt-expandable-row-expandable-expanded,.dt-theme-purple.dt-theme-light :host .dt-expandable-row-expandable-expanded{border-bottom-color:#9355b7}.dt-theme-purple :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before,.dt-theme-purple.dt-theme-light :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#c41425}.dt-theme-purple :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before,.dt-theme-purple.dt-theme-light :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}.dt-theme-purple.dt-theme-dark :host .dt-expandable-row-base-expanded{border-top-color:#9355b7;background-color:#eedbfd}.dt-theme-purple.dt-theme-dark :host .dt-expandable-row-expandable-expanded{border-bottom-color:#9355b7}.dt-theme-purple.dt-theme-dark :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#e74d59}.dt-theme-purple.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}.dt-theme-royalblue :host .dt-expandable-row-base-expanded,.dt-theme-royalblue.dt-theme-light :host .dt-expandable-row-base-expanded{border-top-color:#526cff;background-color:#e6eaff}.dt-theme-royalblue :host .dt-expandable-row-expandable-expanded,.dt-theme-royalblue.dt-theme-light :host .dt-expandable-row-expandable-expanded{border-bottom-color:#526cff}.dt-theme-royalblue :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before,.dt-theme-royalblue.dt-theme-light :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#c41425}.dt-theme-royalblue :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before,.dt-theme-royalblue.dt-theme-light :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}.dt-theme-royalblue.dt-theme-dark :host .dt-expandable-row-base-expanded{border-top-color:#526cff;background-color:#e6eaff}.dt-theme-royalblue.dt-theme-dark :host .dt-expandable-row-expandable-expanded{border-bottom-color:#526cff}.dt-theme-royalblue.dt-theme-dark :host.dt-table-row-indicator.dt-color-error .dt-expandable-row-base::before{background-color:#e74d59}.dt-theme-royalblue.dt-theme-dark :host.dt-table-row-indicator.dt-color-warning .dt-expandable-row-base::before{background-color:#e6be00}\"]\n            }]\n    }], function () { return [{ type: DtTable }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc8.UniqueSelectionDispatcher }, { type: ɵngcc0.ElementRef }]; }, { expandChange: [{\n            type: Output\n        }], _expandedStream: [{\n            type: Output,\n            args: ['expanded']\n        }], _collapsedStream: [{\n            type: Output,\n            args: ['collapsed']\n        }], expanded: [{\n            type: Input\n        }], _rowRef: [{\n            type: ViewChild,\n            args: ['dtExpandableRow', { static: true }]\n        }], _expandableContentTemplates: [{\n            type: ContentChildren,\n            args: [DtExpandableRowContent, { read: TemplateRef }]\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DtExpandableRow.prototype._expanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtExpandableRow.prototype._uniqueId;\n    /**\n     * Event emitted when the row's expandable state changes.\n     * @type {?}\n     */\n    DtExpandableRow.prototype.expandChange;\n    /**\n     * \\@internal Event emitted when the row is expanded.\n     * @type {?}\n     */\n    DtExpandableRow.prototype._expandedStream;\n    /**\n     * \\@internal Event emitted when the row is collapsed.\n     * @type {?}\n     */\n    DtExpandableRow.prototype._collapsedStream;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtExpandableRow.prototype._rowRef;\n    /**\n     * Querylist of content templates\n     * @type {?}\n     * @private\n     */\n    DtExpandableRow.prototype._expandableContentTemplates;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtExpandableRow.prototype._templateSubscription;\n    /**\n     * \\@internal the single reference that gets used in the template outlet\n     * @type {?}\n     */\n    DtExpandableRow.prototype._expandableContentTemplate;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtExpandableRow.prototype._table;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtExpandableRow.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtExpandableRow.prototype._expansionDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/expandable/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/header/header-cell.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header cell definition for the dt-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass DtHeaderCellDef extends CdkHeaderCellDef {\n}\nDtHeaderCellDef.ɵfac = function DtHeaderCellDef_Factory(t) { return ɵDtHeaderCellDef_BaseFactory(t || DtHeaderCellDef); };\nDtHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtHeaderCellDef, selectors: [[\"\", \"dtHeaderCellDef\", \"\"]], exportAs: [\"dtHeaderCellDef\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderCellDef, useExisting: DtHeaderCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵDtHeaderCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DtHeaderCellDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtHeaderCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[dtHeaderCellDef]',\n                exportAs: 'dtHeaderCellDef',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: DtHeaderCellDef }]\n            }]\n    }], null, null); })();\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass DtHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elem\n     */\n    constructor(columnDef, elem) {\n        /**\n         * Destroy subject which will fire when the component gets destroyed.\n         */\n        this._destroy = new Subject();\n        columnDef._stateChanges\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            _updateDtColumnStyles(columnDef, elem);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n    }\n}\nDtHeaderCell.ɵfac = function DtHeaderCell_Factory(t) { return new (t || DtHeaderCell)(ɵngcc0.ɵɵdirectiveInject(DtColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDtHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtHeaderCell, selectors: [[\"dt-header-cell\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"dt-header-cell\"], exportAs: [\"dtHeaderCell\"] });\n/** @nocollapse */\nDtHeaderCell.ctorParameters = () => [\n    { type: DtColumnDef },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'dt-header-cell',\n                exportAs: 'dtHeaderCell',\n                host: {\n                    class: 'dt-header-cell',\n                    role: 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: DtColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\nif (false) {\n    /**\n     * Destroy subject which will fire when the component gets destroyed.\n     * @type {?}\n     * @private\n     */\n    DtHeaderCell.prototype._destroy;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/header/header-row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the dt-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass DtHeaderRowDef extends CdkHeaderRowDef {\n}\nDtHeaderRowDef.ɵfac = function DtHeaderRowDef_Factory(t) { return ɵDtHeaderRowDef_BaseFactory(t || DtHeaderRowDef); };\nDtHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtHeaderRowDef, selectors: [[\"\", \"dtHeaderRowDef\", \"\"]], inputs: { columns: [\"dtHeaderRowDef\", \"columns\"], sticky: [\"dtHeaderRowDefSticky\", \"sticky\"] }, exportAs: [\"dtHeaderRowDef\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderRowDef, useExisting: DtHeaderRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵDtHeaderRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DtHeaderRowDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[dtHeaderRowDef]',\n                exportAs: 'dtHeaderRowDef',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: DtHeaderRowDef }],\n                inputs: ['columns: dtHeaderRowDef', 'sticky: dtHeaderRowDefSticky']\n            }]\n    }], null, null); })();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass DtHeaderRow extends CdkHeaderRow {\n}\nDtHeaderRow.ɵfac = function DtHeaderRow_Factory(t) { return ɵDtHeaderRow_BaseFactory(t || DtHeaderRow); };\nDtHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtHeaderRow, selectors: [[\"dt-header-row\"]], hostAttrs: [\"role\", \"rowheader\", 1, \"dt-header-row\"], exportAs: [\"dtHeaderRow\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function DtHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], styles: [\".dt-table.dt-header-row[_nghost-%COMP%], .dt-table   .dt-header-row[_nghost-%COMP%]{align-items:stretch;border:0;box-sizing:border-box;display:flex}.dt-table.dt-header-row[_nghost-%COMP%]::after, .dt-table   .dt-header-row[_nghost-%COMP%]::after{display:inline-block;min-height:inherit;content:\\\"\\\"}.dt-tree-table.dt-header-row[_nghost-%COMP%], .dt-tree-table   .dt-header-row[_nghost-%COMP%]{display:table-row}.dt-header-row.dt-table-sticky[_nghost-%COMP%]{background-color:#fff}\"], changeDetection: 0 });\nconst ɵDtHeaderRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DtHeaderRow);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'dt-header-row',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    class: 'dt-header-row',\n                    role: 'rowheader'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                exportAs: 'dtHeaderRow',\n                styles: [\":host-context(.dt-table).dt-header-row{align-items:stretch;border:0;box-sizing:border-box;display:flex}:host-context(.dt-table).dt-header-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}:host-context(.dt-tree-table).dt-header-row{display:table-row}:host.dt-header-row.dt-table-sticky{background-color:#fff}\"]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/header/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/search/table-search.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An event emitted by the `DtTableSearch` component when the input has changed.\n * @record\n */\nfunction DtTableSearchChangeEvent() { }\nif (false) {\n    /**\n     * The source that emitted the event.\n     * @type {?}\n     */\n    DtTableSearchChangeEvent.prototype.source;\n    /**\n     * The current value.\n     * @type {?}\n     */\n    DtTableSearchChangeEvent.prototype.value;\n}\n/**\n * Provider Expression that allows dt-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @type {?}\n */\nconst DT_TABLE_SEARCH_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line: no-use-before-declare no-forward-ref\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => DtTableSearch)),\n    multi: true,\n};\n/**\n * A search field that can be used above tables for filtering.\n *\n * Searching data for the table means filtering out rows that are passed via\n * the data source. For highlighting the matched strings in the table the\n * `DtHighlight` component can be used.\n */\nclass DtTableSearch {\n    constructor() {\n        this._value = '';\n        /**\n         * Event emitted when the user changes the search term.\n         */\n        this.valueChange = new EventEmitter();\n    }\n    /**\n     * The current search term.\n     * @return {?}\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        /** @type {?} */\n        const actualValue = value || '';\n        /** @type {?} */\n        const change = this._value !== actualValue;\n        this._value = actualValue;\n        if (change && this._handleChange !== undefined) {\n            this._handleChange(actualValue);\n        }\n    }\n    /**\n     * \\@internal Executes _onTouched handler when input loses focus\n     * @return {?}\n     */\n    _handleBlur() {\n        if (this._handleTouched !== undefined) {\n            this._handleTouched();\n        }\n    }\n    /**\n     * \\@internal Emits a change event\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInputChange(event) {\n        /** @type {?} */\n        const value = ((/** @type {?} */ (event.target))).value;\n        this.value = value;\n        this.valueChange.emit({ source: this, value });\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._handleChange = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?=} fn\n     * @return {?}\n     */\n    registerOnTouched(fn = (/**\n     * @return {?}\n     */\n    () => { })) {\n        this._handleTouched = fn;\n    }\n}\nDtTableSearch.ɵfac = function DtTableSearch_Factory(t) { return new (t || DtTableSearch)(); };\nDtTableSearch.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtTableSearch, selectors: [[\"dt-table-search\"]], hostAttrs: [1, \"dt-table-search\"], inputs: { value: \"value\", placeholder: \"placeholder\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledBy: [\"aria-labelledby\", \"ariaLabelledBy\"] }, outputs: { valueChange: \"valueChange\" }, exportAs: [\"dtTableSearch\"], features: [ɵngcc0.ɵɵProvidersFeature([DT_TABLE_SEARCH_CONTROL_VALUE_ACCESSOR])], decls: 4, vars: 4, consts: [[\"dtInput\", \"\", \"type\", \"text\", 3, \"value\", \"placeholder\", \"blur\", \"input\"], [\"dtPrefix\", \"\", \"color\", \"dark\", \"name\", \"search-magnifyingglass\"]], template: function DtTableSearch_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"dt-form-field\");\n        ɵngcc0.ɵɵelementStart(1, \"input\", 0);\n        ɵngcc0.ɵɵlistener(\"blur\", function DtTableSearch_Template_input_blur_1_listener() { return ctx._handleBlur(); })(\"input\", function DtTableSearch_Template_input_input_1_listener($event) { return ctx._handleInputChange($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"dt-icon\", 1);\n        ɵngcc0.ɵɵtext(3, \"$\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"value\", ctx.value)(\"placeholder\", ctx.placeholder);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledBy);\n    } }, directives: [ɵngcc9.DtFormField, ɵngcc10.DtInput, ɵngcc4.DtIcon, ɵngcc9.DtPrefix], styles: [\"[_nghost-%COMP%]{display:block}\"], changeDetection: 0 });\nDtTableSearch.propDecorators = {\n    value: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledBy: [{ type: Input, args: ['aria-labelledby',] }],\n    valueChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTableSearch, [{\n        type: Component,\n        args: [{\n                selector: 'dt-table-search',\n                exportAs: 'dtTableSearch',\n                template: \"<dt-form-field>\\n  <input\\n    dtInput\\n    type=\\\"text\\\"\\n    (blur)=\\\"_handleBlur()\\\"\\n    (input)=\\\"_handleInputChange($event)\\\"\\n    [value]=\\\"value\\\"\\n    [placeholder]=\\\"placeholder\\\"\\n    [attr.aria-label]=\\\"ariaLabel\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledBy\\\"\\n  />\\n  <dt-icon dtPrefix color=\\\"dark\\\" name=\\\"search-magnifyingglass\\\">$</dt-icon>\\n</dt-form-field>\\n\",\n                host: {\n                    class: 'dt-table-search'\n                },\n                providers: [DT_TABLE_SEARCH_CONTROL_VALUE_ACCESSOR],\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                styles: [\":host{display:block}\"]\n            }]\n    }], function () { return []; }, { valueChange: [{\n            type: Output\n        }], value: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledBy: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTableSearch.prototype._value;\n    /**\n     * Placeholder string for the input field (always needs to start with \"Search ...\").\n     * @type {?}\n     */\n    DtTableSearch.prototype.placeholder;\n    /**\n     * An ARIA label describing the input field.\n     * @type {?}\n     */\n    DtTableSearch.prototype.ariaLabel;\n    /**\n     * A reference to an ARIA description of the input field.\n     * @type {?}\n     */\n    DtTableSearch.prototype.ariaLabelledBy;\n    /**\n     * Event emitted when the user changes the search term.\n     * @type {?}\n     */\n    DtTableSearch.prototype.valueChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTableSearch.prototype._handleTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTableSearch.prototype._handleChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/search/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/simple-columns/simple-column-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template T\n */\nclass DtSimpleColumnBase {\n    /**\n     * @param {?} table\n     */\n    constructor(table) {\n        this.table = table;\n        this._sortable = true;\n    }\n    /**\n     * Input for the name with which the columnDefinition will register itself to the table.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        if (this._columnDef) {\n            this._columnDef.name = name;\n        }\n    }\n    /**\n     * Whether the column is sortable\n     * @return {?}\n     */\n    get sortable() {\n        return this._sortable;\n    }\n    /**\n     * @param {?} sortable\n     * @return {?}\n     */\n    set sortable(sortable) {\n        this._sortable = coerceBooleanProperty(sortable);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.table) {\n            this._columnDef.cell = this._cellDef;\n            this._columnDef.headerCell = this._headerDef;\n            this.table.addColumnDef(this._columnDef);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this.table &&\n            (changes.displayAccessor || changes.sortAccessor || changes.comparator)) {\n            this.table._updateColumnAccessors(this.name, this.displayAccessor, this.sortAccessor, this.comparator);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.table) {\n            this.table.removeColumnDef(this._columnDef);\n            this.table._removeColumnAccessors(this.name);\n        }\n    }\n    /**\n     * \\@internal Get data function either returns a data access with the given name or calls the\n     * dataAccessor function to get the simpleData for display.\n     * @param {?} data\n     * @return {?}\n     */\n    // tslint:disable-next-line: no-any\n    _getData(data) {\n        /** @type {?} */\n        const output = this.displayAccessor\n            ? this.displayAccessor(data, this.name)\n            : ((/** @type {?} */ (data)))[this.name];\n        return this.formatter ? this.formatter(output) : output;\n    }\n    /**\n     * \\@internal Get the indicator status based on the passed row data.\n     * @param {?} data\n     * @return {?}\n     */\n    _getIndicator(data) {\n        return this.hasProblem ? this.hasProblem(data, this.name) : undefined;\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this._columnDef) {\n            this._columnDef.name = this._name;\n        }\n    }\n}\nDtSimpleColumnBase.ɵfac = function DtSimpleColumnBase_Factory(t) { return new (t || DtSimpleColumnBase)(ɵngcc0.ɵɵdirectiveInject(DtTable, 8)); };\nDtSimpleColumnBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtSimpleColumnBase, viewQuery: function DtSimpleColumnBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(DtColumnDef, true);\n        ɵngcc0.ɵɵstaticViewQuery(DtHeaderCellDef, true);\n        ɵngcc0.ɵɵstaticViewQuery(DtCellDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._cellDef = _t.first);\n    } }, inputs: { name: \"name\", sortable: \"sortable\", proportion: [\"dtColumnProportion\", \"proportion\"], label: \"label\", displayAccessor: \"displayAccessor\", sortAccessor: \"sortAccessor\", formatter: \"formatter\", hasProblem: \"hasProblem\", comparator: \"comparator\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nDtSimpleColumnBase.ctorParameters = () => [\n    { type: DtTable, decorators: [{ type: Optional }] }\n];\nDtSimpleColumnBase.propDecorators = {\n    name: [{ type: Input }],\n    proportion: [{ type: Input, args: ['dtColumnProportion',] }],\n    label: [{ type: Input }],\n    displayAccessor: [{ type: Input }],\n    sortAccessor: [{ type: Input }],\n    formatter: [{ type: Input }],\n    hasProblem: [{ type: Input }],\n    comparator: [{ type: Input }],\n    sortable: [{ type: Input }],\n    _columnDef: [{ type: ViewChild, args: [DtColumnDef, { static: true },] }],\n    _headerDef: [{ type: ViewChild, args: [DtHeaderCellDef, { static: true },] }],\n    _cellDef: [{ type: ViewChild, args: [DtCellDef, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtSimpleColumnBase, [{\n        type: Directive,\n        args: [{}]\n    }], function () { return [{ type: DtTable, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], sortable: [{\n            type: Input\n        }], proportion: [{\n            type: Input,\n            args: ['dtColumnProportion']\n        }], label: [{\n            type: Input\n        }], displayAccessor: [{\n            type: Input\n        }], sortAccessor: [{\n            type: Input\n        }], formatter: [{\n            type: Input\n        }], hasProblem: [{\n            type: Input\n        }], comparator: [{\n            type: Input\n        }], _columnDef: [{\n            type: ViewChild,\n            args: [DtColumnDef, { static: true }]\n        }], _headerDef: [{\n            type: ViewChild,\n            args: [DtHeaderCellDef, { static: true }]\n        }], _cellDef: [{\n            type: ViewChild,\n            args: [DtCellDef, { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DtSimpleColumnBase.prototype._name;\n    /**\n     * Exposes the dtColumnProportion of the dtCell directive for use with simple columns\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype.proportion;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype.label;\n    /**\n     * Accessor function to retrieve the data should be provided to the cell. If this\n     * property is not set, the data cells will assume that the column name is the same\n     * as the data property the cells should display.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype.displayAccessor;\n    /**\n     * Accessor function to retrieve the sortable data from the data provided to the row.\n     * If this property is not set, it will fall back to the dataAccessor function. Further fallbacks\n     * assume that there is a property on the dataset with the name of the DtSimpleColumn.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype.sortAccessor;\n    /**\n     * Formatter function that gets applied to the cell data if given.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype.formatter;\n    /**\n     * Evaluation function to retrieve the error/warning state of a cell.\n     * If this property is not set, no error indication will be rendered on the cell.\n     * The function should either return `error`, `warning` or `undefined` based on which\n     * indicator should be enabled on the cell.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype.hasProblem;\n    /**\n     * Comparison function which should be used instead of the default comparison.\n     * If this property is set, the {\\@link sortAccessor} won't be used for sorting.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype.comparator;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtSimpleColumnBase.prototype._sortable;\n    /**\n     * \\@internal\n     * Reference to the DtColumnDef defined in the template.\n     * Will be passed to the registering table.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype._columnDef;\n    /**\n     * \\@internal\n     * Reference to the DtHeaderCellDef defined in the template.\n     * Will be passed to the registering table.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype._headerDef;\n    /**\n     * \\@internal\n     * Reference to the DtCellDef defined in the template.\n     * Will be passed to the registering table.\n     * @type {?}\n     */\n    DtSimpleColumnBase.prototype._cellDef;\n    /** @type {?} */\n    DtSimpleColumnBase.prototype.table;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/simple-columns/simple-text-column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass DtSimpleTextColumn extends DtSimpleColumnBase {\n    // tslint:disable-next-line: no-any\n    /**\n     * @param {?} table\n     */\n    constructor(table) {\n        super(table);\n    }\n}\nDtSimpleTextColumn.ɵfac = function DtSimpleTextColumn_Factory(t) { return new (t || DtSimpleTextColumn)(ɵngcc0.ɵɵdirectiveInject(DtTable, 8)); };\nDtSimpleTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtSimpleTextColumn, selectors: [[\"dt-simple-text-column\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: DtSimpleColumnBase, useExisting: DtSimpleTextColumn }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"dtColumnAlign\", \"text\", 3, \"dtColumnDef\", \"dtColumnProportion\"], [4, \"dtHeaderCellDef\"], [3, \"dtIndicator\", \"dtIndicatorColor\", 4, \"dtCellDef\"], [3, \"dt-sort-header\"], [3, \"dtIndicator\", \"dtIndicatorColor\"], [1, \"dt-simple-text-cell-data\"]], template: function DtSimpleTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, DtSimpleTextColumn_ng_container_1_Template, 3, 2, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(2, DtSimpleTextColumn_dt_cell_2_Template, 3, 4, \"dt-cell\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"dtColumnDef\", ctx.name)(\"dtColumnProportion\", ctx.proportion);\n    } }, directives: function () { return [DtColumnDef,\n        DtHeaderCellDef,\n        DtCellDef,\n        DtHeaderCell,\n        DtSortHeader,\n        DtCell, ɵngcc2.DtIndicator]; }, styles: [\".dt-simple-number-cell-data[_ngcontent-%COMP%], .dt-simple-text-cell-data[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-wrap:normal}\"] });\n/** @nocollapse */\nDtSimpleTextColumn.ctorParameters = () => [\n    { type: DtTable, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtSimpleTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'dt-simple-text-column',\n                template: \"<ng-container\\n  [dtColumnDef]=\\\"name\\\"\\n  dtColumnAlign=\\\"text\\\"\\n  [dtColumnProportion]=\\\"proportion\\\"\\n>\\n  <ng-container *dtHeaderCellDef>\\n    <dt-header-cell [dt-sort-header]=\\\"sortable\\\">{{\\n      label || name\\n    }}</dt-header-cell>\\n  </ng-container>\\n  <dt-cell\\n    *dtCellDef=\\\"let data\\\"\\n    [dtIndicator]=\\\"_getIndicator(data)\\\"\\n    [dtIndicatorColor]=\\\"_getIndicator(data)\\\"\\n    [attr.title]=\\\"_getData(data)\\\"\\n  >\\n    <div class=\\\"dt-simple-text-cell-data\\\">{{ _getData(data) }}</div>\\n  </dt-cell>\\n</ng-container>\\n\",\n                preserveWhitespaces: false,\n                encapsulation: ViewEncapsulation.Emulated,\n                /*\n                   * Deliberatley set to Default because the embedded view that gets created for the\n                   * dtColumDef can't handle onPush and results in ChangeAfterChecked error.\n                   */\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: DtSimpleColumnBase, useExisting: DtSimpleTextColumn }],\n                styles: [\".dt-simple-number-cell-data,.dt-simple-text-cell-data{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-wrap:normal}\"]\n            }]\n    }], function () { return [{ type: DtTable, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/simple-columns/simple-number-column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass DtSimpleNumberColumn extends DtSimpleColumnBase {\n    // tslint:disable-next-line: no-any\n    /**\n     * @param {?} table\n     */\n    constructor(table) {\n        super(table);\n    }\n    /**\n     * \\@internal Get data either returns a data access with the given name or calls the\n     * displayAccessor function to get the simpleData for display.\n     * @param {?} data\n     * @return {?}\n     */\n    // tslint:disable-next-line: no-any\n    _getData(data) {\n        /** @type {?} */\n        const output = this.displayAccessor\n            ? this.displayAccessor(data, this.name)\n            : ((/** @type {?} */ (data)))[this.name];\n        if (isNumber(output) && !isDefined(this.formatter)) {\n            return formatCount(output);\n        }\n        return this.formatter ? this.formatter(output) : output;\n    }\n}\nDtSimpleNumberColumn.ɵfac = function DtSimpleNumberColumn_Factory(t) { return new (t || DtSimpleNumberColumn)(ɵngcc0.ɵɵdirectiveInject(DtTable, 8)); };\nDtSimpleNumberColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtSimpleNumberColumn, selectors: [[\"dt-simple-number-column\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: DtSimpleColumnBase, useExisting: DtSimpleNumberColumn },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"dtColumnAlign\", \"number\", 3, \"dtColumnDef\", \"dtColumnProportion\"], [4, \"dtHeaderCellDef\"], [3, \"dtIndicator\", \"dtIndicatorColor\", 4, \"dtCellDef\"], [\"start\", \"desc\", 3, \"dt-sort-header\"], [3, \"dtIndicator\", \"dtIndicatorColor\"], [1, \"dt-simple-number-cell-data\"]], template: function DtSimpleNumberColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, DtSimpleNumberColumn_ng_container_1_Template, 3, 2, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(2, DtSimpleNumberColumn_dt_cell_2_Template, 3, 4, \"dt-cell\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"dtColumnDef\", ctx.name)(\"dtColumnProportion\", ctx.proportion);\n    } }, directives: function () { return [DtColumnDef,\n        DtHeaderCellDef,\n        DtCellDef,\n        DtHeaderCell,\n        DtSortHeader,\n        DtCell, ɵngcc2.DtIndicator]; }, styles: [\".dt-simple-number-cell-data[_ngcontent-%COMP%], .dt-simple-text-cell-data[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-wrap:normal}\"] });\n/** @nocollapse */\nDtSimpleNumberColumn.ctorParameters = () => [\n    { type: DtTable, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtSimpleNumberColumn, [{\n        type: Component,\n        args: [{\n                selector: 'dt-simple-number-column',\n                template: \"<ng-container\\n  [dtColumnDef]=\\\"name\\\"\\n  dtColumnAlign=\\\"number\\\"\\n  [dtColumnProportion]=\\\"proportion\\\"\\n>\\n  <ng-container *dtHeaderCellDef>\\n    <dt-header-cell [dt-sort-header]=\\\"sortable\\\" start=\\\"desc\\\">{{\\n      label || name\\n    }}</dt-header-cell>\\n  </ng-container>\\n  <dt-cell\\n    *dtCellDef=\\\"let data\\\"\\n    [dtIndicator]=\\\"_getIndicator(data)\\\"\\n    [dtIndicatorColor]=\\\"_getIndicator(data)\\\"\\n    [attr.title]=\\\"_getData(data)\\\"\\n  >\\n    <div class=\\\"dt-simple-number-cell-data\\\">{{ _getData(data) }}</div>\\n  </dt-cell>\\n</ng-container>\\n\",\n                preserveWhitespaces: false,\n                encapsulation: ViewEncapsulation.Emulated,\n                /*\n                   * Deliberatley set to Default because the embedded view that gets created for the\n                   * dtColumDef can't handle onPush and results in ChangeAfterChecked error.\n                   */\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [\n                    { provide: DtSimpleColumnBase, useExisting: DtSimpleNumberColumn },\n                ],\n                styles: [\".dt-simple-number-cell-data,.dt-simple-text-cell-data{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-wrap:normal}\"]\n            }]\n    }], function () { return [{ type: DtTable, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/simple-columns/favorite-column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass DtFavoriteColumn extends DtSimpleColumnBase {\n    /**\n     * @param {?} table\n     */\n    constructor(table) {\n        super(table);\n        /**\n         * Event that is emitted whenever the star icon for the favorite column is toggled.\n         */\n        this.favoriteToggled = new EventEmitter();\n    }\n    /**\n     * \\@internal is Favorite returns whether the column specified by name in the datasource\n     * holds true or false.\n     * @param {?} data\n     * @return {?}\n     */\n    _isFavorite(data) {\n        return this.displayAccessor\n            ? this.displayAccessor(data, this.name)\n            : ((/** @type {?} */ (data)))[this.name]; // tslint:disable-line:no-any\n    }\n    /**\n     * \\@internal Toggle Favorite toggles the value of the favorite column in the\n     * datasource using the predefined name.\n     * @param {?} data\n     * @return {?}\n     */\n    _toggleFavorite(data) {\n        this.favoriteToggled.emit(data);\n    }\n}\nDtFavoriteColumn.ɵfac = function DtFavoriteColumn_Factory(t) { return new (t || DtFavoriteColumn)(ɵngcc0.ɵɵdirectiveInject(DtTable, 8)); };\nDtFavoriteColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtFavoriteColumn, selectors: [[\"dt-favorite-column\"]], outputs: { favoriteToggled: \"favoriteToggled\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: DtSimpleColumnBase, useExisting: DtFavoriteColumn }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 2, consts: [[\"dtColumnAlign\", \"icon\", 3, \"dtColumnDef\", \"dtColumnProportion\"], [4, \"dtHeaderCellDef\"], [3, \"dtIndicator\", \"dtIndicatorColor\", 4, \"dtCellDef\"], [\"favoriteTemplate\", \"\"], [\"start\", \"desc\", 3, \"dt-sort-header\"], [3, \"dtIndicator\", \"dtIndicatorColor\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"dt-icon-button\", \"\", \"variant\", \"nested\", 3, \"click\"], [3, \"name\"]], template: function DtFavoriteColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, DtFavoriteColumn_ng_container_1_Template, 3, 2, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(2, DtFavoriteColumn_dt_cell_2_Template, 2, 8, \"dt-cell\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtemplate(3, DtFavoriteColumn_ng_template_3_Template, 2, 5, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"dtColumnDef\", ctx.name)(\"dtColumnProportion\", ctx.proportion);\n    } }, directives: function () { return [DtColumnDef,\n        DtHeaderCellDef,\n        DtCellDef,\n        DtHeaderCell,\n        DtSortHeader,\n        DtCell, ɵngcc2.DtIndicator, ɵngcc7.NgTemplateOutlet, ɵngcc3.DtButton, ɵngcc4.DtIcon]; }, styles: [\".dt-simple-number-cell-data[_ngcontent-%COMP%], .dt-simple-text-cell-data[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-wrap:normal}  .dt-favorite-column-empty-star svg{fill:#b7b7b7!important}  .dt-favorite-column-filled-star svg{fill:#006d75!important}\"] });\n/** @nocollapse */\nDtFavoriteColumn.ctorParameters = () => [\n    { type: DtTable, decorators: [{ type: Optional }] }\n];\nDtFavoriteColumn.propDecorators = {\n    favoriteToggled: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtFavoriteColumn, [{\n        type: Component,\n        args: [{\n                selector: 'dt-favorite-column',\n                template: \"<ng-container\\n  [dtColumnDef]=\\\"name\\\"\\n  dtColumnAlign=\\\"icon\\\"\\n  [dtColumnProportion]=\\\"proportion\\\"\\n>\\n  <ng-container *dtHeaderCellDef>\\n    <dt-header-cell [dt-sort-header]=\\\"sortable\\\" start=\\\"desc\\\">{{\\n      label\\n    }}</dt-header-cell>\\n  </ng-container>\\n  <dt-cell\\n    *dtCellDef=\\\"let data\\\"\\n    [dtIndicator]=\\\"_getIndicator(data)\\\"\\n    [dtIndicatorColor]=\\\"_getIndicator(data)\\\"\\n    [attr.title]=\\\"_isFavorite(data)\\\"\\n  >\\n    <ng-container\\n      *ngTemplateOutlet=\\\"\\n        favoriteTemplate;\\n        context: { favorite: _isFavorite(data), data: data }\\n      \\\"\\n    ></ng-container>\\n  </dt-cell>\\n</ng-container>\\n\\n<ng-template #favoriteTemplate let-favorite=\\\"favorite\\\" let-data=\\\"data\\\">\\n  <button dt-icon-button variant=\\\"nested\\\" (click)=\\\"_toggleFavorite(data)\\\">\\n    <dt-icon\\n      [name]=\\\"favorite ? 'favorite' : 'star-empty'\\\"\\n      [class.dt-favorite-column-filled-star]=\\\"favorite\\\"\\n      [class.dt-favorite-column-empty-star]=\\\"!favorite\\\"\\n    ></dt-icon>\\n  </button>\\n</ng-template>\\n\",\n                preserveWhitespaces: false,\n                encapsulation: ViewEncapsulation.Emulated,\n                /*\n                   * Deliberatley set to Default because the embedded view that gets created for the\n                   * dtColumDef can't handle onPush and results in ChangeAfterChecked error.\n                   */\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: DtSimpleColumnBase, useExisting: DtFavoriteColumn }],\n                styles: [\".dt-simple-number-cell-data,.dt-simple-text-cell-data{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-wrap:normal}::ng-deep .dt-favorite-column-empty-star svg{fill:#b7b7b7!important}::ng-deep .dt-favorite-column-filled-star svg{fill:#006d75!important}\"]\n            }]\n    }], function () { return [{ type: DtTable, decorators: [{\n                type: Optional\n            }] }]; }, { favoriteToggled: [{\n            type: Output\n        }] }); })();\nif (false) {\n    /**\n     * Event that is emitted whenever the star icon for the favorite column is toggled.\n     * @type {?}\n     */\n    DtFavoriteColumn.prototype.favoriteToggled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/simple-columns/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/sort/sort-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Boilerplate for applying mixins to the sort header.\n * \\@internal\n */\nclass DtSortHeaderBase {\n}\n/** @type {?} */\nconst _DtSortHeaderMixinBase = mixinDisabled(DtSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n */\nclass DtSortHeader extends _DtSortHeaderMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dtColumnDef\n     * @param {?} _sort\n     */\n    constructor(_changeDetectorRef, _dtColumnDef, _sort) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dtColumnDef = _dtColumnDef;\n        this._sort = _sort;\n        this._rerenderSubscription = Subscription.EMPTY;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         * \\@internal\n         */\n        this._sortIconName = 'sorter-double';\n        this._sortable = true;\n        if (_sort) {\n            this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._updateSorterIcon();\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Enables sorting on the dt-sort-header by applying the directive or not.\n     * @return {?}\n     */\n    get sortable() {\n        return this._sortable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set sortable(value) {\n        this._sortable = coerceBooleanProperty(value);\n        if (this.sortable && !this._sort) {\n            throw getDtSortHeaderNotContainedWithinSortError();\n        }\n    }\n    /**\n     * Returns the internal id\n     * @return {?}\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Wether the entire table sorting is disabled or the column is disabled\n     * \\@internal\n     * @return {?}\n     */\n    get _isDisabled() {\n        return (this._sort && this._sort.disabled) || this.disabled;\n    }\n    /**\n     * Whether this DtSortHeader is currently sorted in either ascending or descending order.\n     * \\@internal\n     * @return {?}\n     */\n    get _isSorted() {\n        /** @type {?} */\n        const sorted = this._sortable &&\n            this._sort.active === this._id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n        return sorted;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._id = this._dtColumnDef.name;\n        this._updateSorterIcon();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Updates the icon used for the sorter\n     * @private\n     * @return {?}\n     */\n    _updateSorterIcon() {\n        this._sortIconName = this._isSorted\n            ? this._sort.direction === 'asc'\n                ? 'sorter2-up'\n                : 'sorter2-down'\n            : 'sorter-double';\n    }\n    /**\n     * Triggers the sort on this sort header\n     * \\@internal\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._isDisabled || !this._sortable) {\n            return;\n        }\n        this._sort.sort(this);\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * \\@internal\n     * @return {?}\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted) {\n            return null;\n        }\n        return this._sort.direction === 'asc' ? 'ascending' : 'descending';\n    }\n}\nDtSortHeader.ɵfac = function DtSortHeader_Factory(t) { return new (t || DtSortHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DtColumnDef), ɵngcc0.ɵɵdirectiveInject(DtSort, 8)); };\nDtSortHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtSortHeader, selectors: [[\"dt-header-cell\", \"dt-sort-header\", \"\"]], hostVars: 5, hostBindings: function DtSortHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function DtSortHeader_click_HostBindingHandler() { return ctx._handleClick(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n        ɵngcc0.ɵɵclassProp(\"dt-sort-header-disabled\", ctx._isDisabled)(\"dt-sortable\", ctx.sortable && !ctx._isDisabled);\n    } }, inputs: { disabled: \"disabled\", sortable: [\"dt-sort-header\", \"sortable\"], start: \"start\", ariaLabel: [\"sort-aria-label\", \"ariaLabel\"] }, exportAs: [\"dtSortHeader\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c9, ngContentSelectors: _c0, decls: 5, vars: 4, consts: [[1, \"dt-sort-header-container\"], [\"class\", \"dt-sort-header-button\", \"type\", \"button\", 4, \"ngIf\"], [4, \"ngIf\"], [\"content\", \"\"], [\"type\", \"button\", 1, \"dt-sort-header-button\"], [4, \"ngTemplateOutlet\"], [\"class\", \"dt-sort-header-arrow\", 4, \"ngIf\"], [1, \"dt-sort-header-arrow\"], [3, \"name\"]], template: function DtSortHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, DtSortHeader_button_1_Template, 3, 4, \"button\", 1);\n        ɵngcc0.ɵɵtemplate(2, DtSortHeader_ng_container_2_Template, 2, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, DtSortHeader_ng_template_3_Template, 1, 0, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dt-sort-header-sorted\", ctx._isSorted);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.sortable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.sortable);\n    } }, directives: [ɵngcc7.NgIf, ɵngcc7.NgTemplateOutlet, ɵngcc4.DtIcon], styles: [\".dt-sort-header-container{align-items:center}.dt-sort-header-disabled .dt-sort-header-container{cursor:default}.dt-sort-header-button{color:#6d6d6d;border:none;background:0 0;display:flex;align-items:flex-end;text-align:left;padding:0;cursor:inherit;outline:0;font:inherit}.dt-sortable:hover{background-color:#f2f2f2;cursor:pointer}.dt-sortable:hover .dt-sort-header-button{color:#454646}.dt-sortable:hover .dt-sort-header-arrow{fill:#454646}.dt-sort-header-arrow{width:12px;min-width:12px;height:14px;position:relative;display:flex;margin:0 0 4px 4px}.dt-sort-header-arrow .dt-icon{fill:#ccc}.dt-sort-header-sorted .dt-sort-header-button{color:#454646}.dt-sort-header-sorted .dt-sort-header-arrow .dt-icon{fill:#454646}.dt-table-column-align-right .dt-sort-header-button{text-align:right}.dt-table-column-align-center .dt-sort-header-button{text-align:center}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nDtSortHeader.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: DtColumnDef },\n    { type: DtSort, decorators: [{ type: Optional }] }\n];\nDtSortHeader.propDecorators = {\n    sortable: [{ type: Input, args: ['dt-sort-header',] }],\n    start: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['sort-aria-label',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtSortHeader, [{\n        type: Component,\n        args: [{\n                selector: 'dt-header-cell[dt-sort-header]',\n                exportAs: 'dtSortHeader',\n                template: \"<div class=\\\"dt-sort-header-container\\\" [class.dt-sort-header-sorted]=\\\"_isSorted\\\">\\n  <button\\n    *ngIf=\\\"sortable\\\"\\n    class=\\\"dt-sort-header-button\\\"\\n    type=\\\"button\\\"\\n    [attr.disabled]=\\\"_isDisabled || null\\\"\\n    [attr.aria-label]=\\\"ariaLabel\\\"\\n  >\\n    <ng-container *ngTemplateOutlet=\\\"content\\\"></ng-container>\\n    <div class=\\\"dt-sort-header-arrow\\\" *ngIf=\\\"!_isDisabled\\\">\\n      <dt-icon [name]=\\\"_sortIconName\\\"></dt-icon>\\n    </div>\\n  </button>\\n  <ng-container *ngIf=\\\"!sortable\\\">\\n    <ng-container *ngTemplateOutlet=\\\"content\\\"></ng-container>\\n  </ng-container>\\n</div>\\n\\n<ng-template #content>\\n  <ng-content></ng-content>\\n</ng-template>\\n\",\n                host: {\n                    '(click)': '_handleClick()',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.dt-sort-header-disabled]': '_isDisabled',\n                    '[class.dt-sortable]': 'sortable && !_isDisabled'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                styles: [\".dt-sort-header-container{align-items:center}.dt-sort-header-disabled .dt-sort-header-container{cursor:default}.dt-sort-header-button{color:#6d6d6d;border:none;background:0 0;display:flex;align-items:flex-end;text-align:left;padding:0;cursor:inherit;outline:0;font:inherit}.dt-sortable:hover{background-color:#f2f2f2;cursor:pointer}.dt-sortable:hover .dt-sort-header-button{color:#454646}.dt-sortable:hover .dt-sort-header-arrow{fill:#454646}.dt-sort-header-arrow{width:12px;min-width:12px;height:14px;position:relative;display:flex;margin:0 0 4px 4px}.dt-sort-header-arrow .dt-icon{fill:#ccc}.dt-sort-header-sorted .dt-sort-header-button{color:#454646}.dt-sort-header-sorted .dt-sort-header-arrow .dt-icon{fill:#454646}.dt-table-column-align-right .dt-sort-header-button{text-align:right}.dt-table-column-align-center .dt-sort-header-button{text-align:center}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: DtColumnDef }, { type: DtSort, decorators: [{\n                type: Optional\n            }] }]; }, { sortable: [{\n            type: Input,\n            args: ['dt-sort-header']\n        }], start: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['sort-aria-label']\n        }] }); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DtSortHeader.prototype._rerenderSubscription;\n    /**\n     * The direction the arrow should be facing according to the current state.\n     * \\@internal\n     * @type {?}\n     */\n    DtSortHeader.prototype._sortIconName;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtSortHeader.prototype._sortable;\n    /**\n     * Overrides the sort start value of the containing DtSort\n     * @type {?}\n     */\n    DtSortHeader.prototype.start;\n    /**\n     * ID of this sort header. The name of the dtColumnDef is used as the id\n     * @type {?}\n     * @private\n     */\n    DtSortHeader.prototype._id;\n    /**\n     * Aria label for the sort header\n     * @type {?}\n     */\n    DtSortHeader.prototype.ariaLabel;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtSortHeader.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtSortHeader.prototype._dtColumnDef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtSortHeader.prototype._sort;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/states/table-empty-state-image.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `<dt-empty-state>` and `<dt-empty-state-item-img>` instead.\n * \\@breaking-change To be removed with 6.0.0.\n */\nclass DtTableEmptyStateImage {\n}\nDtTableEmptyStateImage.ɵfac = function DtTableEmptyStateImage_Factory(t) { return new (t || DtTableEmptyStateImage)(); };\nDtTableEmptyStateImage.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtTableEmptyStateImage, selectors: [[\"dt-table-empty-state-image\"]], hostAttrs: [1, \"dt-table-empty-state-image\"], exportAs: [\"dtTableEmptyStateImage\"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DtTableEmptyStateImage_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".dt-table-empty-state-image[_nghost-%COMP%]{box-sizing:content-box;padding:2px;display:inline-block;height:86px;width:86px;flex-grow:0;flex-shrink:0}.dt-table-empty-state-image[_nghost-%COMP%]   img[_ngcontent-%COMP%]{border:0;height:86px;width:86px}\"], changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTableEmptyStateImage, [{\n        type: Component,\n        args: [{\n                selector: 'dt-table-empty-state-image',\n                template: '<ng-content></ng-content>',\n                exportAs: 'dtTableEmptyStateImage',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                preserveWhitespaces: false,\n                host: {\n                    class: 'dt-table-empty-state-image'\n                },\n                styles: [\":host.dt-table-empty-state-image{box-sizing:content-box;padding:2px;display:inline-block;height:86px;width:86px;flex-grow:0;flex-shrink:0}:host.dt-table-empty-state-image img{border:0;height:86px;width:86px}\"]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/states/table-empty-state-message.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `<dt-empty-state>` instead.\n * \\@breaking-change To be removed with 6.0.0.\n */\nclass DtTableEmptyStateMessage {\n}\nDtTableEmptyStateMessage.ɵfac = function DtTableEmptyStateMessage_Factory(t) { return new (t || DtTableEmptyStateMessage)(); };\nDtTableEmptyStateMessage.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtTableEmptyStateMessage, selectors: [[\"dt-table-empty-state-message\"]], hostAttrs: [1, \"dt-table-empty-state-message\"], exportAs: [\"dtTableEmptyStateMessage\"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DtTableEmptyStateMessage_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".dt-table-empty-state-message[_nghost-%COMP%]{display:block}\"], changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTableEmptyStateMessage, [{\n        type: Component,\n        args: [{\n                selector: 'dt-table-empty-state-message',\n                template: '<ng-content></ng-content>',\n                exportAs: 'dtTableEmptyStateMessage',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                preserveWhitespaces: false,\n                host: {\n                    class: 'dt-table-empty-state-message'\n                },\n                styles: [\":host.dt-table-empty-state-message{display:block}\"]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/states/table-empty-state-title.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `<dt-empty-state>` and `<dt-empty-state-item-title>` instead.\n * \\@breaking-change To be removed with 6.0.0.\n */\nclass DtTableEmptyStateTitle {\n}\nDtTableEmptyStateTitle.ɵfac = function DtTableEmptyStateTitle_Factory(t) { return new (t || DtTableEmptyStateTitle)(); };\nDtTableEmptyStateTitle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtTableEmptyStateTitle, selectors: [[\"dt-table-empty-state-title\"]], hostAttrs: [1, \"dt-table-empty-state-title\"], exportAs: [\"dtTableEmptyStateTitle\"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DtTableEmptyStateTitle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".dt-table-empty-state-title[_nghost-%COMP%]{display:block;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:24px;line-height:1.6}\"], changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTableEmptyStateTitle, [{\n        type: Component,\n        args: [{\n                selector: 'dt-table-empty-state-title',\n                template: '<ng-content></ng-content>',\n                exportAs: 'dtTableEmptyStateTitle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                preserveWhitespaces: false,\n                host: {\n                    class: 'dt-table-empty-state-title'\n                },\n                styles: [\":host.dt-table-empty-state-title{display:block;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:24px;line-height:1.6}\"]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/states/table-empty-state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `<dt-empty-state>` instead.\n * \\@breaking-change To be removed with 6.0.0.\n */\nclass DtTableEmptyState {\n}\nDtTableEmptyState.ɵfac = function DtTableEmptyState_Factory(t) { return new (t || DtTableEmptyState)(); };\nDtTableEmptyState.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DtTableEmptyState, selectors: [[\"dt-table-empty-state\"]], contentQueries: function DtTableEmptyState_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DtTableEmptyStateImage, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DtTableEmptyStateTitle, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DtTableEmptyStateMessage, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._emptyImage = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._emptyTitle = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._emptyMessage = _t.first);\n    } }, hostAttrs: [1, \"dt-table-empty-state\"], exportAs: [\"dtTableEmptyState\"], ngContentSelectors: _c11, decls: 4, vars: 0, consts: [[1, \"dt-table-empty-state-message-area\"]], template: function DtTableEmptyState_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c10);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".dt-table-empty-state[_nghost-%COMP%]{display:flex;flex-flow:row nowrap;justify-content:center;margin:48px 0;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:14px;line-height:1.6}.dt-table-empty-state[_nghost-%COMP%]   .dt-table-empty-state-message-area[_ngcontent-%COMP%]{padding-left:8px;white-space:pre-line}\"], changeDetection: 0 });\nDtTableEmptyState.propDecorators = {\n    _emptyImage: [{ type: ContentChild, args: [DtTableEmptyStateImage, { static: true },] }],\n    _emptyTitle: [{ type: ContentChild, args: [DtTableEmptyStateTitle, { static: true },] }],\n    _emptyMessage: [{ type: ContentChild, args: [DtTableEmptyStateMessage, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTableEmptyState, [{\n        type: Component,\n        args: [{\n                selector: 'dt-table-empty-state',\n                template: \"<ng-content select=\\\"dt-table-empty-state-image\\\"></ng-content>\\n\\n<div class=\\\"dt-table-empty-state-message-area\\\">\\n  <ng-content select=\\\"dt-table-empty-state-title\\\"></ng-content>\\n  <ng-content select=\\\"dt-table-empty-state-message\\\"></ng-content>\\n</div>\\n\",\n                exportAs: 'dtTableEmptyState',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.Emulated,\n                preserveWhitespaces: false,\n                host: {\n                    class: 'dt-table-empty-state'\n                },\n                styles: [\":host.dt-table-empty-state{display:flex;flex-flow:row nowrap;justify-content:center;margin:48px 0;font-family:BerninaSansWeb,OpenSans,sans-serif;color:#454646;font-weight:400;font-size:14px;line-height:1.6}:host.dt-table-empty-state .dt-table-empty-state-message-area{padding-left:8px;white-space:pre-line}\"]\n            }]\n    }], null, { _emptyImage: [{\n            type: ContentChild,\n            args: [DtTableEmptyStateImage, { static: true }]\n        }], _emptyTitle: [{\n            type: ContentChild,\n            args: [DtTableEmptyStateTitle, { static: true }]\n        }], _emptyMessage: [{\n            type: ContentChild,\n            args: [DtTableEmptyStateMessage, { static: true }]\n        }] }); })();\nif (false) {\n    /**\n     * \\@internal The image of the empty state.\n     * @type {?}\n     */\n    DtTableEmptyState.prototype._emptyImage;\n    /**\n     * \\@internal The title of the empty state.\n     * @type {?}\n     */\n    DtTableEmptyState.prototype._emptyTitle;\n    /**\n     * \\@internal The message of the empty state.\n     * @type {?}\n     */\n    DtTableEmptyState.prototype._emptyMessage;\n}\n/**\n * @deprecated Use `<dt-empty-state>` instead.\n * \\@breaking-change To be removed with 6.0.0.\n */\nclass DtTableEmptyStateDirective {\n}\nDtTableEmptyStateDirective.ɵfac = function DtTableEmptyStateDirective_Factory(t) { return new (t || DtTableEmptyStateDirective)(); };\nDtTableEmptyStateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtTableEmptyStateDirective, selectors: [[\"\", \"dtTableEmptyState\", \"\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTableEmptyStateDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[dtTableEmptyState]'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/states/table-loading-state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DtTableLoadingState {\n}\nDtTableLoadingState.ɵfac = function DtTableLoadingState_Factory(t) { return new (t || DtTableLoadingState)(); };\nDtTableLoadingState.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DtTableLoadingState, selectors: [[\"\", \"dtTableLoadingState\", \"\"]], exportAs: [\"dtTableLoadingState\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTableLoadingState, [{\n        type: Directive,\n        args: [{\n                selector: '[dtTableLoadingState]',\n                exportAs: 'dtTableLoadingState'\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/states/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/table-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    DtTable,\n    DtHeaderRow,\n    DtHeaderRowDef,\n    DtRow,\n    DtRowDef,\n    DtCell,\n    DtCellDef,\n    DtColumnDef,\n    DtExpandableCell,\n    DtExpandableRow,\n    DtHeaderCell,\n    DtHeaderCellDef,\n    DtTableEmptyState,\n    DtTableEmptyStateDirective,\n    DtTableEmptyStateImage,\n    DtTableEmptyStateTitle,\n    DtTableEmptyStateMessage,\n    DtTableLoadingState,\n    DtSort,\n    DtSortHeader,\n    DtTableSearch,\n    DtSimpleTextColumn,\n    DtSimpleNumberColumn,\n    DtExpandableRowContent,\n    DtFavoriteColumn,\n];\nclass DtTableModule {\n}\nDtTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DtTableModule });\nDtTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DtTableModule_Factory(t) { return new (t || DtTableModule)(); }, imports: [[\n            CommonModule,\n            PortalModule,\n            CdkTableModule,\n            DtIconModule,\n            DtFormFieldModule,\n            DtInputModule,\n            DtButtonModule,\n            DtIndicatorModule,\n            DtFormattersModule,\n            DtEmptyStateModule,\n        ],\n        DtIndicatorModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DtTableModule, { declarations: function () { return [DtTable,\n        DtHeaderRow,\n        DtHeaderRowDef,\n        DtRow,\n        DtRowDef,\n        DtCell,\n        DtCellDef,\n        DtColumnDef,\n        DtExpandableCell,\n        DtExpandableRow,\n        DtHeaderCell,\n        DtHeaderCellDef,\n        DtTableEmptyState,\n        DtTableEmptyStateDirective,\n        DtTableEmptyStateImage,\n        DtTableEmptyStateTitle,\n        DtTableEmptyStateMessage,\n        DtTableLoadingState,\n        DtSort,\n        DtSortHeader,\n        DtTableSearch,\n        DtSimpleTextColumn,\n        DtSimpleNumberColumn,\n        DtExpandableRowContent,\n        DtFavoriteColumn]; }, imports: function () { return [CommonModule,\n        PortalModule,\n        CdkTableModule,\n        DtIconModule,\n        DtFormFieldModule,\n        DtInputModule,\n        DtButtonModule,\n        DtIndicatorModule,\n        DtFormattersModule,\n        DtEmptyStateModule]; }, exports: function () { return [DtTable,\n        DtHeaderRow,\n        DtHeaderRowDef,\n        DtRow,\n        DtRowDef,\n        DtCell,\n        DtCellDef,\n        DtColumnDef,\n        DtExpandableCell,\n        DtExpandableRow,\n        DtHeaderCell,\n        DtHeaderCellDef,\n        DtTableEmptyState,\n        DtTableEmptyStateDirective,\n        DtTableEmptyStateImage,\n        DtTableEmptyStateTitle,\n        DtTableEmptyStateMessage,\n        DtTableLoadingState,\n        DtSort,\n        DtSortHeader,\n        DtTableSearch,\n        DtSimpleTextColumn,\n        DtSimpleNumberColumn,\n        DtExpandableRowContent,\n        DtFavoriteColumn,\n        DtIndicatorModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DtTableModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    PortalModule,\n                    CdkTableModule,\n                    DtIconModule,\n                    DtFormFieldModule,\n                    DtInputModule,\n                    DtButtonModule,\n                    DtIndicatorModule,\n                    DtFormattersModule,\n                    DtEmptyStateModule,\n                ],\n                exports: [...EXPORTED_DECLARATIONS, DtIndicatorModule],\n                declarations: [...EXPORTED_DECLARATIONS]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/table-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_PAGE_SIZE = 10;\n/**\n * @template T\n */\nclass DtTableDataSource extends DataSource {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        super();\n        /**\n         * \\@internal DisplayAccessorMap for SimpleColumn displayAccessor functions.\n         */\n        this._displayAccessorMap = new Map();\n        /**\n         * \\@internal SortAccessorMap for SimpleColumn sortAccessor functions. This sortAccessorMap\n         * is automatically populated by the sortAccessor functions on the dt-simple-columns.\n         */\n        this._simpleColumnSortAccessorMap = new Map();\n        /**\n         * \\@internal\n         * SortAccessorMap for SimpleColumn sortAccessor functions. This sortAccessorMap\n         * is exposed to the outside and can be filled by the consumer.\n         */\n        this._customSortAccessorMap = new Map();\n        /**\n         * Comparator map for SimpleColumn comparator functions\n         */\n        this._simpleComparatorMap = new Map();\n        /**\n         * Comparator map for column comparator functions\n         */\n        this._customComparatorMap = new Map();\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        this._filter = new BehaviorSubject('');\n        /**\n         * Used to react to internal changes of the pagination that are made by the data source itself.\n         */\n        this._internalPageChanges = new Subject();\n        /**\n         * Used for unsubscribing\n         */\n        this._destroy = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = Subscription.EMPTY;\n        this._searchChangeSubscription = Subscription.EMPTY;\n        /**\n         * Public stream emitting render data to the table\n         */\n        this.renderData = this._renderData.asObservable();\n        this._search = null;\n        this._pagination = null;\n        this._pageSize = DEFAULT_PAGE_SIZE;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the datas properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         */\n        this.sortingDataAccessor = (/**\n         * @param {?} data\n         * @param {?} sortHeaderId\n         * @return {?}\n         */\n        (data, sortHeaderId) => {\n            /** @type {?} */\n            let value;\n            if (this._customSortAccessorMap.has(sortHeaderId)) {\n                value = (/** @type {?} */ (this._customSortAccessorMap.get(sortHeaderId)))(data);\n            }\n            else if (this._simpleColumnSortAccessorMap.has(sortHeaderId)) {\n                value = (/** @type {?} */ (this._simpleColumnSortAccessorMap.get(sortHeaderId)))(data, sortHeaderId);\n            }\n            else if (this._displayAccessorMap.has(sortHeaderId)) {\n                value = (/** @type {?} */ (this._displayAccessorMap.get(sortHeaderId)))(data, sortHeaderId);\n            }\n            else {\n                // tslint:disable-next-line: no-any\n                value = ((/** @type {?} */ (data)))[sortHeaderId];\n            }\n            if (isNumber(value)) {\n                /** @type {?} */\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < Number.MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            if (value === undefined) {\n                return null;\n            }\n            return value;\n        });\n        /**\n         * Gets a sorted copy of the data array based on the state of the DtSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from DtSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         */\n        this.sortData = (/**\n         * @param {?} data\n         * @param {?} sort\n         * @return {?}\n         */\n        (data, sort) => {\n            /** @type {?} */\n            const active = sort.active;\n            /** @type {?} */\n            const direction = sort.direction;\n            if (!active || direction === '') {\n                return data;\n            }\n            /** @type {?} */\n            const comparator = this._getComparatorFunction(active);\n            return data.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => comparator(a, b) * (direction === 'asc' ? 1 : -1)));\n        });\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        this.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filter\n         * @return {?}\n         */\n        (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            const dataStr = Object.keys(data)\n                .reduce((/**\n             * @param {?} currentTerm\n             * @param {?} key\n             * @return {?}\n             */\n            (currentTerm, key) => \n            // Use an obscure Unicode character to delimit the words in the concatenated string.\n            // This avoids matches where the values of two columns combined will match the user's query\n            // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n            // that has a very low chance of being typed in by somebody in a text field. This one in\n            // particular is \"White up-pointing triangle with dot\" from\n            // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n            // tslint:disable-next-line\n            `${currentTerm}${((/** @type {?} */ (data)))[key]}◬`), '')\n                .toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) !== -1;\n        });\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @return {?}\n     */\n    get data() {\n        return this._data.value;\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) {\n        this._data.next(data);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the DtSort directive used by the table to control its sorting.\n     * Sort changes emitted by the DtSort will trigger an update to the tables\n     * rendered data.\n     * @return {?}\n     */\n    get sort() {\n        return this._sort;\n    }\n    /**\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the DtTableSearch directive used by the table to control which\n     * rows are displayed. Search changes emitted by the DtTableSearch will\n     * trigger an update to the tables rendered data.\n     * @return {?}\n     */\n    get search() {\n        return this._search;\n    }\n    /**\n     * @param {?} search\n     * @return {?}\n     */\n    set search(search) {\n        this._search = search;\n        this._searchChangeSubscription.unsubscribe();\n        if (this._search !== null) {\n            this._searchChangeSubscription = this._search.valueChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this._filter.next(event.value);\n            }));\n        }\n        else {\n            this._searchChangeSubscription = Subscription.EMPTY;\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array.\n     * @return {?}\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set filter(value) {\n        this._filter.next(value);\n    }\n    /**\n     * Instance of the `DtPagination` component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the pagination will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the pagination's properties to calculate which page of data\n     * should be displayed.\n     * @return {?}\n     */\n    get pagination() {\n        return this._pagination;\n    }\n    /**\n     * @param {?} pagination\n     * @return {?}\n     */\n    set pagination(pagination) {\n        this._pagination = pagination;\n        this._internalPageChanges.next();\n        this._updateChangeSubscription();\n    }\n    /**\n     * Number of items to display on a page. By default set to 50.\n     * @return {?}\n     */\n    get pageSize() {\n        return this._pageSize;\n    }\n    /**\n     * @param {?} pageSize\n     * @return {?}\n     */\n    set pageSize(pageSize) {\n        this._pageSize = pageSize;\n        if (!!this._pagination) {\n            this._pagination.pageSize = pageSize;\n            this._internalPageChanges.next();\n        }\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the sort with the provided base data, and send\n     * it to the table for rendering.\n     * @private\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        /** @type {?} */\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort._initialized)\n            : of(null);\n        /** @type {?} */\n        const pageChange = this\n            ._pagination\n            ? merge(this._pagination._initialized, this._internalPageChanges, this._pagination.changed)\n            : of(null);\n        /** @type {?} */\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._filterData(data))));\n        // Watch for filtered data or sort changes to provide a sorted set of data.\n        /** @type {?} */\n        const sortedData = combineLatest([filteredData, sortChange]).pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._sortData(data))));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        const paginatedData = combineLatest([sortedData, pageChange]).pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._pageData(data))));\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        (data) => {\n            this._renderData.next(data);\n        }));\n    }\n    /**\n     * \\@internal\n     * Returns a sorted copy of the data if DtSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _sortData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @private\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // May be overridden for customization.\n        this.filteredData = !this.filter\n            ? data\n            : data.filter((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            (obj) => this.filterPredicate(obj, this.filter)));\n        if (this._pagination &&\n            this._pagination.length !== this.filteredData.length) {\n            this._updatePagination(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a paged splice of the provided data array according to the provided pagination's page\n     * index and length. If there is no pagination provided, return the data array as provided.\n     * @private\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this._pagination) {\n            return data;\n        }\n        // -1 in case that the currentPage starts with 1\n        /** @type {?} */\n        const pageSize = this._pagination.pageSize;\n        /** @type {?} */\n        const startIndex = (this._pagination.currentPage - 1) * pageSize;\n        return data.slice().splice(startIndex, pageSize);\n    }\n    /**\n     * Updates the pagination to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the pagination's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @private\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePagination(filteredDataLength) {\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this._pagination) {\n                /** @type {?} */\n                const pagination = this._pagination;\n                pagination.length = filteredDataLength;\n                // If the page index is set beyond the page, reduce it to the last page.\n                if (pagination.currentPage > 0) {\n                    // Set the last page index, if this would result to 0, fall back to the default\n                    // page 1.\n                    /** @type {?} */\n                    const lastPageIndex = Math.ceil(pagination.length / pagination.pageSize) || 1;\n                    /** @type {?} */\n                    const newPageIndex = Math.min(pagination.currentPage, lastPageIndex);\n                    if (newPageIndex !== pagination.currentPage) {\n                        pagination.currentPage = newPageIndex;\n                        // Since the pagination only emits after user-generated changes,\n                        // we need our own stream so we know to should re-render the data.\n                        this._internalPageChanges.next();\n                    }\n                }\n            }\n        }));\n    }\n    /**\n     * Used by the DtTable. Called when it connects to the data source.\n     * @param {?} _table\n     * @return {?}\n     */\n    connect(_table) {\n        _table._dataAccessors\n            .pipe(takeUntil(this._destroy))\n            .subscribe((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ comparatorMap, displayAccessorMap, sortAccessorMap }) => {\n            this._displayAccessorMap = displayAccessorMap;\n            this._simpleColumnSortAccessorMap = sortAccessorMap;\n            this._simpleComparatorMap = comparatorMap;\n            this._updateChangeSubscription();\n        }));\n        return this._renderData;\n    }\n    /**\n     * Used by the DtTable. Called when it is destroyed. No-op.\n     * @return {?}\n     */\n    disconnect() {\n        this._renderChangesSubscription.unsubscribe();\n        this._searchChangeSubscription.unsubscribe();\n        this._destroy.next();\n        this._destroy.complete();\n    }\n    /**\n     * Lets the user define a sortAccessor function for a named column,\n     * that is being used for sorting when the DataSource is used in combination\n     * with simple and non-simple columns.\n     * @param {?} columnName\n     * @param {?} fn\n     * @return {?}\n     */\n    addSortAccessorFunction(columnName, fn) {\n        this._customSortAccessorMap.set(columnName, fn);\n        this._data.next(this._data.value);\n    }\n    /**\n     * Lets the user remove a sortAccessor function for a named column,\n     * that is being used for sorting when the DataSource is used in combination\n     * with simple and non-simple columns.\n     * @param {?} columnName\n     * @return {?}\n     */\n    removeSortAccessorFunction(columnName) {\n        this._customSortAccessorMap.delete(columnName);\n    }\n    /**\n     * Lets the user define a comparator function for a named column,\n     * that is being used for sorting when the DataSource is used in combination\n     * with simple and non-simple columns.\n     * A comparator defined with this function is used instead of a comparator\n     * defined in a simple column.\n     * @param {?} columnName\n     * @param {?} fn\n     * @return {?}\n     */\n    addComparatorFunction(columnName, fn) {\n        this._customComparatorMap.set(columnName, fn);\n        this._data.next(this._data.value);\n    }\n    /**\n     * Lets the user remove a comparator function for a named column.\n     * @param {?} columnName\n     * @return {?}\n     */\n    removeComparatorFunction(columnName) {\n        this._customComparatorMap.delete(columnName);\n    }\n    /**\n     * Gets a comparator function which calls the responsible comparator function.\n     * The comparator is first searched in the custom comparators, then in the simple\n     * comparators, and if this does not exists, a fallback comparator is used.\n     * @private\n     * @param {?} columnName\n     * @return {?}\n     */\n    _getComparatorFunction(columnName) {\n        /** @type {?} */\n        const customComparator = this._customComparatorMap.get(columnName);\n        if (customComparator) {\n            return customComparator;\n        }\n        /** @type {?} */\n        const simpleComparator = this._simpleComparatorMap.get(columnName);\n        if (simpleComparator) {\n            return (/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => simpleComparator(a, b, columnName));\n        }\n        return (/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => this._fallbackColumnComparator(a, b, columnName));\n    }\n    /**\n     * Default comparator so compare two rows.\n     * If is used if no comparator is set in the SimpleColumns or custom defined one.\n     * @private\n     * @param {?} left\n     * @param {?} right\n     * @param {?} active\n     * @return {?}\n     */\n    _fallbackColumnComparator(left, right, active) {\n        /** @type {?} */\n        const valueA = this.sortingDataAccessor(left, active);\n        /** @type {?} */\n        const valueB = this.sortingDataAccessor(right, active);\n        return compareValues(valueA, valueB, 'asc');\n    }\n}\nif (false) {\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     * @type {?}\n     */\n    DtTableDataSource.prototype.filteredData;\n    /**\n     * \\@internal DisplayAccessorMap for SimpleColumn displayAccessor functions.\n     * @type {?}\n     */\n    DtTableDataSource.prototype._displayAccessorMap;\n    /**\n     * \\@internal SortAccessorMap for SimpleColumn sortAccessor functions. This sortAccessorMap\n     * is automatically populated by the sortAccessor functions on the dt-simple-columns.\n     * @type {?}\n     */\n    DtTableDataSource.prototype._simpleColumnSortAccessorMap;\n    /**\n     * \\@internal\n     * SortAccessorMap for SimpleColumn sortAccessor functions. This sortAccessorMap\n     * is exposed to the outside and can be filled by the consumer.\n     * @type {?}\n     */\n    DtTableDataSource.prototype._customSortAccessorMap;\n    /**\n     * Comparator map for SimpleColumn comparator functions\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._simpleComparatorMap;\n    /**\n     * Comparator map for column comparator functions\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._customComparatorMap;\n    /**\n     * Stream that emits when a new data array is set on the data source.\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._data;\n    /**\n     * Stream emitting render data to the table (depends on ordered data changes).\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._renderData;\n    /**\n     * Stream that emits when a new filter string is set on the data source.\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._filter;\n    /**\n     * Used to react to internal changes of the pagination that are made by the data source itself.\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._internalPageChanges;\n    /**\n     * Used for unsubscribing\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._destroy;\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._renderChangesSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._searchChangeSubscription;\n    /**\n     * Public stream emitting render data to the table\n     * @type {?}\n     */\n    DtTableDataSource.prototype.renderData;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._sort;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._search;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._pagination;\n    /**\n     * @type {?}\n     * @private\n     */\n    DtTableDataSource.prototype._pageSize;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the datas properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @type {?}\n     */\n    DtTableDataSource.prototype.sortingDataAccessor;\n    /**\n     * Gets a sorted copy of the data array based on the state of the DtSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from DtSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @type {?}\n     */\n    DtTableDataSource.prototype.sortData;\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * \\@param data Data object used to check against the filter.\n     * \\@param filter Filter string that has been set on the data source.\n     * \\@return Whether the filter matches against the data\n     * @type {?}\n     */\n    DtTableDataSource.prototype.filterPredicate;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: dynatrace-barista-components-table.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DT_TABLE_SEARCH_CONTROL_VALUE_ACCESSOR, DtCell, DtCellDef, DtColumnDef, DtExpandableCell, DtExpandableRow, DtExpandableRowChangeEvent, DtExpandableRowContent, DtFavoriteColumn, DtHeaderCell, DtHeaderCellDef, DtHeaderRow, DtHeaderRowDef, DtRow, DtRowDef, DtSimpleColumnBase, DtSimpleNumberColumn, DtSimpleTextColumn, DtSort, DtSortBase, DtSortHeader, DtSortHeaderBase, DtTable, DtTableDataSource, DtTableEmptyState, DtTableEmptyStateDirective, DtTableEmptyStateImage, DtTableEmptyStateMessage, DtTableEmptyStateTitle, DtTableLoadingState, DtTableModule, DtTableSearch, _DtSortHeaderMixinBase, _DtSortMixinBase, _DtTableBase, _DtTableBaseModule, _setDtColumnCssClasses, _updateDtColumnStyles, getDtSortHeaderNotContainedWithinSortError, getDtSortInvalidDirectionError };\n\n//# sourceMappingURL=dynatrace-barista-components-table.js.map","import { Component, AfterViewInit, ViewChildren, QueryList, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { DtPagination } from '@dynatrace/barista-components/pagination';\nimport { DtTableDataSource, DtSort, DtTableSearch, DtTable } from '@dynatrace/barista-components/table';\nimport { startWith } from 'rxjs/operators';\nimport { HeroService } from '../hero.service';\nimport { Hero } from '../hero';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { trigger, state, style, transition, animate, group, keyframes } from '@angular/animations';\n\n@Component({\n  selector: 'app-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  styleUrls: ['./dynamic-table.component.css'],\n  animations: [\n    trigger('table', [\n      state('enter', style({\n        transform: 'translateX(0)'\n      })),\n      state('hide', style({\n        transform: 'translateX(100px)'\n      })),\n      transition('* => hide', [\n        animate(1400, keyframes([\n          style({\n            transform: 'translateX(0px)',\n            opacity: 1,\n            offset: 0\n          }),\n          style({\n            transform: 'translateX(20px)',\n            opacity: 0.9,\n            offset: 0.3\n          }),\n          style({\n            transform: 'translateX(35px)',\n            opacity: 0.7,\n            offset: 0.5\n          }),\n          style({\n            transform: 'translateX(50px)',\n            opacity: 0.5,\n            offset: 0.7\n          }),\n          style({\n            transform: 'translateX(100px)',\n            opacity: 0,\n            offset: 1\n          })\n        ]))\n      ]),\n    ]),\n  ]\n})\n\nexport class DynamicTableComponent implements AfterViewInit, OnInit, OnDestroy {\n  private data: Hero[] | any;\n\n  // Get the viewChild to pass the sorter reference to the datasource.\n  @ViewChild('sortable', { read: DtSort, static: true }) sortable: DtSort;\n  @ViewChild(DtPagination, { static: true }) pagination: DtPagination;\n  @ViewChild('heroesTable') heroesTable: DtTable<any>;\n  @ViewChildren(DtPagination) paginationList: QueryList<DtPagination>;\n  @ViewChild(DtTableSearch, { static: true }) tableSearch: DtTableSearch;\n\n  // Initialize the table's data source\n  public dataSource: DtTableDataSource<{\n    id: number;\n    name: string;\n    nickname?: string;\n  }>;\n\n  subscription: Subscription;\n  searchValue = '';\n\n  constructor(private heroService: HeroService, private router: Router) { }\n\n  ngOnInit(): void {\n    const heroesLocal: Hero[] = this.heroService.tryGetHeroes();\n    if (!heroesLocal) {\n      this.heroService.getHeroes().subscribe(h => this.onGetHeroes(h));\n    } else {\n      this.onGetHeroes(heroesLocal);\n    }\n  }\n\n  add(name: string): void {\n    name = name.trim();\n\n    if (!name) {\n      return;\n    }\n\n    const heroesLocal: Hero[] = this.heroService.tryGetHeroes();\n    const maxId = Math.max.apply(null, heroesLocal.map(h => h.id));\n    const newHero: Hero = {\n      name, id: maxId + 1, series: {}, stories: {}, nickname: name,\n      description: '', modified: new Date().toString(), resourceURI: '', comics: {}, events: {}, urls: [],\n      thumbnail: { path: 'https://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available', extension: 'jpg' }\n    };\n\n    heroesLocal.push(newHero);\n    this.heroService.addHero(newHero).subscribe(() => this.heroService.setHeroes(heroesLocal));\n    // this.scrollToBottom();\n  }\n\n  updateDataSource(heroes: Hero[]): void {\n    let goToEnd: boolean;\n    if (this.data && heroes.length > this.data.length) {\n      goToEnd = true;\n    }\n\n    const isNewPage = this.data.length % this.pagination.pageSize === 0;\n    this.initTable(heroes);\n\n    if (goToEnd) {\n      this.pagination.currentPage = isNewPage ? this.pagination.numberOfPages + 1 : this.pagination.numberOfPages;\n      this.dataSource.pagination = this.paginationList.last;\n    }\n\n    this.paginationChanges();\n  }\n\n  initTable(heroes: any): void {\n    this.data = heroes;\n    this.dataSource = new DtTableDataSource(heroes);\n    this.dataSource.sort = this.sortable;\n    this.dataSource.search = this.tableSearch;\n    this.dataSource.pagination = this.pagination;\n    this.dataSource.pageSize = 20;\n  }\n\n  private onGetHeroes(heroes: Hero[]): void {\n    heroes.map(h => h.nickname = h.nickname || h.name);\n    this.initTable(heroes);\n  }\n\n  ngAfterViewInit(): void {\n    if (this.dataSource) {\n      this.dataSource.sort = this.sortable;\n      this.dataSource.search = this.tableSearch;\n      this.paginationChanges();\n    }\n\n    this.subscription = this.heroService.heroesChanged.subscribe((heroes: Hero[]) => this.updateDataSource(heroes));\n  }\n\n  paginationChanges() {\n    this.paginationList.changes.pipe(startWith(null)).subscribe(() => {\n      if (this.paginationList.first) {\n        this.dataSource.pagination = this.paginationList.first;\n        this.dataSource.pageSize = 20;\n      } else {\n        this.dataSource.pagination = null;\n      }\n    });\n  }\n\n  deleteHero(id: number, row: any): void {\n    row.isDeleted = true;\n    let heroesLocal = this.data || this.heroService.tryGetHeroes();\n    this.heroService.getHeroIndex(id).subscribe((index: number) => {\n      heroesLocal = heroesLocal.filter((h: Hero) => h.id !== id);\n      this.heroService.deleteHero(index).subscribe(() => this.heroService.setHeroes(heroesLocal));\n    });\n  }\n\n  navigateToDetails(id: number) {\n    this.router.navigate(['/detail/', id]);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe(); // we need to get notified of changes from the detail page\n  }\n}\n","  <form #f=\"ngForm\" (ngSubmit)=\"f.valid && f.resetForm()\">\n    <div class=\"flex\">\n      <input type=\"text\" name=\"heroName\" class=\"hero_input\" [class.empty]=\"!heroName.value.trim().length\" minlength=\"1\"\n        dtInput placeholder=\"Please enter hero name\" #heroName required ngModel />\n      <button type=\"submit\" class=\"inline-flex button-item\" (click)=\"add(heroName.value)\">\n        <span class=\"add-icon\">\n          <dt-icon name=\"plus-add\"></dt-icon>\n        </span>\n        Add\n      </button>\n    </div>\n  </form>\n\n  <ng-container>\n    <dt-table-search name=\"tableSearch\" [(ngModel)]=\"searchValue\" placeholder=\"Search table data...\"\n      aria-label=\"Search table data\"></dt-table-search>\n    <dt-table [dataSource]=\"dataSource\" interactiveRows dtSort #sortable #heroesTable class=\"heroes\">\n      <ng-container dtColumnDef=\"name\">\n        <dt-header-cell *dtHeaderCellDef dt-sort-header>Name</dt-header-cell>\n        <dt-cell *dtCellDef=\"let row\" (click)=\"navigateToDetails(row.id)\">{{row.name}}\n        </dt-cell>\n      </ng-container>\n      <ng-container dtColumnDef=\"nickname\">\n        <dt-header-cell *dtHeaderCellDef dt-sort-header>Nickname</dt-header-cell>\n        <dt-cell *dtCellDef=\"let row\" (click)=\"navigateToDetails(row.id)\">{{row.nickname}}\n        </dt-cell>\n      </ng-container>\n      <ng-container dtColumnDef=\"id\">\n        <dt-header-cell *dtHeaderCellDef dt-sort-header>ID</dt-header-cell>\n        <dt-cell *dtCellDef=\"let row\" (click)=\"navigateToDetails(row.id)\">{{row.id}}</dt-cell>\n      </ng-container>\n      <ng-container dtColumnDef=\"delete\">\n        <dt-header-cell *dtHeaderCellDef></dt-header-cell>\n        <dt-cell *dtCellDef=\"let row\" style=\"cursor: initial;\">\n          <span class=\"trash\" (click)=\"deleteHero(row.id, row)\">\n            <span></span>\n            <i></i>\n          </span>\n        </dt-cell>\n      </ng-container>\n\n      <dt-header-row *dtHeaderRowDef=\"['id', 'name', 'nickname','delete']\"></dt-header-row>\n      <dt-row [@table]=\"row.isDeleted ? 'hide' : null\"\n        *dtRowDef=\"let row; columns: ['id', 'name', 'nickname', 'delete']\"></dt-row>\n    </dt-table>\n    <dt-pagination #pagination></dt-pagination>\n  </ng-container>\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { HeroService } from '../hero.service';\n\n@Component({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\n\nexport class HeroesComponent implements OnInit {\n  @ViewChild('heroesContainer') heroesContainer: ElementRef;\n\n  constructor(public heroService: HeroService) { }\n\n  ngOnInit() { }\n}\n","<div class=\"heroes_container\">\n  <h2>Heroes</h2>\n  <div #heroesContainer>\n    <app-dynamic-table></app-dynamic-table>\n    <div *ngIf=\"!heroService.tryGetHeroes()\">\n      <app-loading></app-loading>\n    </div>\n  </div>\n  <app-scrolling [container]=\"heroesContainer\"></app-scrolling>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../shared/shared.module';\nimport { DtPaginationModule } from '@dynatrace/barista-components/pagination';\nimport { DtTableModule } from '@dynatrace/barista-components/table';\nimport { HeroesComponent } from './heroes.component';\nimport { DynamicTableComponent } from '../dynamic-table/dynamic-table.component';\nimport { ScrollingComponent } from '../scrolling/scrolling.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [\n    HeroesComponent,\n    DynamicTableComponent,\n    ScrollingComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    DtPaginationModule,\n    DtTableModule,\n    RouterModule.forChild([{ path: '', component: HeroesComponent }]),\n  ]\n})\nexport class HeroesModule { }\n","import { Component, OnInit, HostListener, Input, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-scrolling',\n  templateUrl: './scrolling.component.html',\n  styleUrls: ['./scrolling.component.css']\n})\nexport class ScrollingComponent implements OnInit {\n  @Input() container: any;\n\n  public isTop = true;\n  public isHidden: boolean;\n\n  @HostListener('window:scroll', ['$event'])\n  handleScroll($event) {\n    this.isTop = window.pageYOffset <= window.innerHeight / 3;\n    this.isHidden = false;\n    // console.log(`scrolled to ${this.isTop ? 'top' : 'bottom'}; \\n isHidden: ${this.isHidden}`);\n    // console.log(window.pageYOffset, $event);\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  private scrollToBottom(): void {\n    window.scroll({\n      top: this.container.scrollHeight,\n      left: 0,\n      behavior: 'smooth'\n    });\n\n    this.isTop = false;\n    this.isHidden = false;\n    // console.log(`scrolled to bottom`);\n  }\n\n  private scrollToTop(): void {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: 'smooth'\n    });\n\n    this.isTop = true;\n    this.isHidden = true;\n    // console.log(`scrolled to top; is hidden`);\n  }\n\n  public toggleScroll() {\n    this.isTop ? this.scrollToBottom() : this.scrollToTop();\n  }\n}\n","<dt-icon name=\"dropdownopen\" class=\"scroll\" [class.scrolltop]=\"!isTop\" (click)=\"toggleScroll()\" *ngIf=\"!isHidden\"></dt-icon>\n"],"sourceRoot":"webpack:///"}